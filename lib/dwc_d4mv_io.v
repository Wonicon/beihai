//-----------------------------------------------------------------------------
// Copyright (c) 2017 Synopsys Inc. All rights reserved.
// 
// Synopsys Proprietary and Confidential. This file contains confidential
// information and the trade secrets of Synopsys Inc. Use, disclosure, or
// reproduction is prohibited without the prior express written permission
// of Synopsys, Inc.
// 
// Synopsys, Inc.
// 700 East Middlefield Road
// Mountain View, California 94043
// (800) 541-7737
//                                                                             
//-----------------------------------------------------------------------------

`timescale 1ns / 1ps
  
// ----------------------------------------------------------------------------
// General-Purpose SSTL Bi-directional IO Buffers
// ----------------------------------------------------------------------------
`celldefine
module DWC_D4MV_PDDRIO_NS (PAD, OE, DOUT, DI, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, 
                           DT,MVREF,
`ifdef DWC_DDRPHY_PG_PINS                          
                           MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                           
                           POCH, ZIOH, LENH, PDRH18, MVREFSE, RK); // Jing: add RK
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input  [2:0]  IOM;      // I/O mode
  input  [1:0]  SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply); Jing: add [3:0]
`ifdef DWC_DDRPHY_PG_PINS  
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply  
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  input  [1:0]  RK; // Jing: add RK, select MVREF[3:0]
                
  wire          ZD_internal;     // internal output data - after OE's ZIOH check
  wire          OD_internal;     // internal output data
  wire          ZE_internal;     // internal output enable - after ZIOH check
  wire          OE_internal;     // internal output enable
  wire          DI_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PDR_DT_IOM;
  wire          PDR_DT_IOM_LH;
  wire		RCV_EN;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
  wire          VREF_INT;

  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire 	 [1:0]	      RK_ret;

  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[17:0] -  %b", ZIOH[17:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[35:18] -  %b", ZIOH[35:18]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[53:36] -  %b", ZIOH[53:36]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[71:54] -  %b", ZIOH[71:54]);
      end
    end
  
  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  
  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;

//`ifdef DWC_DDRPHY_ATPG_MODEL
//	assign DI_internal = LB ? OD_internal : PDR_DT_IOM_LH;
//`else
//	`ifdef SDF_ANNOTATE      
//		assign DI_internal = LB ? OD_internal : (PDR_DT_IOM_LH === 1'bx) ? $random : PDR_DT_IOM_LH;
//	`else
		assign DI_internal = LB ? OD_internal : PDR_DT_IOM_LH;
//	`endif    
//`endif

`ifdef DWC_DDRPHY_ATPG_MODEL
   assign VREF_INT = (!RK_ret[1] && !RK_ret[0]) ? MVREF[0]: (!RK_ret[1] && RK_ret[0]) ? MVREF[1]: (RK_ret[1] && !RK_ret[0]) ? MVREF[2]: MVREF[3];
`else
   assign VREF_INT = (RK_ret==2'b00) ? MVREF[0]: (RK_ret==2'b01) ? MVREF[1]: (RK_ret==2'b10) ? MVREF[2]: MVREF[3];
`endif

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);
  assign #10 POCH_internal_dly = POCH_internal;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);

  DWC_D4MV_LATCH RK0_lat (RK_ret[0], RK[0], LENH);
  DWC_D4MV_LATCH RK1_lat (RK_ret[1], RK[1], LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD, PDR_b);
  
  or (RCV_EN, IOM[0], VREF_INT); // Jing: change MVREF to MVREF[3:0]
  bufif1 (PDR_DT_IOM, PDR_DT, RCV_EN);

  buf (DI, DI_internal);

  and (DT, PDR_DT_IOM_LH, ET);
	or (DI_DT_en, POCH_internal, LENH);

	assign PDR_DT_IOM_LH = DI_DT_en ? 1'b0 : PDR_DT_IOM;

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

//Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check
   wire PAD_dly;

   assign #0.0005 PAD_dly = PAD;
   
  always @(PAD)
    begin
      if (!$test$plusargs("bus_conflict_off"))
        if ($countdrivers(PAD) && (PAD_dly === 1'bx) && (POCH_internal == POCH_internal_dly))
          begin
             $display("%t 1 ++BUS CONFLICT++ : %m", $realtime);
             $display("drivers for PAD = %0d, PAD = %x, POCH_internal = %0d, POCH_internal_dly = %0d", $countdrivers(PAD), PAD, POCH_internal, POCH_internal_dly);
             
          end
       
    end
  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PDDRIO_EW (PAD, OE, DOUT, DI, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, 
                           DT,MVREF,
`ifdef DWC_DDRPHY_PG_PINS                          
                           MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                           
                           POCH, ZIOH, LENH, PDRH18, MVREFSE, RK); // Jing: add RK
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input  [2:0]  IOM;      // I/O mode
  input  [1:0]  SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply); Jing: add [3:0]
`ifdef DWC_DDRPHY_PG_PINS  
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply  
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  input  [1:0]  RK; // Jing: add RK, select MVREF[3:0]
                
  wire          ZD_internal;     // internal output data - after OE's ZIOH check
  wire          OD_internal;     // internal output data
  wire          ZE_internal;     // internal output enable - after ZIOH check
  wire          OE_internal;     // internal output enable
  wire          DI_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PDR_DT_IOM;
  wire          PDR_DT_IOM_LH;
  wire		RCV_EN;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
  wire          VREF_INT;

  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire 	 [1:0]	      RK_ret;

  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[17:0] -  %b", ZIOH[17:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[35:18] -  %b", ZIOH[35:18]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[53:36] -  %b", ZIOH[53:36]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[71:54] -  %b", ZIOH[71:54]);
      end
    end
  
  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  
  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;

//`ifdef DWC_DDRPHY_ATPG_MODEL
//	assign DI_internal = LB ? OD_internal : PDR_DT_IOM_LH;
//`else
//	`ifdef SDF_ANNOTATE      
//		assign DI_internal = LB ? OD_internal : (PDR_DT_IOM_LH === 1'bx) ? $random : PDR_DT_IOM_LH;
//	`else
		assign DI_internal = LB ? OD_internal : PDR_DT_IOM_LH;
//	`endif    
//`endif

`ifdef DWC_DDRPHY_ATPG_MODEL
   assign VREF_INT = (!RK_ret[1] && !RK_ret[0]) ? MVREF[0]: (!RK_ret[1] && RK_ret[0]) ? MVREF[1]: (RK_ret[1] && !RK_ret[0]) ? MVREF[2]: MVREF[3];
`else
   assign VREF_INT = (RK_ret==2'b00) ? MVREF[0]: (RK_ret==2'b01) ? MVREF[1]: (RK_ret==2'b10) ? MVREF[2]: MVREF[3];
`endif

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);
  assign #10 POCH_internal_dly = POCH_internal;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);

  DWC_D4MV_LATCH RK0_lat (RK_ret[0], RK[0], LENH);
  DWC_D4MV_LATCH RK1_lat (RK_ret[1], RK[1], LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD, PDR_b);
  
  or (RCV_EN, IOM[0], VREF_INT); // Jing: change MVREF to MVREF[3:0]
  bufif1 (PDR_DT_IOM, PDR_DT, RCV_EN);

  buf (DI, DI_internal);

  and (DT, PDR_DT_IOM_LH, ET);
	or (DI_DT_en, POCH_internal, LENH);

	assign PDR_DT_IOM_LH = DI_DT_en ? 1'b0 : PDR_DT_IOM;

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

//Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check
   wire PAD_dly;

   assign #0.0005 PAD_dly = PAD;
   
  always @(PAD)
    begin
      if (!$test$plusargs("bus_conflict_off"))
        if ($countdrivers(PAD) && (PAD_dly === 1'bx) && (POCH_internal == POCH_internal_dly))
          begin
             $display("%t 2 ++BUS CONFLICT++ : %m", $realtime);
             $display("drivers for PAD = %0d, PAD = %x, POCH_internal = %0d, POCH_internal_dly = %0d", $countdrivers(PAD), PAD, POCH_internal, POCH_internal_dly);
             
          end
       
    end
  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

  
// ----------------------------------------------------------------------------
// CKE SSTL Bi-directional IO Buffer
// ----------------------------------------------------------------------------
`celldefine
module DWC_D4MV_PCKE_NS (PAD, OE, DOUT, DI, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, 
                         DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS                         
                         MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                         
                         POCH, ZIOH, LENH, PDRH18, MVREFSE, RK);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input  [2:0]  IOM;      // I/O mode
  input  [1:0]  SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS                           
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input		PDRH18; //power down receiver
  input		MVREFSE; // Special Vref for single ended receiver
  input  [1:0]  RK;
                
  wire          ZD_internal;     // internal output data - after OE's ZIOH check
  wire          OD_internal;     // internal output data
  wire          ZE_internal;     // internal output enable - after ZIOH check
  wire          OE_internal;     // internal output enable
  wire          DI_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PDR_DT_IOM;
  wire		RCV_EN;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
  wire          DT_internal;
  wire          VREF_INT;
//  wire 		DI_POCH_internal;
  wire          PDR_DT_IOM_LH;
  wire          DI_DT_en;
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire 	 [1:0]	      RK_ret;


  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[17:0] -  %b", ZIOH[17:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[35:18] -  %b", ZIOH[35:18]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[53:36] -  %b", ZIOH[53:36]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[71:54] -  %b", ZIOH[71:54]);
      end
    end
  
  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & (OE_internal | POCH_internal) & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  
  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = POCH_internal ? 1'b1 : ((OE_internal | POCH_internal) & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0])));

  assign OD_internal = POCH_internal ? 1'b0 : SJ ? DJ : DOUT;
  assign OD_internal_LB = SJ ? DJ : DOUT;
  
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal_LB : PDR_DT_IOM_LH;

`ifdef DWC_DDRPHY_ATPG_MODEL
   assign VREF_INT = (!RK_ret[1] && !RK_ret[0]) ? MVREF[0]: (!RK_ret[1] && RK_ret[0]) ? MVREF[1]: (RK_ret[1] && !RK_ret[0]) ? MVREF[2]: MVREF[3];
  `else
   assign VREF_INT = (RK_ret==2'b00) ? MVREF[0]: (RK_ret==2'b01) ? MVREF[1]: (RK_ret==2'b10) ? MVREF[2]: MVREF[3];
  `endif

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);

  DWC_D4MV_LATCH RK0_lat (RK_ret[0], RK[0], LENH);
  DWC_D4MV_LATCH RK1_lat (RK_ret[1], RK[1], LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD, PDR_b);

  or (RCV_EN, IOM[0], VREF_INT); // Jing: change MVREF to MVREF[3:0]
  bufif1 (PDR_DT_IOM, PDR_DT, RCV_EN);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);
  assign #10 POCH_internal_dly = POCH_internal;
  
//  buf (DI, DI_internal);
//  and (DT, PDR_DT, ET);

//`ifdef DWC_DDRPHY_ATPG_MODEL
  buf (DI, DI_internal);
  and (DT, PDR_DT_IOM_LH, ET);
/*
`else
	and (DT_internal, PDR_DT_IOM, ET);
      
//assign DI = POCH_internal ? 1'bx : DI_internal;
	assign DI_POCH_internal = POCH_internal ? 1'bx : DI_internal;
	assign DT = POCH_internal ? 1'bx : DT_internal;
	buf (DI, DI_POCH_internal);
`endif
*/

or (DI_DT_en, POCH_internal, LENH);
assign PDR_DT_IOM_LH = DI_DT_en ? 1'b0 : PDR_DT_IOM;

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end
  
 //Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check
   wire PAD_dly;

   assign #0.0005 PAD_dly = PAD;

  always @(PAD)
    begin
      if (!$test$plusargs("bus_conflict_off"))
        if ($countdrivers(PAD) && (PAD_dly === 1'bx) && (POCH_internal == POCH_internal_dly)) begin
          $display("%t 3 ++BUS CONFLICT++ : %m", $realtime);
             $display("drivers for PAD = %0d, PAD = %x, POCH_internal = %0d, POCH_internal_dly = %0d", $countdrivers(PAD), PAD, POCH_internal, POCH_internal_dly);

end
    end
  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (POCH => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PCKE_EW (PAD, OE, DOUT, DI, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, 
                         DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS                         
                         MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                         
                         POCH, ZIOH, LENH, PDRH18, MVREFSE, RK);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input  [2:0]  IOM;      // I/O mode
  input  [1:0]  SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS                           
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input		PDRH18; //power down receiver
  input		MVREFSE; // Special Vref for single ended receiver
  input  [1:0]  RK;
                
  wire          ZD_internal;     // internal output data - after OE's ZIOH check
  wire          OD_internal;     // internal output data
  wire          ZE_internal;     // internal output enable - after ZIOH check
  wire          OE_internal;     // internal output enable
  wire          DI_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PDR_DT_IOM;
  wire		RCV_EN;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
  wire          DT_internal;
  wire          VREF_INT;
//  wire 		DI_POCH_internal;
  wire          PDR_DT_IOM_LH;
  wire          DI_DT_en;
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire 	 [1:0]	      RK_ret;


  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[17:0] -  %b", ZIOH[17:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[35:18] -  %b", ZIOH[35:18]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[53:36] -  %b", ZIOH[53:36]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[71:54] -  %b", ZIOH[71:54]);
      end
    end
  
  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & (OE_internal | POCH_internal) & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  
  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = POCH_internal ? 1'b1 : ((OE_internal | POCH_internal) & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0])));

  assign OD_internal = POCH_internal ? 1'b0 : SJ ? DJ : DOUT;
  assign OD_internal_LB = SJ ? DJ : DOUT;
  
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal_LB : PDR_DT_IOM_LH;

`ifdef DWC_DDRPHY_ATPG_MODEL
   assign VREF_INT = (!RK_ret[1] && !RK_ret[0]) ? MVREF[0]: (!RK_ret[1] && RK_ret[0]) ? MVREF[1]: (RK_ret[1] && !RK_ret[0]) ? MVREF[2]: MVREF[3];
  `else
   assign VREF_INT = (RK_ret==2'b00) ? MVREF[0]: (RK_ret==2'b01) ? MVREF[1]: (RK_ret==2'b10) ? MVREF[2]: MVREF[3];
  `endif

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);

  DWC_D4MV_LATCH RK0_lat (RK_ret[0], RK[0], LENH);
  DWC_D4MV_LATCH RK1_lat (RK_ret[1], RK[1], LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD, PDR_b);

  or (RCV_EN, IOM[0], VREF_INT); // Jing: change MVREF to MVREF[3:0]
  bufif1 (PDR_DT_IOM, PDR_DT, RCV_EN);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);
  assign #10 POCH_internal_dly = POCH_internal;
  
//  buf (DI, DI_internal);
//  and (DT, PDR_DT, ET);

//`ifdef DWC_DDRPHY_ATPG_MODEL
  buf (DI, DI_internal);
  and (DT, PDR_DT_IOM_LH, ET);
/*
`else
	and (DT_internal, PDR_DT_IOM, ET);
      
//assign DI = POCH_internal ? 1'bx : DI_internal;
	assign DI_POCH_internal = POCH_internal ? 1'bx : DI_internal;
	assign DT = POCH_internal ? 1'bx : DT_internal;
	buf (DI, DI_POCH_internal);
`endif
*/

or (DI_DT_en, POCH_internal, LENH);
assign PDR_DT_IOM_LH = DI_DT_en ? 1'b0 : PDR_DT_IOM;

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end
  
 //Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check
   wire PAD_dly;

   assign #0.0005 PAD_dly = PAD;

  always @(PAD)
    begin
      if (!$test$plusargs("bus_conflict_off"))
        if ($countdrivers(PAD) && (PAD_dly === 1'bx) && (POCH_internal == POCH_internal_dly)) begin
          $display("%t 4 ++BUS CONFLICT++ : %m", $realtime);
             $display("drivers for PAD = %0d, PAD = %x, POCH_internal = %0d, POCH_internal_dly = %0d", $countdrivers(PAD), PAD, POCH_internal, POCH_internal_dly);

end
    end
  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (POCH => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

  
// ----------------------------------------------------------------------------
// DQS Gate SSTL Bi-directional IO Buffer
// ----------------------------------------------------------------------------
`celldefine
module DWC_D4MV_PDQSG_VSSQ_NS (OE, DOUT, DI, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, 
                               DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                               MVAA_PLL, MVDDQ, MVSSQ,  MVDD, MVSS,
`endif                               
                               POCH, ZIOH, LENH, PDRH18, MVREFSE,
                               DQSBSE, DQSSE); //added pins
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input  [2:0]  IOM;      // I/O mode
  input  [1:0]  SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input  [1:0]  LB;       // loop-back select, changed to two bit vector
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
  
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  inout         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif  
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  input		DQSBSE;
  input		DQSSE;
 // input  [1:0]  RK;
                              
  wire          PAD;
  wire          ZD_internal;     // internal output data - after OE's ZIOH check
  wire          OD_internal;     // internal output data
  wire          ZE_internal;     // internal output enable - after ZIOH check
  wire          OE_internal;     // internal output enable
  wire          DI_internal;
  wire          DI_internal_chk;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PDR_DT_IOM;
  wire		RCV_EN;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
                
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;


  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[17:0] -  %b", ZIOH[17:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[35:18] -  %b", ZIOH[35:18]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[53:36] -  %b", ZIOH[53:36]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[71:54] -  %b", ZIOH[71:54]);
      end
    end
  
  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  
  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
`ifdef DWC_DDRPHY_ATPG_MODEL
   assign DI_internal = (LB[1] && LB[0]) ? DQSSE:(LB[1] && !LB[0])? DQSBSE:(!LB[1] && LB[0])? OD_internal : PDR_DT_IOM;
  `else
   assign DI_internal = (LB==2'b11) ? DQSSE:(LB==2'b10)? DQSBSE:(LB==2'b01)? OD_internal : PDR_DT_IOM;
  `endif

 // assign DI_internal = LB? OD_internal : PDR_DT;
 // assign DI_internal_chk = OE_internal ? DI_internal : 1'bx;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD, PDR_b);

  or (RCV_EN, IOM[0], MVREFSE); // Jing: change MVREF to MVREF[3:0]
  bufif1 (PDR_DT_IOM, PDR_DT, RCV_EN);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);
   assign #10 POCH_internal_dly = POCH_internal;
 
  //buf (DI, DI_internal_chk);
  buf (DI, DI_internal);
  and (DT, PDR_DT_IOM, ET);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

/*//Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check
*/
   wire PAD_dly;

   assign #0.0005 PAD_dly = PAD;
  always @(PAD)
    begin
      if (!$test$plusargs("bus_conflict_off"))
        if ($countdrivers(PAD) && (PAD_dly === 1'bx) && (POCH_internal == POCH_internal_dly))
          $display("%t 5 ++BUS CONFLICT++ : %m", $realtime);
    end
  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

      //if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((LB[0] == 1'b1) && (LB[1] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((LB[0] == 1'b1) && (LB[1] == 1'b0)) (LB[0] => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //Updated loopback
      if ((LB[1] == 1'b1) && (LB[0] == 1'b1)) (DQSSE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b1) && (LB[0] == 1'b0)) (DQSBSE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b1)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b1)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b1)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB[1] => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB[0] => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);


      (ET => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PDQSG_VSSQ_EW (OE, DOUT, DI, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, 
                               DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                               MVAA_PLL, MVDDQ, MVSSQ,  MVDD, MVSS,
`endif                               
                               POCH, ZIOH, LENH, PDRH18, MVREFSE,
                               DQSBSE, DQSSE); //added pins
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input  [2:0]  IOM;      // I/O mode
  input  [1:0]  SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input  [1:0]  LB;       // loop-back select, changed to two bit vector
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
  
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  inout         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif  
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  input		DQSBSE;
  input		DQSSE;
 // input  [1:0]  RK;
                              
  wire          PAD;
  wire          ZD_internal;     // internal output data - after OE's ZIOH check
  wire          OD_internal;     // internal output data
  wire          ZE_internal;     // internal output enable - after ZIOH check
  wire          OE_internal;     // internal output enable
  wire          DI_internal;
  wire          DI_internal_chk;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PDR_DT_IOM;
  wire		RCV_EN;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
                
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;


  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[17:0] -  %b", ZIOH[17:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[35:18] -  %b", ZIOH[35:18]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[53:36] -  %b", ZIOH[53:36]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[71:54] -  %b", ZIOH[71:54]);
      end
    end
  
  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  
  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
`ifdef DWC_DDRPHY_ATPG_MODEL
   assign DI_internal = (LB[1] && LB[0]) ? DQSSE:(LB[1] && !LB[0])? DQSBSE:(!LB[1] && LB[0])? OD_internal : PDR_DT_IOM;
  `else
   assign DI_internal = (LB==2'b11) ? DQSSE:(LB==2'b10)? DQSBSE:(LB==2'b01)? OD_internal : PDR_DT_IOM;
  `endif

 // assign DI_internal = LB? OD_internal : PDR_DT;
 // assign DI_internal_chk = OE_internal ? DI_internal : 1'bx;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD, PDR_b);

  or (RCV_EN, IOM[0], MVREFSE); // Jing: change MVREF to MVREF[3:0]
  bufif1 (PDR_DT_IOM, PDR_DT, RCV_EN);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);
   assign #10 POCH_internal_dly = POCH_internal;
 
  //buf (DI, DI_internal_chk);
  buf (DI, DI_internal);
  and (DT, PDR_DT_IOM, ET);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

/*//Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check
*/
   wire PAD_dly;

   assign #0.0005 PAD_dly = PAD;
  always @(PAD)
    begin
      if (!$test$plusargs("bus_conflict_off"))
        if ($countdrivers(PAD) && (PAD_dly === 1'bx) && (POCH_internal == POCH_internal_dly))
          $display("%t 6 ++BUS CONFLICT++ : %m", $realtime);
    end
  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

      //if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (DOUT => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      //if ((LB[0] == 1'b1) && (LB[1] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //if ((LB[0] == 1'b1) && (LB[1] == 1'b0)) (LB[0] => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      //Updated loopback
      if ((LB[1] == 1'b1) && (LB[0] == 1'b1)) (DQSSE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b1) && (LB[0] == 1'b0)) (DQSBSE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (OE => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (OJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b0)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b1)) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b1)) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ((LB[1] == 1'b0) && (LB[0] == 1'b1)) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB[1] => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB[0] => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);


      (ET => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

  
// ----------------------------------------------------------------------------
// SSTL Differential Input Buffer
// ----------------------------------------------------------------------------
`celldefine
module DWC_D4MV_PDIFF_NS (PAD, OE, DOUT, DI, DQSR, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                          MVAA_PLL, MVDDQ, MVSSQ,  MVDD, MVSS,
`endif                          
                          POCH, ZIOH, LENH, DFI, DFO, PDRH18, MVREFSE, PDRSE, DISE);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input [3:0]   DQSR;     // pull-down/up resistor
  input [2:0]   IOM;      // I/O mode
  input [1:0]   SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input         DFI;      // differential input
  output        DFO;      // differential output
  input		PDRH18;
  input		MVREFSE;  // Special Vref for single ended receiver
  input		PDRSE;   // Power down single-ended receiver
  output	DISE;
             
  wire          ZD_internal;    // internal output data - after OE's ZIOH check              
  wire          OD_internal;    // internal output data
  wire          ZE_internal;    // internal output enable - after ZIOH check
  wire          OE_internal;    // internal output enable
  wire          DI_internal;
  wire          DISE_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PAD_DFI;
  wire          pad_pu;
  wire          pad_pd;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;

  wire          PDR_DT_LH ;  
  wire          PDRSE_DT_IOM;
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  wire          dfi_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire          pad_pu_ret;
  wire          pad_pd_ret;


  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[15:0] -  %b", ZIOH[15:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[31:16] -  %b", ZIOH[31:16]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[47:32] -  %b", ZIOH[47:32]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[63:48] -  %b", ZIOH[63:48]);
      end
    end

  // DI/DFO is valid if PAD and DFI have opposite polarity; otherwise constantly drives 0
  xor (dfi_valid, PAD, DFI);
  or  (dfi_iom, dfi_valid, IOM[0]);
`ifdef DWC_DDRPHY_ATPG_MODEL
  and (PAD_DFI, PAD, dfi_iom);
`else
  assign PAD_DFI = (dfi_iom === 1'bx) ? 1'bx : PAD;
`endif

  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));

  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal : PDR_DT_LH;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);
  DWC_D4MV_LATCH PU_lat (pad_pu_ret, pad_pu, LENH);
  DWC_D4MV_LATCH PD_lat (pad_pd_ret, pad_pd, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);
  
  	 or (DI_DT_en, POCH_internal, LENH);
 assign PDR_DT_LH       = DI_DT_en ? 1'b0 : PDR_DT;
 assign DISE_internal   = POCH_internal ? 1'b0 : PDRSE_DT_IOM ;
 
  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD_DFI, PDR_b);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  buf (DI, DI_internal);
  and (DT, PDR_DT_LH, ET);

  buf (DFO, PAD);

  // modeled dependency of DISE on MVREFSE pin
  or (RCV_EN_SE, IOM[0], MVREFSE);
  bufif1 (PDRSE_DT_IOM, PDRSE_DT, RCV_EN_SE);

  //single ended receiver ---added by WM
 // input buffer (drives '0' when in power down)
  not (PDRSE_b, PDRSE);
  and (PDRSE_DT, PAD, PDRSE_b);
  
  buf (DISE, DISE_internal);

  // PAD is pulled down/up depending on DQSR[3] and whether the
  // pull-down/pull-up is enabled using DQSR[2:0]
  assign pad_pu = DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal; 
  assign pad_pd = ~DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;

  bufif1 (weak1, weak0) pad_pu_buf (PAD, 1'b1, pad_pu_ret);
  bufif1 (weak1, weak0) pad_pd_buf (PAD, 1'b0, pad_pd_ret);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 //added PAD-to-DISE and PDRSE-to-DISE delay arcs by WM
      (PAD => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET  => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DFO) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PDIFF_EW (PAD, OE, DOUT, DI, DQSR, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                          MVAA_PLL, MVDDQ, MVSSQ,  MVDD, MVSS,
`endif                          
                          POCH, ZIOH, LENH, DFI, DFO, PDRH18, MVREFSE, PDRSE, DISE);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input [3:0]   DQSR;     // pull-down/up resistor
  input [2:0]   IOM;      // I/O mode
  input [1:0]   SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input         DFI;      // differential input
  output        DFO;      // differential output
  input		PDRH18;
  input		MVREFSE;  // Special Vref for single ended receiver
  input		PDRSE;   // Power down single-ended receiver
  output	DISE;
             
  wire          ZD_internal;    // internal output data - after OE's ZIOH check              
  wire          OD_internal;    // internal output data
  wire          ZE_internal;    // internal output enable - after ZIOH check
  wire          OE_internal;    // internal output enable
  wire          DI_internal;
  wire          DISE_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PAD_DFI;
  wire          pad_pu;
  wire          pad_pd;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;

  wire          PDR_DT_LH ;  
  wire          PDRSE_DT_IOM;
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  wire          dfi_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire          pad_pu_ret;
  wire          pad_pd_ret;


  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[15:0] -  %b", ZIOH[15:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[31:16] -  %b", ZIOH[31:16]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[47:32] -  %b", ZIOH[47:32]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[63:48] -  %b", ZIOH[63:48]);
      end
    end

  // DI/DFO is valid if PAD and DFI have opposite polarity; otherwise constantly drives 0
  xor (dfi_valid, PAD, DFI);
  or  (dfi_iom, dfi_valid, IOM[0]);
`ifdef DWC_DDRPHY_ATPG_MODEL
  and (PAD_DFI, PAD, dfi_iom);
`else
  assign PAD_DFI = (dfi_iom === 1'bx) ? 1'bx : PAD;
`endif

  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));

  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal : PDR_DT_LH;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);
  DWC_D4MV_LATCH PU_lat (pad_pu_ret, pad_pu, LENH);
  DWC_D4MV_LATCH PD_lat (pad_pd_ret, pad_pd, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);
  
  	 or (DI_DT_en, POCH_internal, LENH);
 assign PDR_DT_LH       = DI_DT_en ? 1'b0 : PDR_DT;
 assign DISE_internal   = POCH_internal ? 1'b0 : PDRSE_DT_IOM ;
 
  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD_DFI, PDR_b);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  buf (DI, DI_internal);
  and (DT, PDR_DT_LH, ET);

  buf (DFO, PAD);

  // modeled dependency of DISE on MVREFSE pin
  or (RCV_EN_SE, IOM[0], MVREFSE);
  bufif1 (PDRSE_DT_IOM, PDRSE_DT, RCV_EN_SE);

  //single ended receiver ---added by WM
 // input buffer (drives '0' when in power down)
  not (PDRSE_b, PDRSE);
  and (PDRSE_DT, PAD, PDRSE_b);
  
  buf (DISE, DISE_internal);

  // PAD is pulled down/up depending on DQSR[3] and whether the
  // pull-down/pull-up is enabled using DQSR[2:0]
  assign pad_pu = DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal; 
  assign pad_pd = ~DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;

  bufif1 (weak1, weak0) pad_pu_buf (PAD, 1'b1, pad_pu_ret);
  bufif1 (weak1, weak0) pad_pd_buf (PAD, 1'b0, pad_pd_ret);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 //added PAD-to-DISE and PDRSE-to-DISE delay arcs by WM
      (PAD => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET  => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DFO) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify
  
endmodule
`endcelldefine

// ----------------------------------------------------------------------------
// SSTL Differential Input Buffer
// ----------------------------------------------------------------------------
`celldefine
module DWC_D4MV_PDIFFT_NS (PAD, OE, DOUT, DI, DQSR, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                          MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                          
                          POCH, ZIOH, LENH, DFI, DFO, PDRH18, MVREFSE, PDRSE, DISE, DID, RK);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input [3:0]   DQSR;     // pull-down/up resistor
  input [2:0]   IOM;      // I/O mode
  input [1:0]   SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input         DFI;      // differential input
  output        DFO;      // differential output
  input		PDRH18;
  input		MVREFSE;  // Special Vref for single ended receiver
  input		PDRSE;   // Power down single-ended receiver
  output	DISE;
  input  [1:0]  RK;
  output DID;

  wire          ZD_internal;    // internal output data - after OE's ZIOH check              
  wire          OD_internal;    // internal output data
  wire          ZE_internal;    // internal output enable - after ZIOH check
  wire          OE_internal;    // internal output enable
  wire          DI_internal;
  wire          DISE_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PAD_DFI;
  wire          pad_pu;
  wire          pad_pd;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
  wire          PDRSE_DT_IOM;
  wire          PDR_DT_LH ;
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  wire          dfi_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire          pad_pu_ret;
  wire          pad_pd_ret;
  wire          DID_internal;
  wire  [1:0]   RK_ret;
  wire          VREF_INT;
  
  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[15:0] -  %b", ZIOH[15:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[31:16] -  %b", ZIOH[31:16]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[47:32] -  %b", ZIOH[47:32]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[63:48] -  %b", ZIOH[63:48]);
      end
    end

  // DI/DFO is valid if PAD and DFI have opposite polarity; otherwise constantly drives 0
  xor (dfi_valid, PAD, DFI);
  or  (dfi_iom, dfi_valid, IOM[0]);
`ifdef DWC_DDRPHY_ATPG_MODEL
  and (PAD_DFI, PAD, dfi_iom);
`else
  assign PAD_DFI = (dfi_iom === 1'bx) ? 1'bx : PAD;
`endif

  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));

  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal : PDR_DT_LH;
  //added loopback for DID
 assign DID_internal = LB ? OD_internal : DISE_internal;
 assign DISE_internal   = POCH_internal ? 1'b0 : PDRSE_DT_IOM ; 
 
 buf (DID, DID_internal);
 
   or (DI_DT_en, POCH_internal, LENH);
 assign PDR_DT_LH       = DI_DT_en ? 1'b0 : PDR_DT; 
   
  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);
  DWC_D4MV_LATCH PU_lat (pad_pu_ret, pad_pu, LENH);
  DWC_D4MV_LATCH PD_lat (pad_pd_ret, pad_pd, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD_DFI, PDR_b);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  buf (DI, DI_internal);
  and (DT, PDR_DT_LH, ET);

  buf (DFO, PAD);
  //added
  DWC_D4MV_LATCH RK0_lat (RK_ret[0], RK[0], LENH);
  DWC_D4MV_LATCH RK1_lat (RK_ret[1], RK[1], LENH);
  
`ifdef DWC_DDRPHY_ATPG_MODEL
   assign VREF_INT = (!RK_ret[1] && !RK_ret[0]) ? MVREF[0]: (!RK_ret[1] && RK_ret[0]) ? MVREF[1]: (RK_ret[1] && !RK_ret[0]) ? MVREF[2]: MVREF[3];
`else
   assign VREF_INT = (RK_ret==2'b00) ? MVREF[0]: (RK_ret==2'b01) ? MVREF[1]: (RK_ret==2'b10) ? MVREF[2]: MVREF[3];
`endif
  
 
  // modeled dependency of DISE on MVREF 
  //or (RCV_EN_SE, IOM[0], MVREFSE);
  or (RCV_EN_SE, IOM[0], VREF_INT);//
 bufif1 (PDRSE_DT_IOM, PDRSE_DT, RCV_EN_SE);

  //single ended receiver ---added by WM
 // input buffer (drives '0' when in power down)
  not (PDRSE_b, PDRSE);
  and (PDRSE_DT, PAD, PDRSE_b);
  
  buf (DISE, DISE_internal);

  // PAD is pulled down/up depending on DQSR[3] and whether the
  // pull-down/pull-up is enabled using DQSR[2:0]
  assign pad_pu = DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;
  assign pad_pd = ~DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;

  bufif1 (weak1, weak0) pad_pu_buf (PAD, 1'b1, pad_pu_ret);
  bufif1 (weak1, weak0) pad_pd_buf (PAD, 1'b0, pad_pd_ret);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

//Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check

  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 //added PAD-to-DISE and PDRSE-to-DISE delay arcs by WM
      (PAD => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET  => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DFO) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (SJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DOUT => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);


  endspecify
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PDIFFT_EW (PAD, OE, DOUT, DI, DQSR, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                          MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                          
                          POCH, ZIOH, LENH, DFI, DFO, PDRH18, MVREFSE, PDRSE, DISE, DID, RK);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input [3:0]   DQSR;     // pull-down/up resistor
  input [2:0]   IOM;      // I/O mode
  input [1:0]   SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input         DFI;      // differential input
  output        DFO;      // differential output
  input		PDRH18;
  input		MVREFSE;  // Special Vref for single ended receiver
  input		PDRSE;   // Power down single-ended receiver
  output	DISE;
  input  [1:0]  RK;
  output DID;

  wire          ZD_internal;    // internal output data - after OE's ZIOH check              
  wire          OD_internal;    // internal output data
  wire          ZE_internal;    // internal output enable - after ZIOH check
  wire          OE_internal;    // internal output enable
  wire          DI_internal;
  wire          DISE_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PAD_DFI;
  wire          pad_pu;
  wire          pad_pd;
  wire          POCH_internal;
  wire          POCH_internal_dly;
  wire          LENH_b;
  wire          PDRSE_DT_IOM;
  wire          PDR_DT_LH ;
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  wire          dfi_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire          pad_pu_ret;
  wire          pad_pd_ret;
  wire          DID_internal;
  wire  [1:0]   RK_ret;
  wire          VREF_INT;
  
  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[15:0] -  %b", ZIOH[15:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[31:16] -  %b", ZIOH[31:16]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[47:32] -  %b", ZIOH[47:32]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[63:48] -  %b", ZIOH[63:48]);
      end
    end

  // DI/DFO is valid if PAD and DFI have opposite polarity; otherwise constantly drives 0
  xor (dfi_valid, PAD, DFI);
  or  (dfi_iom, dfi_valid, IOM[0]);
`ifdef DWC_DDRPHY_ATPG_MODEL
  and (PAD_DFI, PAD, dfi_iom);
`else
  assign PAD_DFI = (dfi_iom === 1'bx) ? 1'bx : PAD;
`endif

  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));

  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal : PDR_DT_LH;
  //added loopback for DID
 assign DID_internal = LB ? OD_internal : DISE_internal;
 assign DISE_internal   = POCH_internal ? 1'b0 : PDRSE_DT_IOM ; 
 
 buf (DID, DID_internal);
 
   or (DI_DT_en, POCH_internal, LENH);
 assign PDR_DT_LH       = DI_DT_en ? 1'b0 : PDR_DT; 
   
  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);
  DWC_D4MV_LATCH PU_lat (pad_pu_ret, pad_pu, LENH);
  DWC_D4MV_LATCH PD_lat (pad_pd_ret, pad_pd, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD_DFI, PDR_b);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  buf (DI, DI_internal);
  and (DT, PDR_DT_LH, ET);

  buf (DFO, PAD);
  //added
  DWC_D4MV_LATCH RK0_lat (RK_ret[0], RK[0], LENH);
  DWC_D4MV_LATCH RK1_lat (RK_ret[1], RK[1], LENH);
  
`ifdef DWC_DDRPHY_ATPG_MODEL
   assign VREF_INT = (!RK_ret[1] && !RK_ret[0]) ? MVREF[0]: (!RK_ret[1] && RK_ret[0]) ? MVREF[1]: (RK_ret[1] && !RK_ret[0]) ? MVREF[2]: MVREF[3];
`else
   assign VREF_INT = (RK_ret==2'b00) ? MVREF[0]: (RK_ret==2'b01) ? MVREF[1]: (RK_ret==2'b10) ? MVREF[2]: MVREF[3];
`endif
  
 
  // modeled dependency of DISE on MVREF 
  //or (RCV_EN_SE, IOM[0], MVREFSE);
  or (RCV_EN_SE, IOM[0], VREF_INT);//
 bufif1 (PDRSE_DT_IOM, PDRSE_DT, RCV_EN_SE);

  //single ended receiver ---added by WM
 // input buffer (drives '0' when in power down)
  not (PDRSE_b, PDRSE);
  and (PDRSE_DT, PAD, PDRSE_b);
  
  buf (DISE, DISE_internal);

  // PAD is pulled down/up depending on DQSR[3] and whether the
  // pull-down/pull-up is enabled using DQSR[2:0]
  assign pad_pu = DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;
  assign pad_pd = ~DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;

  bufif1 (weak1, weak0) pad_pu_buf (PAD, 1'b1, pad_pu_ret);
  bufif1 (weak1, weak0) pad_pd_buf (PAD, 1'b0, pad_pd_ret);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

//Jing: add the following check for RK[1:0]

// width of invalid RK (ns) for which an error is driven out
  parameter     INVLD_RANK_WIDTH = 4;
 
  reg start_rank_check;
  initial start_rank_check = 0;
  always@(RK) begin 
    if (start_rank_check == 1'b0) begin
      start_rank_check <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end

// RK valid indicator.
  reg    rank_valid;
  reg    rank_valid_prev; // previous value of valid
  reg    rank_valid_check;
  
  // operation
  // ---------
  initial
    begin
      rank_valid       = 1'b1;
      rank_valid_prev  = 1'b1;
      rank_valid_check = 1'b1;
    end

// check if RK is being driven to a valid state
  always @(RK) begin
      case (RK[1:0])
        2'b00 	: rank_valid = 1'b1;
	2'b01 	: rank_valid = 1'b1;
	2'b10 	: rank_valid = 1'b1;
	2'b11 	: rank_valid = 1'b1;
	default : rank_valid = 1'b0;
      endcase
  end  
		  
  // Check if valid state window is too small
  always @(rank_valid) rank_valid_prev <= #(INVLD_RANK_WIDTH) rank_valid;
  always @(rank_valid or rank_valid_prev) rank_valid_check = rank_valid | rank_valid_prev;

  always @(rank_valid_check)
    begin
      if (start_rank_check == 1'b1) begin
        if (rank_valid_check === 1'b0) $display("ERROR: Incorrect value on RK[1:0] -  %b", RK[1:0]);
        
      end
    end
    
// Jing: end of check

  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 //added PAD-to-DISE and PDRSE-to-DISE delay arcs by WM
      (PAD => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET  => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DFO) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (SJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DOUT => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);


  endspecify
  
endmodule
`endcelldefine
  
// ----------------------------------------------------------------------------
// SSTL Differential Input Buffer
// ----------------------------------------------------------------------------
`celldefine
module DWC_D4MV_PDIFFC_NS (PAD, OE, DOUT, DI, DQSR, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                          MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                          
                          POCH, ZIOH, LENH, DFI, DFO, PDRH18, MVREFSE, PDRSE, DISE, DID, RK);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input [3:0]   DQSR;     // pull-down/up resistor
  input [2:0]   IOM;      // I/O mode
  input [1:0]   SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input         DFI;      // differential input
  output        DFO;      // differential output
  input		PDRH18;
  input		MVREFSE;  // Special Vref for single ended receiver
  input		PDRSE;   // Power down single-ended receiver
  output	DISE;
  output	DID;
  input  [1:0]  RK; 
              
  wire          ZD_internal;    // internal output data - after OE's ZIOH check              
  wire          OD_internal;    // internal output data
  wire          ZE_internal;    // internal output enable - after ZIOH check
  wire          OE_internal;    // internal output enable
  wire          DI_internal;
  wire          DISE_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PAD_DFI;
  wire          pad_pu;
  wire          pad_pd;
  wire          POCH_internal;
  wire          LENH_b;
  wire PDRSE_DT_IOM;
  wire PDR_DT_LH ; 
  
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  wire          dfi_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire          pad_pu_ret;
  wire          pad_pd_ret;
  wire          DID_internal;

  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[15:0] -  %b", ZIOH[15:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[31:16] -  %b", ZIOH[31:16]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[47:32] -  %b", ZIOH[47:32]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[63:48] -  %b", ZIOH[63:48]);
      end
    end

  // DI/DFO is valid if PAD and DFI have opposite polarity; otherwise constantly drives 0
  xor (dfi_valid, PAD, DFI);
  or  (dfi_iom, dfi_valid, IOM[0]);
`ifdef DWC_DDRPHY_ATPG_MODEL
  and (PAD_DFI, PAD, dfi_iom);
`else
  assign PAD_DFI = (dfi_iom === 1'bx) ? 1'bx : PAD;
`endif

  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));

  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal : PDR_DT_LH;
 //added loopback for DID
 assign DID_internal = LB ? OD_internal : DISE_internal; 
 assign DISE_internal   = POCH_internal ? 1'b0 : PDRSE_DT_IOM ;
 
	   or (DI_DT_en, POCH_internal, LENH);
   assign PDR_DT_LH       = DI_DT_en ? 1'b0 : PDR_DT;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);
  DWC_D4MV_LATCH PU_lat (pad_pu_ret, pad_pu, LENH);
  DWC_D4MV_LATCH PD_lat (pad_pd_ret, pad_pd, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD_DFI, PDR_b);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  buf (DI, DI_internal);
  buf (DID, DID_internal);
 and (DT, PDR_DT_LH, ET);

  buf (DFO, PAD);

  // modeled dependency of DISE on MVREFSE pin
  or (RCV_EN_SE, IOM[0], MVREFSE);
  bufif1 (PDRSE_DT_IOM, PDRSE_DT, RCV_EN_SE);

  //single ended receiver ---added by WM
 // input buffer (drives '0' when in power down)
  not (PDRSE_b, PDRSE);
  and (PDRSE_DT, PAD, PDRSE_b);
  
  buf (DISE, DISE_internal);

  // PAD is pulled down/up depending on DQSR[3] and whether the
  // pull-down/pull-up is enabled using DQSR[2:0]
  assign pad_pu = DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;
  assign pad_pd = ~DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;

  bufif1 (weak1, weak0) pad_pu_buf (PAD, 1'b1, pad_pu_ret);
  bufif1 (weak1, weak0) pad_pd_buf (PAD, 1'b0, pad_pd_ret);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 //added PAD-to-DISE and PDRSE-to-DISE delay arcs by WM
      (PAD => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET  => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DFO) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      if (LB == 1'b1) (SJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DOUT => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

  endspecify
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PDIFFC_EW (PAD, OE, DOUT, DI, DQSR, IOM, SR, PDR, LB, TE, DJ, ET, OJ, SJ, DT, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
                          MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif                          
                          POCH, ZIOH, LENH, DFI, DFO, PDRH18, MVREFSE, PDRSE, DISE, DID, RK);
  inout         PAD;      // bonding pad
  input         OE;       // output enable (active high)
  input         DOUT;     // data from core
  output        DI;       // data to core
  input [3:0]   DQSR;     // pull-down/up resistor
  input [2:0]   IOM;      // I/O mode
  input [1:0]   SR;       // Slew rate
//  input         PDD;      // power-down driver
  input         PDR;      // power-down receiver
  input         LB;       // loop-back select
  input         TE;       // on-die termination resistance
  input         DJ;       // JTAG "output/offchip data" input from core
  input         ET;       // JTAG enable from core
  input         OJ;       // JTAG "output/offchip enable" input from core
  input         SJ;       // JTAG select input
  output        DT;       // JTAG "input/onchip data" output to core
  input  [3:0]  MVREF;	  // IO Reference Voltage (treat as supply)
`ifdef DWC_DDRPHY_PG_PINS
  input         MVAA_PLL; // bonding pad and supply
  input         MVDDQ;	  // IO Ring Supply
  input         MVSSQ;	  // IO Ring Supply
  input         MVDD;	    // Core Supply
  input         MVSS;	    // Core Supply
`endif
  input         POCH;	    // Power-on clear high voltage
  input  [71:0] ZIOH;     // Impedance control input
  input         LENH;     // Latch enable high voltage
  input         DFI;      // differential input
  output        DFO;      // differential output
  input		PDRH18;
  input		MVREFSE;  // Special Vref for single ended receiver
  input		PDRSE;   // Power down single-ended receiver
  output	DISE;
  output	DID;
  input  [1:0]  RK; 
              
  wire          ZD_internal;    // internal output data - after OE's ZIOH check              
  wire          OD_internal;    // internal output data
  wire          ZE_internal;    // internal output enable - after ZIOH check
  wire          OE_internal;    // internal output enable
  wire          DI_internal;
  wire          DISE_internal;
  wire          PDR_b;
  wire          PDR_DT;
  wire          PAD_DFI;
  wire          pad_pu;
  wire          pad_pd;
  wire          POCH_internal;
  wire          LENH_b;
  wire PDRSE_DT_IOM;
  wire PDR_DT_LH ; 
  
  // ZIOH valid indicator. Each valid bit is a flag for 16 ZIOH bits.
  reg    [3:0]  zioh_valid;
  reg    [3:0]  zioh_valid_prev; // previous value of valid
  reg    [3:0]  zd_valid;
  wire          dfi_valid;
  
  wire		      ZD_internal_ret;
  wire 		      ZE_internal_ret;
  wire          pad_pu_ret;
  wire          pad_pd_ret;
  wire          DID_internal;

  // width of invalid ZIOH (ns) for which an error is driven out
  parameter     INVLD_WIDTH = 10;
  parameter     PREVENT_ERR_AT_START = 50000;
 
  reg gate_zioh_error;
  initial gate_zioh_error = 0;
  always@(ZIOH) begin 
    if (gate_zioh_error == 1'b0) begin
      gate_zioh_error <= #(PREVENT_ERR_AT_START) 1'b1;
    end
  end


  // operation
  // ---------
  initial
    begin
      zioh_valid      = {4{1'b1}};
      zioh_valid_prev = {4{1'b1}};
      zd_valid        = {4{1'b1}};
    end

  // small invalid windows are filtered out especially for gate-level simulations
  // where there might be slight delays for ZIOH driven by the two VREFs
  always @(zioh_valid) zioh_valid_prev <= #(INVLD_WIDTH) zioh_valid;
  always @(zioh_valid or zioh_valid_prev) zd_valid = zioh_valid | zioh_valid_prev;

  always @(zd_valid)
    begin
      if (gate_zioh_error == 1'b1) begin
        if (zd_valid[0] === 1'b0) $display("ERROR: Incorrect value on ZIOH[15:0] -  %b", ZIOH[15:0]);
        if (zd_valid[1] === 1'b0) $display("ERROR: Incorrect value on ZIOH[31:16] -  %b", ZIOH[31:16]);
        if (zd_valid[2] === 1'b0) $display("ERROR: Incorrect value on ZIOH[47:32] -  %b", ZIOH[47:32]);
        if (zd_valid[3] === 1'b0) $display("ERROR: Incorrect value on ZIOH[63:48] -  %b", ZIOH[63:48]);
      end
    end

  // DI/DFO is valid if PAD and DFI have opposite polarity; otherwise constantly drives 0
  xor (dfi_valid, PAD, DFI);
  or  (dfi_iom, dfi_valid, IOM[0]);
`ifdef DWC_DDRPHY_ATPG_MODEL
  and (PAD_DFI, PAD, dfi_iom);
`else
  assign PAD_DFI = (dfi_iom === 1'bx) ? 1'bx : PAD;
`endif

  // Data multiplexers - Only After the OE's ZIOH check
  assign ZD_internal = OD_internal & OE_internal & 
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));

  // Data multiplexers - ZIOH check & JTAG switch
  assign ZE_internal = OE_internal & ~POCH_internal &
                       ( ~gate_zioh_error | 
                       (ZIOH[35] | ZIOH[34] | ZIOH[33] | ZIOH[32] | ZIOH[31] | ZIOH[30] | ZIOH[29] | ZIOH[28] | ZIOH[27] |
                        ZIOH[26] | ZIOH[25] | ZIOH[24] | ZIOH[23] | ZIOH[22] | ZIOH[21] | ZIOH[20] | ZIOH[19] | ZIOH[18]) &
                       (ZIOH[17] | ZIOH[16] | ZIOH[15] | ZIOH[14] | ZIOH[13] | ZIOH[12] | ZIOH[11] | ZIOH[10] | ZIOH[9]  | 
                        ZIOH[8]  | ZIOH[7]  | ZIOH[6]  | ZIOH[5]  | ZIOH[4]  | ZIOH[3]  | ZIOH[2]  | ZIOH[1]  | ZIOH[0]));
  assign OD_internal = SJ ? DJ : DOUT;
  assign OE_internal = SJ ? OJ : OE;
  assign DI_internal = LB ? OD_internal : PDR_DT_LH;
 //added loopback for DID
 assign DID_internal = LB ? OD_internal : DISE_internal; 
 assign DISE_internal   = POCH_internal ? 1'b0 : PDRSE_DT_IOM ;
 
	   or (DI_DT_en, POCH_internal, LENH);
   assign PDR_DT_LH       = DI_DT_en ? 1'b0 : PDR_DT;

  DWC_D4MV_LATCH ZD_lat (ZD_internal_ret, ZD_internal, LENH);
  DWC_D4MV_LATCH ZE_lat (ZE_internal_ret, ZE_internal, LENH);
  DWC_D4MV_LATCH PU_lat (pad_pu_ret, pad_pu, LENH);
  DWC_D4MV_LATCH PD_lat (pad_pd_ret, pad_pd, LENH);

  bufif1 (PAD, ZD_internal_ret, ZE_internal_ret);

  // input buffer (drives '0' when in power down)
  not (PDR_b, PDR);
  and (PDR_DT, PAD_DFI, PDR_b);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  buf (DI, DI_internal);
  buf (DID, DID_internal);
 and (DT, PDR_DT_LH, ET);

  buf (DFO, PAD);

  // modeled dependency of DISE on MVREFSE pin
  or (RCV_EN_SE, IOM[0], MVREFSE);
  bufif1 (PDRSE_DT_IOM, PDRSE_DT, RCV_EN_SE);

  //single ended receiver ---added by WM
 // input buffer (drives '0' when in power down)
  not (PDRSE_b, PDRSE);
  and (PDRSE_DT, PAD, PDRSE_b);
  
  buf (DISE, DISE_internal);

  // PAD is pulled down/up depending on DQSR[3] and whether the
  // pull-down/pull-up is enabled using DQSR[2:0]
  assign pad_pu = DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;
  assign pad_pd = ~DQSR[3] & (DQSR[0] | DQSR[1] | DQSR[2]) & TE & ~POCH_internal & ~OE_internal;

  bufif1 (weak1, weak0) pad_pu_buf (PAD, 1'b1, pad_pu_ret);
  bufif1 (weak1, weak0) pad_pd_buf (PAD, 1'b0, pad_pd_ret);

  // check to see that ZIOH is being driven to a valid state
  always @(ZIOH) begin
      case (ZIOH[17:0])
          18'b000000000000000_001 : zioh_valid[0] = 1'b1;
          18'b000000000000000_010 : zioh_valid[0] = 1'b1;
          18'b000000000000000_011 : zioh_valid[0] = 1'b1;
          18'b000000000000000_100 : zioh_valid[0] = 1'b1;
          18'b000000000000000_101 : zioh_valid[0] = 1'b1;
          18'b000000000000000_110 : zioh_valid[0] = 1'b1;
          18'b000000000000000_111 : zioh_valid[0] = 1'b1;
          18'b000000000000001_000 : zioh_valid[0] = 1'b1;
          18'b000000000000001_001 : zioh_valid[0] = 1'b1;
          18'b000000000000001_010 : zioh_valid[0] = 1'b1;
          18'b000000000000001_011 : zioh_valid[0] = 1'b1;
          18'b000000000000001_100 : zioh_valid[0] = 1'b1;
          18'b000000000000001_101 : zioh_valid[0] = 1'b1;
          18'b000000000000001_110 : zioh_valid[0] = 1'b1;
          18'b000000000000001_111 : zioh_valid[0] = 1'b1;
          18'b000000000000011_000 : zioh_valid[0] = 1'b1;
          18'b000000000000011_001 : zioh_valid[0] = 1'b1;
          18'b000000000000011_010 : zioh_valid[0] = 1'b1;
          18'b000000000000011_011 : zioh_valid[0] = 1'b1;
          18'b000000000000011_100 : zioh_valid[0] = 1'b1;
          18'b000000000000011_101 : zioh_valid[0] = 1'b1;
          18'b000000000000011_110 : zioh_valid[0] = 1'b1;
          18'b000000000000011_111 : zioh_valid[0] = 1'b1;
          18'b000000000000111_000 : zioh_valid[0] = 1'b1;
          18'b000000000000111_001 : zioh_valid[0] = 1'b1;
          18'b000000000000111_010 : zioh_valid[0] = 1'b1;
          18'b000000000000111_011 : zioh_valid[0] = 1'b1;
          18'b000000000000111_100 : zioh_valid[0] = 1'b1;
          18'b000000000000111_101 : zioh_valid[0] = 1'b1;
          18'b000000000000111_110 : zioh_valid[0] = 1'b1;
          18'b000000000000111_111 : zioh_valid[0] = 1'b1;
          18'b000000000001111_000 : zioh_valid[0] = 1'b1;
          18'b000000000001111_001 : zioh_valid[0] = 1'b1;
          18'b000000000001111_010 : zioh_valid[0] = 1'b1;
          18'b000000000001111_011 : zioh_valid[0] = 1'b1;
          18'b000000000001111_100 : zioh_valid[0] = 1'b1;
          18'b000000000001111_101 : zioh_valid[0] = 1'b1;
          18'b000000000001111_110 : zioh_valid[0] = 1'b1;
          18'b000000000001111_111 : zioh_valid[0] = 1'b1;
          18'b000000000011111_000 : zioh_valid[0] = 1'b1;
          18'b000000000011111_001 : zioh_valid[0] = 1'b1;
          18'b000000000011111_010 : zioh_valid[0] = 1'b1;
          18'b000000000011111_011 : zioh_valid[0] = 1'b1;
          18'b000000000011111_100 : zioh_valid[0] = 1'b1;
          18'b000000000011111_101 : zioh_valid[0] = 1'b1;
          18'b000000000011111_110 : zioh_valid[0] = 1'b1;
          18'b000000000011111_111 : zioh_valid[0] = 1'b1;
          18'b000000000111111_000 : zioh_valid[0] = 1'b1;
          18'b000000000111111_001 : zioh_valid[0] = 1'b1;
          18'b000000000111111_010 : zioh_valid[0] = 1'b1;
          18'b000000000111111_011 : zioh_valid[0] = 1'b1;
          18'b000000000111111_100 : zioh_valid[0] = 1'b1;
          18'b000000000111111_101 : zioh_valid[0] = 1'b1;
          18'b000000000111111_110 : zioh_valid[0] = 1'b1;
          18'b000000000111111_111 : zioh_valid[0] = 1'b1;
          18'b000000001111111_000 : zioh_valid[0] = 1'b1;
          18'b000000001111111_001 : zioh_valid[0] = 1'b1;
          18'b000000001111111_010 : zioh_valid[0] = 1'b1;
          18'b000000001111111_011 : zioh_valid[0] = 1'b1;
          18'b000000001111111_100 : zioh_valid[0] = 1'b1;
          18'b000000001111111_101 : zioh_valid[0] = 1'b1;
          18'b000000001111111_110 : zioh_valid[0] = 1'b1;
          18'b000000001111111_111 : zioh_valid[0] = 1'b1;
          18'b000000011111111_000 : zioh_valid[0] = 1'b1;
          18'b000000011111111_001 : zioh_valid[0] = 1'b1;
          18'b000000011111111_010 : zioh_valid[0] = 1'b1;
          18'b000000011111111_011 : zioh_valid[0] = 1'b1;
          18'b000000011111111_100 : zioh_valid[0] = 1'b1;
          18'b000000011111111_101 : zioh_valid[0] = 1'b1;
          18'b000000011111111_110 : zioh_valid[0] = 1'b1;
          18'b000000011111111_111 : zioh_valid[0] = 1'b1;
          18'b000000111111111_000 : zioh_valid[0] = 1'b1;
          18'b000000111111111_001 : zioh_valid[0] = 1'b1;
          18'b000000111111111_010 : zioh_valid[0] = 1'b1;
          18'b000000111111111_011 : zioh_valid[0] = 1'b1;
          18'b000000111111111_100 : zioh_valid[0] = 1'b1;
          18'b000000111111111_101 : zioh_valid[0] = 1'b1;
          18'b000000111111111_110 : zioh_valid[0] = 1'b1;
          18'b000000111111111_111 : zioh_valid[0] = 1'b1;
          18'b000001111111111_000 : zioh_valid[0] = 1'b1;
          18'b000001111111111_001 : zioh_valid[0] = 1'b1;
          18'b000001111111111_010 : zioh_valid[0] = 1'b1;
          18'b000001111111111_011 : zioh_valid[0] = 1'b1;
          18'b000001111111111_100 : zioh_valid[0] = 1'b1;
          18'b000001111111111_101 : zioh_valid[0] = 1'b1;
          18'b000001111111111_110 : zioh_valid[0] = 1'b1;
          18'b000001111111111_111 : zioh_valid[0] = 1'b1;
          18'b000011111111111_000 : zioh_valid[0] = 1'b1;
          18'b000011111111111_001 : zioh_valid[0] = 1'b1;
          18'b000011111111111_010 : zioh_valid[0] = 1'b1;
          18'b000011111111111_011 : zioh_valid[0] = 1'b1;
          18'b000011111111111_100 : zioh_valid[0] = 1'b1;
          18'b000011111111111_101 : zioh_valid[0] = 1'b1;
          18'b000011111111111_110 : zioh_valid[0] = 1'b1;
          18'b000011111111111_111 : zioh_valid[0] = 1'b1;
          18'b000111111111111_000 : zioh_valid[0] = 1'b1;
          18'b000111111111111_001 : zioh_valid[0] = 1'b1;
          18'b000111111111111_010 : zioh_valid[0] = 1'b1;
          18'b000111111111111_011 : zioh_valid[0] = 1'b1;
          18'b000111111111111_100 : zioh_valid[0] = 1'b1;
          18'b000111111111111_101 : zioh_valid[0] = 1'b1;
          18'b000111111111111_110 : zioh_valid[0] = 1'b1;
          18'b000111111111111_111 : zioh_valid[0] = 1'b1;
          18'b001111111111111_000 : zioh_valid[0] = 1'b1;
          18'b001111111111111_001 : zioh_valid[0] = 1'b1;
          18'b001111111111111_010 : zioh_valid[0] = 1'b1;
          18'b001111111111111_011 : zioh_valid[0] = 1'b1;
          18'b001111111111111_100 : zioh_valid[0] = 1'b1;
          18'b001111111111111_101 : zioh_valid[0] = 1'b1;
          18'b001111111111111_110 : zioh_valid[0] = 1'b1;
          18'b001111111111111_111 : zioh_valid[0] = 1'b1;
          18'b011111111111111_000 : zioh_valid[0] = 1'b1;
          18'b011111111111111_001 : zioh_valid[0] = 1'b1;
          18'b011111111111111_010 : zioh_valid[0] = 1'b1;
          18'b011111111111111_011 : zioh_valid[0] = 1'b1;
          18'b011111111111111_100 : zioh_valid[0] = 1'b1;
          18'b011111111111111_101 : zioh_valid[0] = 1'b1;
          18'b011111111111111_110 : zioh_valid[0] = 1'b1;
          18'b011111111111111_111 : zioh_valid[0] = 1'b1;
          18'b111111111111111_000 : zioh_valid[0] = 1'b1;
          18'b111111111111111_001 : zioh_valid[0] = 1'b1;
          18'b111111111111111_010 : zioh_valid[0] = 1'b1;
          18'b111111111111111_011 : zioh_valid[0] = 1'b1;
          18'b111111111111111_100 : zioh_valid[0] = 1'b1;
          18'b111111111111111_101 : zioh_valid[0] = 1'b1;
          18'b111111111111111_110 : zioh_valid[0] = 1'b1;
          18'b111111111111111_111 : zioh_valid[0] = 1'b1;
          default                 : zioh_valid[0] = 1'b0;
      endcase

      case (ZIOH[35:18])
          18'b000000000000000_001 : zioh_valid[1] = 1'b1;
          18'b000000000000000_010 : zioh_valid[1] = 1'b1;
          18'b000000000000000_011 : zioh_valid[1] = 1'b1;
          18'b000000000000000_100 : zioh_valid[1] = 1'b1;
          18'b000000000000000_101 : zioh_valid[1] = 1'b1;
          18'b000000000000000_110 : zioh_valid[1] = 1'b1;
          18'b000000000000000_111 : zioh_valid[1] = 1'b1;
          18'b000000000000001_000 : zioh_valid[1] = 1'b1;
          18'b000000000000001_001 : zioh_valid[1] = 1'b1;
          18'b000000000000001_010 : zioh_valid[1] = 1'b1;
          18'b000000000000001_011 : zioh_valid[1] = 1'b1;
          18'b000000000000001_100 : zioh_valid[1] = 1'b1;
          18'b000000000000001_101 : zioh_valid[1] = 1'b1;
          18'b000000000000001_110 : zioh_valid[1] = 1'b1;
          18'b000000000000001_111 : zioh_valid[1] = 1'b1;
          18'b000000000000011_000 : zioh_valid[1] = 1'b1;
          18'b000000000000011_001 : zioh_valid[1] = 1'b1;
          18'b000000000000011_010 : zioh_valid[1] = 1'b1;
          18'b000000000000011_011 : zioh_valid[1] = 1'b1;
          18'b000000000000011_100 : zioh_valid[1] = 1'b1;
          18'b000000000000011_101 : zioh_valid[1] = 1'b1;
          18'b000000000000011_110 : zioh_valid[1] = 1'b1;
          18'b000000000000011_111 : zioh_valid[1] = 1'b1;
          18'b000000000000111_000 : zioh_valid[1] = 1'b1;
          18'b000000000000111_001 : zioh_valid[1] = 1'b1;
          18'b000000000000111_010 : zioh_valid[1] = 1'b1;
          18'b000000000000111_011 : zioh_valid[1] = 1'b1;
          18'b000000000000111_100 : zioh_valid[1] = 1'b1;
          18'b000000000000111_101 : zioh_valid[1] = 1'b1;
          18'b000000000000111_110 : zioh_valid[1] = 1'b1;
          18'b000000000000111_111 : zioh_valid[1] = 1'b1;
          18'b000000000001111_000 : zioh_valid[1] = 1'b1;
          18'b000000000001111_001 : zioh_valid[1] = 1'b1;
          18'b000000000001111_010 : zioh_valid[1] = 1'b1;
          18'b000000000001111_011 : zioh_valid[1] = 1'b1;
          18'b000000000001111_100 : zioh_valid[1] = 1'b1;
          18'b000000000001111_101 : zioh_valid[1] = 1'b1;
          18'b000000000001111_110 : zioh_valid[1] = 1'b1;
          18'b000000000001111_111 : zioh_valid[1] = 1'b1;
          18'b000000000011111_000 : zioh_valid[1] = 1'b1;
          18'b000000000011111_001 : zioh_valid[1] = 1'b1;
          18'b000000000011111_010 : zioh_valid[1] = 1'b1;
          18'b000000000011111_011 : zioh_valid[1] = 1'b1;
          18'b000000000011111_100 : zioh_valid[1] = 1'b1;
          18'b000000000011111_101 : zioh_valid[1] = 1'b1;
          18'b000000000011111_110 : zioh_valid[1] = 1'b1;
          18'b000000000011111_111 : zioh_valid[1] = 1'b1;
          18'b000000000111111_000 : zioh_valid[1] = 1'b1;
          18'b000000000111111_001 : zioh_valid[1] = 1'b1;
          18'b000000000111111_010 : zioh_valid[1] = 1'b1;
          18'b000000000111111_011 : zioh_valid[1] = 1'b1;
          18'b000000000111111_100 : zioh_valid[1] = 1'b1;
          18'b000000000111111_101 : zioh_valid[1] = 1'b1;
          18'b000000000111111_110 : zioh_valid[1] = 1'b1;
          18'b000000000111111_111 : zioh_valid[1] = 1'b1;
          18'b000000001111111_000 : zioh_valid[1] = 1'b1;
          18'b000000001111111_001 : zioh_valid[1] = 1'b1;
          18'b000000001111111_010 : zioh_valid[1] = 1'b1;
          18'b000000001111111_011 : zioh_valid[1] = 1'b1;
          18'b000000001111111_100 : zioh_valid[1] = 1'b1;
          18'b000000001111111_101 : zioh_valid[1] = 1'b1;
          18'b000000001111111_110 : zioh_valid[1] = 1'b1;
          18'b000000001111111_111 : zioh_valid[1] = 1'b1;
          18'b000000011111111_000 : zioh_valid[1] = 1'b1;
          18'b000000011111111_001 : zioh_valid[1] = 1'b1;
          18'b000000011111111_010 : zioh_valid[1] = 1'b1;
          18'b000000011111111_011 : zioh_valid[1] = 1'b1;
          18'b000000011111111_100 : zioh_valid[1] = 1'b1;
          18'b000000011111111_101 : zioh_valid[1] = 1'b1;
          18'b000000011111111_110 : zioh_valid[1] = 1'b1;
          18'b000000011111111_111 : zioh_valid[1] = 1'b1;
          18'b000000111111111_000 : zioh_valid[1] = 1'b1;
          18'b000000111111111_001 : zioh_valid[1] = 1'b1;
          18'b000000111111111_010 : zioh_valid[1] = 1'b1;
          18'b000000111111111_011 : zioh_valid[1] = 1'b1;
          18'b000000111111111_100 : zioh_valid[1] = 1'b1;
          18'b000000111111111_101 : zioh_valid[1] = 1'b1;
          18'b000000111111111_110 : zioh_valid[1] = 1'b1;
          18'b000000111111111_111 : zioh_valid[1] = 1'b1;
          18'b000001111111111_000 : zioh_valid[1] = 1'b1;
          18'b000001111111111_001 : zioh_valid[1] = 1'b1;
          18'b000001111111111_010 : zioh_valid[1] = 1'b1;
          18'b000001111111111_011 : zioh_valid[1] = 1'b1;
          18'b000001111111111_100 : zioh_valid[1] = 1'b1;
          18'b000001111111111_101 : zioh_valid[1] = 1'b1;
          18'b000001111111111_110 : zioh_valid[1] = 1'b1;
          18'b000001111111111_111 : zioh_valid[1] = 1'b1;
          18'b000011111111111_000 : zioh_valid[1] = 1'b1;
          18'b000011111111111_001 : zioh_valid[1] = 1'b1;
          18'b000011111111111_010 : zioh_valid[1] = 1'b1;
          18'b000011111111111_011 : zioh_valid[1] = 1'b1;
          18'b000011111111111_100 : zioh_valid[1] = 1'b1;
          18'b000011111111111_101 : zioh_valid[1] = 1'b1;
          18'b000011111111111_110 : zioh_valid[1] = 1'b1;
          18'b000011111111111_111 : zioh_valid[1] = 1'b1;
          18'b000111111111111_000 : zioh_valid[1] = 1'b1;
          18'b000111111111111_001 : zioh_valid[1] = 1'b1;
          18'b000111111111111_010 : zioh_valid[1] = 1'b1;
          18'b000111111111111_011 : zioh_valid[1] = 1'b1;
          18'b000111111111111_100 : zioh_valid[1] = 1'b1;
          18'b000111111111111_101 : zioh_valid[1] = 1'b1;
          18'b000111111111111_110 : zioh_valid[1] = 1'b1;
          18'b000111111111111_111 : zioh_valid[1] = 1'b1;
          18'b001111111111111_000 : zioh_valid[1] = 1'b1;
          18'b001111111111111_001 : zioh_valid[1] = 1'b1;
          18'b001111111111111_010 : zioh_valid[1] = 1'b1;
          18'b001111111111111_011 : zioh_valid[1] = 1'b1;
          18'b001111111111111_100 : zioh_valid[1] = 1'b1;
          18'b001111111111111_101 : zioh_valid[1] = 1'b1;
          18'b001111111111111_110 : zioh_valid[1] = 1'b1;
          18'b001111111111111_111 : zioh_valid[1] = 1'b1;
          18'b011111111111111_000 : zioh_valid[1] = 1'b1;
          18'b011111111111111_001 : zioh_valid[1] = 1'b1;
          18'b011111111111111_010 : zioh_valid[1] = 1'b1;
          18'b011111111111111_011 : zioh_valid[1] = 1'b1;
          18'b011111111111111_100 : zioh_valid[1] = 1'b1;
          18'b011111111111111_101 : zioh_valid[1] = 1'b1;
          18'b011111111111111_110 : zioh_valid[1] = 1'b1;
          18'b011111111111111_111 : zioh_valid[1] = 1'b1;
          18'b111111111111111_000 : zioh_valid[1] = 1'b1;
          18'b111111111111111_001 : zioh_valid[1] = 1'b1;
          18'b111111111111111_010 : zioh_valid[1] = 1'b1;
          18'b111111111111111_011 : zioh_valid[1] = 1'b1;
          18'b111111111111111_100 : zioh_valid[1] = 1'b1;
          18'b111111111111111_101 : zioh_valid[1] = 1'b1;
          18'b111111111111111_110 : zioh_valid[1] = 1'b1;
          18'b111111111111111_111 : zioh_valid[1] = 1'b1;
          default                 : zioh_valid[1] = 1'b0;
      endcase

      case (ZIOH[53:36])
          18'b000000000000000_000 : zioh_valid[2] = 1'b1;
          18'b000000000000000_001 : zioh_valid[2] = 1'b1;
          18'b000000000000000_010 : zioh_valid[2] = 1'b1;
          18'b000000000000000_011 : zioh_valid[2] = 1'b1;
          18'b000000000000000_100 : zioh_valid[2] = 1'b1;
          18'b000000000000000_101 : zioh_valid[2] = 1'b1;
          18'b000000000000000_110 : zioh_valid[2] = 1'b1;
          18'b000000000000000_111 : zioh_valid[2] = 1'b1;
          18'b000000000000001_000 : zioh_valid[2] = 1'b1;
          18'b000000000000001_001 : zioh_valid[2] = 1'b1;
          18'b000000000000001_010 : zioh_valid[2] = 1'b1;
          18'b000000000000001_011 : zioh_valid[2] = 1'b1;
          18'b000000000000001_100 : zioh_valid[2] = 1'b1;
          18'b000000000000001_101 : zioh_valid[2] = 1'b1;
          18'b000000000000001_110 : zioh_valid[2] = 1'b1;
          18'b000000000000001_111 : zioh_valid[2] = 1'b1;
          18'b000000000000011_000 : zioh_valid[2] = 1'b1;
          18'b000000000000011_001 : zioh_valid[2] = 1'b1;
          18'b000000000000011_010 : zioh_valid[2] = 1'b1;
          18'b000000000000011_011 : zioh_valid[2] = 1'b1;
          18'b000000000000011_100 : zioh_valid[2] = 1'b1;
          18'b000000000000011_101 : zioh_valid[2] = 1'b1;
          18'b000000000000011_110 : zioh_valid[2] = 1'b1;
          18'b000000000000011_111 : zioh_valid[2] = 1'b1;
          18'b000000000000111_000 : zioh_valid[2] = 1'b1;
          18'b000000000000111_001 : zioh_valid[2] = 1'b1;
          18'b000000000000111_010 : zioh_valid[2] = 1'b1;
          18'b000000000000111_011 : zioh_valid[2] = 1'b1;
          18'b000000000000111_100 : zioh_valid[2] = 1'b1;
          18'b000000000000111_101 : zioh_valid[2] = 1'b1;
          18'b000000000000111_110 : zioh_valid[2] = 1'b1;
          18'b000000000000111_111 : zioh_valid[2] = 1'b1;
          18'b000000000001111_000 : zioh_valid[2] = 1'b1;
          18'b000000000001111_001 : zioh_valid[2] = 1'b1;
          18'b000000000001111_010 : zioh_valid[2] = 1'b1;
          18'b000000000001111_011 : zioh_valid[2] = 1'b1;
          18'b000000000001111_100 : zioh_valid[2] = 1'b1;
          18'b000000000001111_101 : zioh_valid[2] = 1'b1;
          18'b000000000001111_110 : zioh_valid[2] = 1'b1;
          18'b000000000001111_111 : zioh_valid[2] = 1'b1;
          18'b000000000011111_000 : zioh_valid[2] = 1'b1;
          18'b000000000011111_001 : zioh_valid[2] = 1'b1;
          18'b000000000011111_010 : zioh_valid[2] = 1'b1;
          18'b000000000011111_011 : zioh_valid[2] = 1'b1;
          18'b000000000011111_100 : zioh_valid[2] = 1'b1;
          18'b000000000011111_101 : zioh_valid[2] = 1'b1;
          18'b000000000011111_110 : zioh_valid[2] = 1'b1;
          18'b000000000011111_111 : zioh_valid[2] = 1'b1;
          18'b000000000111111_000 : zioh_valid[2] = 1'b1;
          18'b000000000111111_001 : zioh_valid[2] = 1'b1;
          18'b000000000111111_010 : zioh_valid[2] = 1'b1;
          18'b000000000111111_011 : zioh_valid[2] = 1'b1;
          18'b000000000111111_100 : zioh_valid[2] = 1'b1;
          18'b000000000111111_101 : zioh_valid[2] = 1'b1;
          18'b000000000111111_110 : zioh_valid[2] = 1'b1;
          18'b000000000111111_111 : zioh_valid[2] = 1'b1;
          18'b000000001111111_000 : zioh_valid[2] = 1'b1;
          18'b000000001111111_001 : zioh_valid[2] = 1'b1;
          18'b000000001111111_010 : zioh_valid[2] = 1'b1;
          18'b000000001111111_011 : zioh_valid[2] = 1'b1;
          18'b000000001111111_100 : zioh_valid[2] = 1'b1;
          18'b000000001111111_101 : zioh_valid[2] = 1'b1;
          18'b000000001111111_110 : zioh_valid[2] = 1'b1;
          18'b000000001111111_111 : zioh_valid[2] = 1'b1;
          18'b000000011111111_000 : zioh_valid[2] = 1'b1;
          18'b000000011111111_001 : zioh_valid[2] = 1'b1;
          18'b000000011111111_010 : zioh_valid[2] = 1'b1;
          18'b000000011111111_011 : zioh_valid[2] = 1'b1;
          18'b000000011111111_100 : zioh_valid[2] = 1'b1;
          18'b000000011111111_101 : zioh_valid[2] = 1'b1;
          18'b000000011111111_110 : zioh_valid[2] = 1'b1;
          18'b000000011111111_111 : zioh_valid[2] = 1'b1;
          18'b000000111111111_000 : zioh_valid[2] = 1'b1;
          18'b000000111111111_001 : zioh_valid[2] = 1'b1;
          18'b000000111111111_010 : zioh_valid[2] = 1'b1;
          18'b000000111111111_011 : zioh_valid[2] = 1'b1;
          18'b000000111111111_100 : zioh_valid[2] = 1'b1;
          18'b000000111111111_101 : zioh_valid[2] = 1'b1;
          18'b000000111111111_110 : zioh_valid[2] = 1'b1;
          18'b000000111111111_111 : zioh_valid[2] = 1'b1;
          18'b000001111111111_000 : zioh_valid[2] = 1'b1;
          18'b000001111111111_001 : zioh_valid[2] = 1'b1;
          18'b000001111111111_010 : zioh_valid[2] = 1'b1;
          18'b000001111111111_011 : zioh_valid[2] = 1'b1;
          18'b000001111111111_100 : zioh_valid[2] = 1'b1;
          18'b000001111111111_101 : zioh_valid[2] = 1'b1;
          18'b000001111111111_110 : zioh_valid[2] = 1'b1;
          18'b000001111111111_111 : zioh_valid[2] = 1'b1;
          18'b000011111111111_000 : zioh_valid[2] = 1'b1;
          18'b000011111111111_001 : zioh_valid[2] = 1'b1;
          18'b000011111111111_010 : zioh_valid[2] = 1'b1;
          18'b000011111111111_011 : zioh_valid[2] = 1'b1;
          18'b000011111111111_100 : zioh_valid[2] = 1'b1;
          18'b000011111111111_101 : zioh_valid[2] = 1'b1;
          18'b000011111111111_110 : zioh_valid[2] = 1'b1;
          18'b000011111111111_111 : zioh_valid[2] = 1'b1;
          18'b000111111111111_000 : zioh_valid[2] = 1'b1;
          18'b000111111111111_001 : zioh_valid[2] = 1'b1;
          18'b000111111111111_010 : zioh_valid[2] = 1'b1;
          18'b000111111111111_011 : zioh_valid[2] = 1'b1;
          18'b000111111111111_100 : zioh_valid[2] = 1'b1;
          18'b000111111111111_101 : zioh_valid[2] = 1'b1;
          18'b000111111111111_110 : zioh_valid[2] = 1'b1;
          18'b000111111111111_111 : zioh_valid[2] = 1'b1;
          18'b001111111111111_000 : zioh_valid[2] = 1'b1;
          18'b001111111111111_001 : zioh_valid[2] = 1'b1;
          18'b001111111111111_010 : zioh_valid[2] = 1'b1;
          18'b001111111111111_011 : zioh_valid[2] = 1'b1;
          18'b001111111111111_100 : zioh_valid[2] = 1'b1;
          18'b001111111111111_101 : zioh_valid[2] = 1'b1;
          18'b001111111111111_110 : zioh_valid[2] = 1'b1;
          18'b001111111111111_111 : zioh_valid[2] = 1'b1;
          18'b011111111111111_000 : zioh_valid[2] = 1'b1;
          18'b011111111111111_001 : zioh_valid[2] = 1'b1;
          18'b011111111111111_010 : zioh_valid[2] = 1'b1;
          18'b011111111111111_011 : zioh_valid[2] = 1'b1;
          18'b011111111111111_100 : zioh_valid[2] = 1'b1;
          18'b011111111111111_101 : zioh_valid[2] = 1'b1;
          18'b011111111111111_110 : zioh_valid[2] = 1'b1;
          18'b011111111111111_111 : zioh_valid[2] = 1'b1;
          18'b111111111111111_000 : zioh_valid[2] = 1'b1;
          18'b111111111111111_001 : zioh_valid[2] = 1'b1;
          18'b111111111111111_010 : zioh_valid[2] = 1'b1;
          18'b111111111111111_011 : zioh_valid[2] = 1'b1;
          18'b111111111111111_100 : zioh_valid[2] = 1'b1;
          18'b111111111111111_101 : zioh_valid[2] = 1'b1;
          18'b111111111111111_110 : zioh_valid[2] = 1'b1;
          18'b111111111111111_111 : zioh_valid[2] = 1'b1;
          default                 : zioh_valid[2] = 1'b0;
      endcase

      case (ZIOH[71:54])
          18'b000000000000000_000 : zioh_valid[3] = 1'b1;
          18'b000000000000000_001 : zioh_valid[3] = 1'b1;
          18'b000000000000000_010 : zioh_valid[3] = 1'b1;
          18'b000000000000000_011 : zioh_valid[3] = 1'b1;
          18'b000000000000000_100 : zioh_valid[3] = 1'b1;
          18'b000000000000000_101 : zioh_valid[3] = 1'b1;
          18'b000000000000000_110 : zioh_valid[3] = 1'b1;
          18'b000000000000000_111 : zioh_valid[3] = 1'b1;
          18'b000000000000001_000 : zioh_valid[3] = 1'b1;
          18'b000000000000001_001 : zioh_valid[3] = 1'b1;
          18'b000000000000001_010 : zioh_valid[3] = 1'b1;
          18'b000000000000001_011 : zioh_valid[3] = 1'b1;
          18'b000000000000001_100 : zioh_valid[3] = 1'b1;
          18'b000000000000001_101 : zioh_valid[3] = 1'b1;
          18'b000000000000001_110 : zioh_valid[3] = 1'b1;
          18'b000000000000001_111 : zioh_valid[3] = 1'b1;
          18'b000000000000011_000 : zioh_valid[3] = 1'b1;
          18'b000000000000011_001 : zioh_valid[3] = 1'b1;
          18'b000000000000011_010 : zioh_valid[3] = 1'b1;
          18'b000000000000011_011 : zioh_valid[3] = 1'b1;
          18'b000000000000011_100 : zioh_valid[3] = 1'b1;
          18'b000000000000011_101 : zioh_valid[3] = 1'b1;
          18'b000000000000011_110 : zioh_valid[3] = 1'b1;
          18'b000000000000011_111 : zioh_valid[3] = 1'b1;
          18'b000000000000111_000 : zioh_valid[3] = 1'b1;
          18'b000000000000111_001 : zioh_valid[3] = 1'b1;
          18'b000000000000111_010 : zioh_valid[3] = 1'b1;
          18'b000000000000111_011 : zioh_valid[3] = 1'b1;
          18'b000000000000111_100 : zioh_valid[3] = 1'b1;
          18'b000000000000111_101 : zioh_valid[3] = 1'b1;
          18'b000000000000111_110 : zioh_valid[3] = 1'b1;
          18'b000000000000111_111 : zioh_valid[3] = 1'b1;
          18'b000000000001111_000 : zioh_valid[3] = 1'b1;
          18'b000000000001111_001 : zioh_valid[3] = 1'b1;
          18'b000000000001111_010 : zioh_valid[3] = 1'b1;
          18'b000000000001111_011 : zioh_valid[3] = 1'b1;
          18'b000000000001111_100 : zioh_valid[3] = 1'b1;
          18'b000000000001111_101 : zioh_valid[3] = 1'b1;
          18'b000000000001111_110 : zioh_valid[3] = 1'b1;
          18'b000000000001111_111 : zioh_valid[3] = 1'b1;
          18'b000000000011111_000 : zioh_valid[3] = 1'b1;
          18'b000000000011111_001 : zioh_valid[3] = 1'b1;
          18'b000000000011111_010 : zioh_valid[3] = 1'b1;
          18'b000000000011111_011 : zioh_valid[3] = 1'b1;
          18'b000000000011111_100 : zioh_valid[3] = 1'b1;
          18'b000000000011111_101 : zioh_valid[3] = 1'b1;
          18'b000000000011111_110 : zioh_valid[3] = 1'b1;
          18'b000000000011111_111 : zioh_valid[3] = 1'b1;
          18'b000000000111111_000 : zioh_valid[3] = 1'b1;
          18'b000000000111111_001 : zioh_valid[3] = 1'b1;
          18'b000000000111111_010 : zioh_valid[3] = 1'b1;
          18'b000000000111111_011 : zioh_valid[3] = 1'b1;
          18'b000000000111111_100 : zioh_valid[3] = 1'b1;
          18'b000000000111111_101 : zioh_valid[3] = 1'b1;
          18'b000000000111111_110 : zioh_valid[3] = 1'b1;
          18'b000000000111111_111 : zioh_valid[3] = 1'b1;
          18'b000000001111111_000 : zioh_valid[3] = 1'b1;
          18'b000000001111111_001 : zioh_valid[3] = 1'b1;
          18'b000000001111111_010 : zioh_valid[3] = 1'b1;
          18'b000000001111111_011 : zioh_valid[3] = 1'b1;
          18'b000000001111111_100 : zioh_valid[3] = 1'b1;
          18'b000000001111111_101 : zioh_valid[3] = 1'b1;
          18'b000000001111111_110 : zioh_valid[3] = 1'b1;
          18'b000000001111111_111 : zioh_valid[3] = 1'b1;
          18'b000000011111111_000 : zioh_valid[3] = 1'b1;
          18'b000000011111111_001 : zioh_valid[3] = 1'b1;
          18'b000000011111111_010 : zioh_valid[3] = 1'b1;
          18'b000000011111111_011 : zioh_valid[3] = 1'b1;
          18'b000000011111111_100 : zioh_valid[3] = 1'b1;
          18'b000000011111111_101 : zioh_valid[3] = 1'b1;
          18'b000000011111111_110 : zioh_valid[3] = 1'b1;
          18'b000000011111111_111 : zioh_valid[3] = 1'b1;
          18'b000000111111111_000 : zioh_valid[3] = 1'b1;
          18'b000000111111111_001 : zioh_valid[3] = 1'b1;
          18'b000000111111111_010 : zioh_valid[3] = 1'b1;
          18'b000000111111111_011 : zioh_valid[3] = 1'b1;
          18'b000000111111111_100 : zioh_valid[3] = 1'b1;
          18'b000000111111111_101 : zioh_valid[3] = 1'b1;
          18'b000000111111111_110 : zioh_valid[3] = 1'b1;
          18'b000000111111111_111 : zioh_valid[3] = 1'b1;
          18'b000001111111111_000 : zioh_valid[3] = 1'b1;
          18'b000001111111111_001 : zioh_valid[3] = 1'b1;
          18'b000001111111111_010 : zioh_valid[3] = 1'b1;
          18'b000001111111111_011 : zioh_valid[3] = 1'b1;
          18'b000001111111111_100 : zioh_valid[3] = 1'b1;
          18'b000001111111111_101 : zioh_valid[3] = 1'b1;
          18'b000001111111111_110 : zioh_valid[3] = 1'b1;
          18'b000001111111111_111 : zioh_valid[3] = 1'b1;
          18'b000011111111111_000 : zioh_valid[3] = 1'b1;
          18'b000011111111111_001 : zioh_valid[3] = 1'b1;
          18'b000011111111111_010 : zioh_valid[3] = 1'b1;
          18'b000011111111111_011 : zioh_valid[3] = 1'b1;
          18'b000011111111111_100 : zioh_valid[3] = 1'b1;
          18'b000011111111111_101 : zioh_valid[3] = 1'b1;
          18'b000011111111111_110 : zioh_valid[3] = 1'b1;
          18'b000011111111111_111 : zioh_valid[3] = 1'b1;
          18'b000111111111111_000 : zioh_valid[3] = 1'b1;
          18'b000111111111111_001 : zioh_valid[3] = 1'b1;
          18'b000111111111111_010 : zioh_valid[3] = 1'b1;
          18'b000111111111111_011 : zioh_valid[3] = 1'b1;
          18'b000111111111111_100 : zioh_valid[3] = 1'b1;
          18'b000111111111111_101 : zioh_valid[3] = 1'b1;
          18'b000111111111111_110 : zioh_valid[3] = 1'b1;
          18'b000111111111111_111 : zioh_valid[3] = 1'b1;
          18'b001111111111111_000 : zioh_valid[3] = 1'b1;
          18'b001111111111111_001 : zioh_valid[3] = 1'b1;
          18'b001111111111111_010 : zioh_valid[3] = 1'b1;
          18'b001111111111111_011 : zioh_valid[3] = 1'b1;
          18'b001111111111111_100 : zioh_valid[3] = 1'b1;
          18'b001111111111111_101 : zioh_valid[3] = 1'b1;
          18'b001111111111111_110 : zioh_valid[3] = 1'b1;
          18'b001111111111111_111 : zioh_valid[3] = 1'b1;
          18'b011111111111111_000 : zioh_valid[3] = 1'b1;
          18'b011111111111111_001 : zioh_valid[3] = 1'b1;
          18'b011111111111111_010 : zioh_valid[3] = 1'b1;
          18'b011111111111111_011 : zioh_valid[3] = 1'b1;
          18'b011111111111111_100 : zioh_valid[3] = 1'b1;
          18'b011111111111111_101 : zioh_valid[3] = 1'b1;
          18'b011111111111111_110 : zioh_valid[3] = 1'b1;
          18'b011111111111111_111 : zioh_valid[3] = 1'b1;
          18'b111111111111111_000 : zioh_valid[3] = 1'b1;
          18'b111111111111111_001 : zioh_valid[3] = 1'b1;
          18'b111111111111111_010 : zioh_valid[3] = 1'b1;
          18'b111111111111111_011 : zioh_valid[3] = 1'b1;
          18'b111111111111111_100 : zioh_valid[3] = 1'b1;
          18'b111111111111111_101 : zioh_valid[3] = 1'b1;
          18'b111111111111111_110 : zioh_valid[3] = 1'b1;
          18'b111111111111111_111 : zioh_valid[3] = 1'b1;
          default                 : zioh_valid[3] = 1'b0;
      endcase
  end

  
  // timing
  // ------
  specify
      specparam PATHPULSE$ = 0;

//      if (IOM == 1'b0) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if (IOM == 1'b0) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b0) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if (IOM == 1'b1) (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b0) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b0)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b0) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
//      if ((PDD == 1'b1) && (SR[1] == 1'b1) && (SR[0] == 1'b1)) (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PDR => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDR => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 //added PAD-to-DISE and PDRSE-to-DISE delay arcs by WM
      (PAD => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DISE)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      (DOUT => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OE => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (DJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (OJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (SJ => PAD)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if (LB == 1'b1) (DOUT => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (SJ => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DI)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ET  => DT)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DFO) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      if (LB == 1'b1) (SJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DOUT => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if (LB == 1'b1) (DJ => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PDRSE => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (LB  => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => DID)  = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

  endspecify
  
endmodule
`endcelldefine


// ------------------------------
// power I/O used for PLL 2.5v supply
// ------------------------------
`celldefine
module DWC_D4MV_PVAA18_NS (MVAA18,
`ifdef DWC_DDRPHY_PG_PINS  
   MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif   
   MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
  inout 	    MVAA18; // bonding pad and supply
  input   [3:0]     MVREF;	    //Jing: add [3:0]  
`ifdef DWC_DDRPHY_PG_PINS  
  input             MVAA_PLL;       
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVAA18_EW (MVAA18,
`ifdef DWC_DDRPHY_PG_PINS  
   MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif   
   MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
  inout 	    MVAA18; // bonding pad and supply
  input   [3:0]     MVREF;	    //Jing: add [3:0]  
`ifdef DWC_DDRPHY_PG_PINS  
  input             MVAA_PLL;       
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVAA_PLL_NS (MVREF,
`ifdef DWC_DDRPHY_PG_PINS
        MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif         
         POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVAA_PLL_EW (MVREF,
`ifdef DWC_DDRPHY_PG_PINS
        MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif         
         POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

// ------------------------------
// power I/O used for DLL 1.2v supply
// ------------------------------
`celldefine
module DWC_D4MV_PVAA_NS (MVAA,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif 
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
  inout             MVAA;           // bonding pad and supply
`ifdef DWC_DDRPHY_PG_PINS  
  input             MVAA_PLL; // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

// ------------------------------
// power I/O used for DLL 1.2v supply
// ------------------------------
`celldefine
module DWC_D4MV_PVAA_EW (MVAA,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif 
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
  inout             MVAA;           // bonding pad and supply
`ifdef DWC_DDRPHY_PG_PINS  
  input             MVAA_PLL; // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine


// ------------------------------
// analog I/O
// analog IO buffer for monitoring DLL analog signals; 
// ------------------------------
`celldefine
module DWC_D4MV_PAIO_NS (PAD, AT, AE,
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS, 
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
  inout             PAD;            // bonding pad  
  inout             AT;             // analog test port
  input             AE;             // analog test port enable
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  
  wire at_ret;
  wire ae_ret;

  DWC_D4MV_LATCH AE_lat (ae_ret, AE, LENH);
   
  bufif1 (PAD, AT, ae_ret);

  // Setup/Hold on LENH - Uncomment if using the commented out .lib file arcs
  //specify
      //$setuphold (posedge LENH, AE, 0.0, 0.0,,,,,);
  //endspecify
endmodule
`endcelldefine


// ------------------------------
// analog I/O
// analog IO buffer for monitoring DLL analog signals; 
// ------------------------------
`celldefine
module DWC_D4MV_PAIO_EW (PAD, AT, AE,
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS, 
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
  inout             PAD;            // bonding pad  
  inout             AT;             // analog test port
  input             AE;             // analog test port enable
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  
  wire at_ret;
  wire ae_ret;

  DWC_D4MV_LATCH AE_lat (ae_ret, AE, LENH);
   
  bufif1 (PAD, AT, ae_ret);

  // Setup/Hold on LENH - Uncomment if using the commented out .lib file arcs
  //specify
      //$setuphold (posedge LENH, AE, 0.0, 0.0,,,,,);
  //endspecify
endmodule
`endcelldefine

  
// ------------------------------
// power/ground supply cells
// core logic 1.2V or 1.0V supply
// ------------------------------
`celldefine
module DWC_D4MV_PVDD_ESD_NS (
`ifdef DWC_DDRPHY_PG_PINS       
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS, 
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS       
  inout             MVDD;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]  
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine


// ------------------------------
// power/ground supply cells
// core logic 1.2V or 1.0V supply
// ------------------------------
`celldefine
module DWC_D4MV_PVDD_ESD_EW (
`ifdef DWC_DDRPHY_PG_PINS       
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS, 
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS       
  inout             MVDD;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]  
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine


// ------------------------------
// core logic 1.2V or 1.0V supply (capacitance only)
// ------------------------------
`celldefine
module DWC_D4MV_PVDD_CAP_NS (
`ifdef DWC_DDRPHY_PG_PINS        
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS  
  inout             MVDD;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVDD_CAP_EW (
`ifdef DWC_DDRPHY_PG_PINS        
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS  
  inout             MVDD;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

// ------------------------------
// core logic ground supply
// ------------------------------
`celldefine
module DWC_D4MV_PVSS_CAP_NS (
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVSS;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVSS_CAP_EW (
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVSS;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

 `celldefine
module DWC_D4MV_PVSS_ESD_NS (
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVSS;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVSS_ESD_EW (
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVSS;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine
 
// ------------------------------
// MVDDQ I/O supply
// ------------------------------
`celldefine
module DWC_D4MV_PVDDQ_ESD_NS (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVDDQ;
  input             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVDDQ_ESD_EW (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif      
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVDDQ;
  input             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine
`celldefine

module DWC_D4MV_PVDDQ_CAP_NS (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL,  MVDD, MVSS, 
`endif
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVDDQ;
  input             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVDDQ_CAP_EW (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL,  MVDD, MVSS, 
`endif
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  inout             MVDDQ;
  input             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine


// ------------------------------
// MVSSQ I/O ground supply
// ------------------------------
`celldefine
module DWC_D4MV_PVSSQ_NS (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVDDQ;
  inout             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVSSQ_EW (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVDDQ;
  inout             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine


// ------------------------------
// MVSSQ I/O ground supply with ZIOH bus break
// ------------------------------
`celldefine
module DWC_D4MV_PVSSZB_NS (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif      
       MVREF, POCH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVDDQ;
  inout             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	        // Power-on clear high voltage
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVSSZB_EW (
`ifdef DWC_DDRPHY_PG_PINS 
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif      
       MVREF, POCH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVDDQ;
  inout             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]
  input             POCH;	        // Power-on clear high voltage
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine


// ------------------------------
// MVSSQ I/O ground supply with ZIOH bus break and VREF break
// ------------------------------
`celldefine
module DWC_D4MV_PVSSZB_ZQ_NS (
`ifdef DWC_DDRPHY_PG_PINS
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif
POCH, LENH);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVDDQ;
  inout             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input             POCH;	        // Power-on clear high voltage
  input             LENH;           // Latch enable high voltage
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PVSSZB_ZQ_EW (
`ifdef DWC_DDRPHY_PG_PINS
      MVDDQ, MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif
POCH, LENH);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVDDQ;
  inout             MVSSQ;
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input             POCH;	        // Power-on clear high voltage
  input             LENH;           // Latch enable high voltage
endmodule
`endcelldefine


// ------------------------------
// SSTL reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PVREF_NS (PAD,MVREF,
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZCTRL, ZIOH, LENH, REFEN, REFSEL, PDRH18, MVREFSE, ENPAD, REFENSE, REFSELSE, VRMON); //Jing: add VRMON
  inout             PAD;	  
`ifdef DWC_DDRPHY_PG_PINS     
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  inout [3:0]       MVREF;	    //Jing: add [3:0], change to inout
  input             REFEN;          // Enable internal VREF generator 
  input  [5:0]      REFSEL;         // Select generated VREF value
  input             POCH;	          // Power-on clear high voltage
  input  [27:0]     ZCTRL;
  output [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  output		PDRH18;
  output		MVREFSE; // Special Vref for single ended receiver
  input		ENPAD; // Enable pass gate between MVREF and PAD
  input		REFENSE; // Enable reference generator for single ended comparator
  input [5:0]	REFSELSE; // Select reference value for single ended comparator
  input [1:0]       VRMON; //Jing: add VRMON[1:0], select MVREF[3:0] to PAD or vice versa


`ifdef DWC_DDRPHY_ATPG_MODEL
  wire   [17:0]     zioh_3;
  wire   [17:0]     zioh_2;
  wire   [17:0]     zioh_1;
  wire   [17:0]     zioh_0;
`else
  reg    [17:0]     zioh_3;
  reg    [17:0]     zioh_2;
  reg    [17:0]     zioh_1;
  reg    [17:0]     zioh_0;
`endif

  wire   [17:0]     zioh_3_ret;
  wire   [17:0]     zioh_2_ret;
  wire   [17:0]     zioh_1_ret;
  wire   [17:0]     zioh_0_ret; 
  
  wire ENPAD_ret;
  wire REFEN_ret;
  wire REFENSE_ret;
  wire   [1:0] VRMON_ret; 
  wire          POCH_internal;
  wire          LENH_b;
  wire 		PAD_internal; //internal pad signal

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  DWC_D4MV_LATCH Z_0_0_lat (zioh_0_ret[0], zioh_0[0], LENH);
  DWC_D4MV_LATCH Z_0_1_lat (zioh_0_ret[1], zioh_0[1], LENH);
  DWC_D4MV_LATCH Z_0_2_lat (zioh_0_ret[2], zioh_0[2], LENH);
  DWC_D4MV_LATCH Z_0_3_lat (zioh_0_ret[3], zioh_0[3], LENH);
  DWC_D4MV_LATCH Z_0_4_lat (zioh_0_ret[4], zioh_0[4], LENH);
  DWC_D4MV_LATCH Z_0_5_lat (zioh_0_ret[5], zioh_0[5], LENH);
  DWC_D4MV_LATCH Z_0_6_lat (zioh_0_ret[6], zioh_0[6], LENH);
  DWC_D4MV_LATCH Z_0_7_lat (zioh_0_ret[7], zioh_0[7], LENH);
  DWC_D4MV_LATCH Z_0_8_lat (zioh_0_ret[8], zioh_0[8], LENH);
  DWC_D4MV_LATCH Z_0_9_lat (zioh_0_ret[9], zioh_0[9], LENH);
  DWC_D4MV_LATCH Z_0_10_lat (zioh_0_ret[10], zioh_0[10], LENH);
  DWC_D4MV_LATCH Z_0_11_lat (zioh_0_ret[11], zioh_0[11], LENH);
  DWC_D4MV_LATCH Z_0_12_lat (zioh_0_ret[12], zioh_0[12], LENH);
  DWC_D4MV_LATCH Z_0_13_lat (zioh_0_ret[13], zioh_0[13], LENH);
  DWC_D4MV_LATCH Z_0_14_lat (zioh_0_ret[14], zioh_0[14], LENH);
  DWC_D4MV_LATCH Z_0_15_lat (zioh_0_ret[15], zioh_0[15], LENH);
  DWC_D4MV_LATCH Z_0_16_lat (zioh_0_ret[16], zioh_0[16], LENH);
  DWC_D4MV_LATCH Z_0_17_lat (zioh_0_ret[17], zioh_0[17], LENH);

  DWC_D4MV_LATCH Z_1_0_lat (zioh_1_ret[0], zioh_1[0], LENH);
  DWC_D4MV_LATCH Z_1_1_lat (zioh_1_ret[1], zioh_1[1], LENH);
  DWC_D4MV_LATCH Z_1_2_lat (zioh_1_ret[2], zioh_1[2], LENH);
  DWC_D4MV_LATCH Z_1_3_lat (zioh_1_ret[3], zioh_1[3], LENH);
  DWC_D4MV_LATCH Z_1_4_lat (zioh_1_ret[4], zioh_1[4], LENH);
  DWC_D4MV_LATCH Z_1_5_lat (zioh_1_ret[5], zioh_1[5], LENH);
  DWC_D4MV_LATCH Z_1_6_lat (zioh_1_ret[6], zioh_1[6], LENH);
  DWC_D4MV_LATCH Z_1_7_lat (zioh_1_ret[7], zioh_1[7], LENH);
  DWC_D4MV_LATCH Z_1_8_lat (zioh_1_ret[8], zioh_1[8], LENH);
  DWC_D4MV_LATCH Z_1_9_lat (zioh_1_ret[9], zioh_1[9], LENH);
  DWC_D4MV_LATCH Z_1_10_lat (zioh_1_ret[10], zioh_1[10], LENH);
  DWC_D4MV_LATCH Z_1_11_lat (zioh_1_ret[11], zioh_1[11], LENH);
  DWC_D4MV_LATCH Z_1_12_lat (zioh_1_ret[12], zioh_1[12], LENH);
  DWC_D4MV_LATCH Z_1_13_lat (zioh_1_ret[13], zioh_1[13], LENH);
  DWC_D4MV_LATCH Z_1_14_lat (zioh_1_ret[14], zioh_1[14], LENH);
  DWC_D4MV_LATCH Z_1_15_lat (zioh_1_ret[15], zioh_1[15], LENH);
  DWC_D4MV_LATCH Z_1_16_lat (zioh_1_ret[16], zioh_1[16], LENH);
  DWC_D4MV_LATCH Z_1_17_lat (zioh_1_ret[17], zioh_1[17], LENH);

  DWC_D4MV_LATCH Z_2_0_lat (zioh_2_ret[0], zioh_2[0], LENH);
  DWC_D4MV_LATCH Z_2_1_lat (zioh_2_ret[1], zioh_2[1], LENH);
  DWC_D4MV_LATCH Z_2_2_lat (zioh_2_ret[2], zioh_2[2], LENH);
  DWC_D4MV_LATCH Z_2_3_lat (zioh_2_ret[3], zioh_2[3], LENH);
  DWC_D4MV_LATCH Z_2_4_lat (zioh_2_ret[4], zioh_2[4], LENH);
  DWC_D4MV_LATCH Z_2_5_lat (zioh_2_ret[5], zioh_2[5], LENH);
  DWC_D4MV_LATCH Z_2_6_lat (zioh_2_ret[6], zioh_2[6], LENH);
  DWC_D4MV_LATCH Z_2_7_lat (zioh_2_ret[7], zioh_2[7], LENH);
  DWC_D4MV_LATCH Z_2_8_lat (zioh_2_ret[8], zioh_2[8], LENH);
  DWC_D4MV_LATCH Z_2_9_lat (zioh_2_ret[9], zioh_2[9], LENH);
  DWC_D4MV_LATCH Z_2_10_lat (zioh_2_ret[10], zioh_2[10], LENH);
  DWC_D4MV_LATCH Z_2_11_lat (zioh_2_ret[11], zioh_2[11], LENH);
  DWC_D4MV_LATCH Z_2_12_lat (zioh_2_ret[12], zioh_2[12], LENH);
  DWC_D4MV_LATCH Z_2_13_lat (zioh_2_ret[13], zioh_2[13], LENH);
  DWC_D4MV_LATCH Z_2_14_lat (zioh_2_ret[14], zioh_2[14], LENH);
  DWC_D4MV_LATCH Z_2_15_lat (zioh_2_ret[15], zioh_2[15], LENH);
  DWC_D4MV_LATCH Z_2_16_lat (zioh_2_ret[16], zioh_2[16], LENH);
  DWC_D4MV_LATCH Z_2_17_lat (zioh_2_ret[17], zioh_2[17], LENH);
  
  DWC_D4MV_LATCH Z_3_0_lat (zioh_3_ret[0], zioh_3[0], LENH);
  DWC_D4MV_LATCH Z_3_1_lat (zioh_3_ret[1], zioh_3[1], LENH);
  DWC_D4MV_LATCH Z_3_2_lat (zioh_3_ret[2], zioh_3[2], LENH);
  DWC_D4MV_LATCH Z_3_3_lat (zioh_3_ret[3], zioh_3[3], LENH);
  DWC_D4MV_LATCH Z_3_4_lat (zioh_3_ret[4], zioh_3[4], LENH);
  DWC_D4MV_LATCH Z_3_5_lat (zioh_3_ret[5], zioh_3[5], LENH);
  DWC_D4MV_LATCH Z_3_6_lat (zioh_3_ret[6], zioh_3[6], LENH);
  DWC_D4MV_LATCH Z_3_7_lat (zioh_3_ret[7], zioh_3[7], LENH);
  DWC_D4MV_LATCH Z_3_8_lat (zioh_3_ret[8], zioh_3[8], LENH);
  DWC_D4MV_LATCH Z_3_9_lat (zioh_3_ret[9], zioh_3[9], LENH);
  DWC_D4MV_LATCH Z_3_10_lat (zioh_3_ret[10], zioh_3[10], LENH);
  DWC_D4MV_LATCH Z_3_11_lat (zioh_3_ret[11], zioh_3[11], LENH);
  DWC_D4MV_LATCH Z_3_12_lat (zioh_3_ret[12], zioh_3[12], LENH);
  DWC_D4MV_LATCH Z_3_13_lat (zioh_3_ret[13], zioh_3[13], LENH);
  DWC_D4MV_LATCH Z_3_14_lat (zioh_3_ret[14], zioh_3[14], LENH);
  DWC_D4MV_LATCH Z_3_15_lat (zioh_3_ret[15], zioh_3[15], LENH);
  DWC_D4MV_LATCH Z_3_16_lat (zioh_3_ret[16], zioh_3[16], LENH);
  DWC_D4MV_LATCH Z_3_17_lat (zioh_3_ret[17], zioh_3[17], LENH);

  DWC_D4MV_LATCH ENPAD_lat (ENPAD_ret, ENPAD, LENH);
  DWC_D4MV_LATCH REFEN_lat (REFEN_ret, REFEN, LENH); 
  DWC_D4MV_LATCH REFENSE_lat (REFENSE_ret, REFENSE, LENH);
  
  DWC_D4MV_LATCH VRMON0_lat (VRMON_ret[0], VRMON[0], LENH);
  DWC_D4MV_LATCH VRMON1_lat (VRMON_ret[1], VRMON[1], LENH);

  assign ZIOH[71]  = (POCH_internal) ? 1'b0 : zioh_3_ret[17];
  assign ZIOH[70]  = (POCH_internal) ? 1'b0 : zioh_3_ret[16];
  assign ZIOH[69]  = (POCH_internal) ? 1'b0 : zioh_3_ret[15];
  assign ZIOH[68]  = (POCH_internal) ? 1'b0 : zioh_3_ret[14];
  assign ZIOH[67]  = (POCH_internal) ? 1'b0 : zioh_3_ret[13];
  assign ZIOH[66]  = (POCH_internal) ? 1'b0 : zioh_3_ret[12];
  assign ZIOH[65]  = (POCH_internal) ? 1'b0 : zioh_3_ret[11];
  assign ZIOH[64]  = (POCH_internal) ? 1'b0 : zioh_3_ret[10];
  assign ZIOH[63]  = (POCH_internal) ? 1'b0 : zioh_3_ret[9];
  assign ZIOH[62]  = (POCH_internal) ? 1'b0 : zioh_3_ret[8];
  assign ZIOH[61]  = (POCH_internal) ? 1'b0 : zioh_3_ret[7];
  assign ZIOH[60]  = (POCH_internal) ? 1'b0 : zioh_3_ret[6];
  assign ZIOH[59]  = (POCH_internal) ? 1'b0 : zioh_3_ret[5];
  assign ZIOH[58]  = (POCH_internal) ? 1'b0 : zioh_3_ret[4];
  assign ZIOH[57]  = (POCH_internal) ? 1'b0 : zioh_3_ret[3];
  assign ZIOH[56]  = (POCH_internal) ? 1'b0 : zioh_3_ret[2];
  assign ZIOH[55]  = (POCH_internal) ? 1'b0 : zioh_3_ret[1];
  assign ZIOH[54]  = (POCH_internal) ? 1'b0 : zioh_3_ret[0];

  assign ZIOH[53]  = (POCH_internal) ? 1'b0 : zioh_2_ret[17];
  assign ZIOH[52]  = (POCH_internal) ? 1'b0 : zioh_2_ret[16];
  assign ZIOH[51]  = (POCH_internal) ? 1'b0 : zioh_2_ret[15];
  assign ZIOH[50]  = (POCH_internal) ? 1'b0 : zioh_2_ret[14];
  assign ZIOH[49]  = (POCH_internal) ? 1'b0 : zioh_2_ret[13];
  assign ZIOH[48]  = (POCH_internal) ? 1'b0 : zioh_2_ret[12];
  assign ZIOH[47]  = (POCH_internal) ? 1'b0 : zioh_2_ret[11];
  assign ZIOH[46]  = (POCH_internal) ? 1'b0 : zioh_2_ret[10];
  assign ZIOH[45]  = (POCH_internal) ? 1'b0 : zioh_2_ret[9];
  assign ZIOH[44]  = (POCH_internal) ? 1'b0 : zioh_2_ret[8];
  assign ZIOH[43]  = (POCH_internal) ? 1'b0 : zioh_2_ret[7];
  assign ZIOH[42]  = (POCH_internal) ? 1'b0 : zioh_2_ret[6];
  assign ZIOH[41]  = (POCH_internal) ? 1'b0 : zioh_2_ret[5];
  assign ZIOH[40]  = (POCH_internal) ? 1'b0 : zioh_2_ret[4];
  assign ZIOH[39]  = (POCH_internal) ? 1'b0 : zioh_2_ret[3];
  assign ZIOH[38]  = (POCH_internal) ? 1'b0 : zioh_2_ret[2];
  assign ZIOH[37]  = (POCH_internal) ? 1'b0 : zioh_2_ret[1];
  assign ZIOH[36]  = (POCH_internal) ? 1'b0 : zioh_2_ret[0];

  assign ZIOH[35]  = (POCH_internal) ? 1'b0 : zioh_1_ret[17];
  assign ZIOH[34]  = (POCH_internal) ? 1'b0 : zioh_1_ret[16];
  assign ZIOH[33]  = (POCH_internal) ? 1'b0 : zioh_1_ret[15];
  assign ZIOH[32]  = (POCH_internal) ? 1'b0 : zioh_1_ret[14];
  assign ZIOH[31]  = (POCH_internal) ? 1'b0 : zioh_1_ret[13];
  assign ZIOH[30]  = (POCH_internal) ? 1'b0 : zioh_1_ret[12];
  assign ZIOH[29]  = (POCH_internal) ? 1'b0 : zioh_1_ret[11];
  assign ZIOH[28]  = (POCH_internal) ? 1'b0 : zioh_1_ret[10];
  assign ZIOH[27]  = (POCH_internal) ? 1'b0 : zioh_1_ret[9];
  assign ZIOH[26]  = (POCH_internal) ? 1'b0 : zioh_1_ret[8];
  assign ZIOH[25]  = (POCH_internal) ? 1'b0 : zioh_1_ret[7];
  assign ZIOH[24]  = (POCH_internal) ? 1'b0 : zioh_1_ret[6];
  assign ZIOH[23]  = (POCH_internal) ? 1'b0 : zioh_1_ret[5];
  assign ZIOH[22]  = (POCH_internal) ? 1'b0 : zioh_1_ret[4];
  assign ZIOH[21]  = (POCH_internal) ? 1'b0 : zioh_1_ret[3];
  assign ZIOH[20]  = (POCH_internal) ? 1'b0 : zioh_1_ret[2];
  assign ZIOH[19]  = (POCH_internal) ? 1'b0 : zioh_1_ret[1];
  assign ZIOH[18]  = (POCH_internal) ? 1'b0 : zioh_1_ret[0];

  assign ZIOH[17]   = (POCH_internal) ? 1'b0 : zioh_0_ret[17];
  assign ZIOH[16]   = (POCH_internal) ? 1'b0 : zioh_0_ret[16];
  assign ZIOH[15]   = (POCH_internal) ? 1'b0 : zioh_0_ret[15];
  assign ZIOH[14]   = (POCH_internal) ? 1'b0 : zioh_0_ret[14];
  assign ZIOH[13]   = (POCH_internal) ? 1'b0 : zioh_0_ret[13];
  assign ZIOH[12]   = (POCH_internal) ? 1'b0 : zioh_0_ret[12];
  assign ZIOH[11]   = (POCH_internal) ? 1'b0 : zioh_0_ret[11];
  assign ZIOH[10]   = (POCH_internal) ? 1'b0 : zioh_0_ret[10];
  assign ZIOH[9]   = (POCH_internal) ? 1'b0 : zioh_0_ret[9];
  assign ZIOH[8]   = (POCH_internal) ? 1'b0 : zioh_0_ret[8];
  assign ZIOH[7]   = (POCH_internal) ? 1'b0 : zioh_0_ret[7];
  assign ZIOH[6]   = (POCH_internal) ? 1'b0 : zioh_0_ret[6];
  assign ZIOH[5]   = (POCH_internal) ? 1'b0 : zioh_0_ret[5];
  assign ZIOH[4]   = (POCH_internal) ? 1'b0 : zioh_0_ret[4];
  assign ZIOH[3]   = (POCH_internal) ? 1'b0 : zioh_0_ret[3];
  assign ZIOH[2]   = (POCH_internal) ? 1'b0 : zioh_0_ret[2];
  assign ZIOH[1]   = (POCH_internal) ? 1'b0 : zioh_0_ret[1];
  assign ZIOH[0]   = (POCH_internal) ? 1'b0 : zioh_0_ret[0];

  // Output MVREF as a buffered version of PAD
  //buf (MVREF, PAD);
 
 /* Jing: comment out the following lines
 `ifdef DWC_DDRPHY_ATPG_MODEL
 buf (MVREF, PAD); 
 and (MVREF_PAD, ENPAD_ret,PAD); or (MVREF, MVREF_PAD, REFEN_ret); WM
 `else 
 assign MVREF=(!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:(REFEN_ret && !ENPAD_ret)? 1'b1:1'bx;
`endif */ 
//Jing: end of comment out 


  reg vrmon_valid;
  initial
  begin
    vrmon_valid = 1'b1;
  end
 // check if VRMON is being driven to a valid state
  always @(VRMON) begin
      case (VRMON[1:0])
        2'b00 	: vrmon_valid = 1'b1;
	2'b01 	: vrmon_valid = 1'b1;
	2'b10 	: vrmon_valid = 1'b1;
	2'b11 	: vrmon_valid = 1'b1;
	default : vrmon_valid = 1'b0;
      endcase
  end  
  

   parameter PREVENT_VRMON_ERR_AT_START = 0.001;  // disable VRMON errors for first picosecond

//  generate the signal to gate off VRMON errors for the first picosecond of simulation

  reg gate_vrmon_error;

  initial 
  begin
	gate_vrmon_error = 1'b0;
  end

always@(VRMON) begin

   if (gate_vrmon_error == 1'b0) begin

      gate_vrmon_error <= #( PREVENT_VRMON_ERR_AT_START)  1'b1;

   end

end

 
  always @(vrmon_valid)

   begin

      if (gate_vrmon_error == 1'b1) begin

      	if (vrmon_valid === 1'b0) $display("ERROR: Incorrect value on VRMON[1:0] -  %b", VRMON[1:0]);
      
      end
   end 

  reg refen_valid;
  initial
  begin
    refen_valid = 1'b1;
  end
 // check if REFEN is being driven to a valid state
  always @(REFEN) begin
      case (REFEN)
        1'b0 	: refen_valid = 1'b1;
	1'b1 	: refen_valid = 1'b1;
	default : refen_valid = 1'b0;
      endcase
  end  


   parameter PREVENT_REFEN_ERR_AT_START = 0.001;  // disable REFEN errors for first picosecond

//  generate the signal to gate off REFEN errors for the first picosecond of simulation

  reg gate_refen_error;

  initial 
  begin
	gate_refen_error = 1'b0;
  end

always@(REFEN) begin

   if (gate_refen_error == 1'b0) begin

      gate_refen_error <= #( PREVENT_REFEN_ERR_AT_START)  1'b1;

   end

end

 
  always @(refen_valid)

   begin

      if (gate_refen_error == 1'b1) begin

      	if (refen_valid === 1'b0) $display("ERROR: Incorrect value on REFEN -  %b", REFEN);
      
      end
   end 

  reg refsel_valid;
  
  initial
  begin
    refsel_valid = 1'b1;
  end
 // check if REFSEL is being driven to a valid state
  always @(REFSEL[5:0]) begin
      case (REFSEL[5:0])
        6'b000000 	: refsel_valid = 1'b1;
	6'b000001 	: refsel_valid = 1'b1;
	6'b000010 	: refsel_valid = 1'b1;
	6'b000011 	: refsel_valid = 1'b1;
	6'b000100 	: refsel_valid = 1'b1;
	6'b000101 	: refsel_valid = 1'b1;
	6'b000110 	: refsel_valid = 1'b1;
	6'b000111 	: refsel_valid = 1'b1;
	6'b001000 	: refsel_valid = 1'b1;
	6'b001001 	: refsel_valid = 1'b1;
	6'b001010 	: refsel_valid = 1'b1;
	6'b001011 	: refsel_valid = 1'b1;
	6'b001100 	: refsel_valid = 1'b1;
	6'b001101 	: refsel_valid = 1'b1;
	6'b001110 	: refsel_valid = 1'b1;
	6'b001111 	: refsel_valid = 1'b1;
	6'b010000 	: refsel_valid = 1'b1;
	6'b010001 	: refsel_valid = 1'b1;
	6'b010010 	: refsel_valid = 1'b1;
	6'b010011 	: refsel_valid = 1'b1;
	6'b010100 	: refsel_valid = 1'b1;
	6'b010101 	: refsel_valid = 1'b1;
	6'b010110 	: refsel_valid = 1'b1;
	6'b010111 	: refsel_valid = 1'b1;
	6'b011000 	: refsel_valid = 1'b1;
	6'b011001 	: refsel_valid = 1'b1;
	6'b011010 	: refsel_valid = 1'b1;
	6'b011011 	: refsel_valid = 1'b1;
	6'b011100 	: refsel_valid = 1'b1;
	6'b011101 	: refsel_valid = 1'b1;
	6'b011110 	: refsel_valid = 1'b1;
	6'b011111 	: refsel_valid = 1'b1;
	6'b100000 	: refsel_valid = 1'b1;
	6'b100001 	: refsel_valid = 1'b1;
	6'b100010 	: refsel_valid = 1'b1;
	6'b100011 	: refsel_valid = 1'b1;
	6'b100100 	: refsel_valid = 1'b1;
	6'b100101 	: refsel_valid = 1'b1;
	6'b100110 	: refsel_valid = 1'b1;
	6'b100111 	: refsel_valid = 1'b1;
	6'b101000 	: refsel_valid = 1'b1;
	6'b101001 	: refsel_valid = 1'b1;
	6'b101010 	: refsel_valid = 1'b1;
	6'b101011 	: refsel_valid = 1'b1;
	6'b101100 	: refsel_valid = 1'b1;
	6'b101101 	: refsel_valid = 1'b1;
	6'b101110 	: refsel_valid = 1'b1;
	6'b101111 	: refsel_valid = 1'b1;
	6'b110000 	: refsel_valid = 1'b1;
	6'b110001 	: refsel_valid = 1'b1;
	6'b110010 	: refsel_valid = 1'b1;
	6'b110011 	: refsel_valid = 1'b1;
	6'b110100 	: refsel_valid = 1'b1;
	6'b110101 	: refsel_valid = 1'b1;
	6'b110110 	: refsel_valid = 1'b1;
	6'b110111 	: refsel_valid = 1'b1;
	6'b111000 	: refsel_valid = 1'b1;
	6'b111001 	: refsel_valid = 1'b1;
	6'b111010 	: refsel_valid = 1'b1;
	6'b111011 	: refsel_valid = 1'b1;
	6'b111100 	: refsel_valid = 1'b1;
	6'b111101 	: refsel_valid = 1'b1;
	6'b111110 	: refsel_valid = 1'b1;
	6'b111111 	: refsel_valid = 1'b1;
	default 	: refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_5_0_ERR_AT_START = 0.001;  // disable REFSEL[5:0] errors for first picosecond

//  generate the signal to gate off REFSEL[5:0] errors for the first picosecond of simulation

  reg gate_refsel_5_0_error;

  initial 
  begin
	gate_refsel_5_0_error = 1'b0;
  end

always@(REFSEL[5:0]) begin

   if (gate_refsel_5_0_error == 1'b0) begin

      gate_refsel_5_0_error <= #( PREVENT_REFSEL_5_0_ERR_AT_START)  1'b1;

   end

end

 
  always @(refsel_valid)

   begin

      if (gate_refsel_5_0_error == 1'b1) begin

      	if (refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[5:0] -  %b", REFSEL[5:0]);
      
      end
   end 

 reg refselse_valid;
  initial
  begin
    refselse_valid = 1'b1;
  end
 // check if REFSELSE is being driven to a valid state
  always @(REFSELSE[5:0]) begin
      case (REFSELSE[5:0])
        6'b000000 	: refselse_valid = 1'b1;
	6'b000001 	: refselse_valid = 1'b1;
	6'b000010 	: refselse_valid = 1'b1;
	6'b000011 	: refselse_valid = 1'b1;
	6'b000100 	: refselse_valid = 1'b1;
	6'b000101 	: refselse_valid = 1'b1;
	6'b000110 	: refselse_valid = 1'b1;
	6'b000111 	: refselse_valid = 1'b1;
	6'b001000 	: refselse_valid = 1'b1;
	6'b001001 	: refselse_valid = 1'b1;
	6'b001010 	: refselse_valid = 1'b1;
	6'b001011 	: refselse_valid = 1'b1;
	6'b001100 	: refselse_valid = 1'b1;
	6'b001101 	: refselse_valid = 1'b1;
	6'b001110 	: refselse_valid = 1'b1;
	6'b001111 	: refselse_valid = 1'b1;
	6'b010000 	: refselse_valid = 1'b1;
	6'b010001 	: refselse_valid = 1'b1;
	6'b010010 	: refselse_valid = 1'b1;
	6'b010011 	: refselse_valid = 1'b1;
	6'b010100 	: refselse_valid = 1'b1;
	6'b010101 	: refselse_valid = 1'b1;
	6'b010110 	: refselse_valid = 1'b1;
	6'b010111 	: refselse_valid = 1'b1;
	6'b011000 	: refselse_valid = 1'b1;
	6'b011001 	: refselse_valid = 1'b1;
	6'b011010 	: refselse_valid = 1'b1;
	6'b011011 	: refselse_valid = 1'b1;
	6'b011100 	: refselse_valid = 1'b1;
	6'b011101 	: refselse_valid = 1'b1;
	6'b011110 	: refselse_valid = 1'b1;
	6'b011111 	: refselse_valid = 1'b1;
	6'b100000 	: refselse_valid = 1'b1;
	6'b100001 	: refselse_valid = 1'b1;
	6'b100010 	: refselse_valid = 1'b1;
	6'b100011 	: refselse_valid = 1'b1;
	6'b100100 	: refselse_valid = 1'b1;
	6'b100101 	: refselse_valid = 1'b1;
	6'b100110 	: refselse_valid = 1'b1;
	6'b100111 	: refselse_valid = 1'b1;
	6'b101000 	: refselse_valid = 1'b1;
	6'b101001 	: refselse_valid = 1'b1;
	6'b101010 	: refselse_valid = 1'b1;
	6'b101011 	: refselse_valid = 1'b1;
	6'b101100 	: refselse_valid = 1'b1;
	6'b101101 	: refselse_valid = 1'b1;
	6'b101110 	: refselse_valid = 1'b1;
	6'b101111 	: refselse_valid = 1'b1;
	6'b110000 	: refselse_valid = 1'b1;
	6'b110001 	: refselse_valid = 1'b1;
	6'b110010 	: refselse_valid = 1'b1;
	6'b110011 	: refselse_valid = 1'b1;
	6'b110100 	: refselse_valid = 1'b1;
	6'b110101 	: refselse_valid = 1'b1;
	6'b110110 	: refselse_valid = 1'b1;
	6'b110111 	: refselse_valid = 1'b1;
	6'b111000 	: refselse_valid = 1'b1;
	6'b111001 	: refselse_valid = 1'b1;
	6'b111010 	: refselse_valid = 1'b1;
	6'b111011 	: refselse_valid = 1'b1;
	6'b111100 	: refselse_valid = 1'b1;
	6'b111101 	: refselse_valid = 1'b1;
	6'b111110 	: refselse_valid = 1'b1;
	6'b111111 	: refselse_valid = 1'b1;
	default 	: refselse_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSELSE_5_0_ERR_AT_START = 0.001;  // disable REFSELSE[5:0] errors for first picosecond

//  generate the signal to gate off REFSELSE[5:0] errors for the first picosecond of simulation

  reg gate_refselse_5_0_error;

  initial 
  begin
	gate_refselse_5_0_error = 1'b0;
  end

always@(REFSELSE[5:0]) begin

   if (gate_refselse_5_0_error == 1'b0) begin

      gate_refselse_5_0_error <= #( PREVENT_REFSELSE_5_0_ERR_AT_START)  1'b1;

   end

end

 
  always @(refselse_valid)

   begin

      if (gate_refselse_5_0_error == 1'b1) begin

      	if (refselse_valid === 1'b0) $display("ERROR: Incorrect value on REFSELSE[5:0] -  %b", REFSELSE[5:0]);
      
      end
   end 
   

   // select one of MVREF[3:0] to PAD
 /* always @(ENPAD_ret) begin
  if (ENPAD_ret == 1'b1) begin
  	case (VRMON_ret[1:0])
  		2'b00   : assign PAD_internal = MVREF[0];
  		2'b01   : assign PAD_internal = MVREF[1];
  		2'b10   : assign PAD_internal = MVREF[2];
  		2'b11   : assign PAD_internal = MVREF[3];
  		default : assign PAD_internal = MVREF[0];
  	endcase
  end	
  else assign PAD_internal = 1'bz;
    
  end*/
  
  
`ifdef DWC_DDRPHY_ATPG_MODEL
 bufif1 (PAD_internal, MVREF[0], ENPAD_ret); 
`else
 assign PAD_internal = (ENPAD_ret)?((!VRMON_ret[1] && !VRMON_ret[0])? MVREF[0]:(!VRMON_ret[1] && VRMON_ret[0])? MVREF[1]:(VRMON_ret[1] && !VRMON_ret[0])? MVREF[2]:(VRMON_ret[1] && VRMON_ret[0])? MVREF[3]: MVREF[0]):1'bz;
`endif
  
//  buf (PAD, PAD_internal);
    
`ifdef DWC_DDRPHY_ATPG_MODEL
 bufif1 (MVREF[0], 1'b1, REFEN_ret);
 buf (PAD, PAD_internal);
`else
// bufif1 (MVREF[0], 1'b1, REFEN_ret);
// bufif1 (MVREF[0], PAD, ENPAD_ret);

 assign MVREF[0]=(!VRMON_ret[1] && !VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;
 assign MVREF[1]=(!VRMON_ret[1] && VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;
 assign MVREF[2]=(VRMON_ret[1] && !VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;
 assign MVREF[3]=(VRMON_ret[1] && VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;

 assign PAD = (REFEN_ret) ? PAD_internal:1'bz;
`endif


bufif1 (MVREFSE, 1'b1, REFENSE_ret);

`ifdef DWC_DDRPHY_ATPG_MODEL
  assign zioh_3 = 18'b000000000000000_000;
  assign zioh_2 = 18'b000000000000000_000;
  assign zioh_1 = 18'b000000000111111_000;
  assign zioh_0 = 18'b000000000111111_000;
`else
  always @(ZCTRL[27:21]) begin
      case (ZCTRL[27:21])
         7'b0000_000 : zioh_3 = 18'b000000000000000_000;
         7'b0000_001 : zioh_3 = 18'b000000000000000_001;
         7'b0000_010 : zioh_3 = 18'b000000000000000_010;
         7'b0000_011 : zioh_3 = 18'b000000000000000_011;
         7'b0000_100 : zioh_3 = 18'b000000000000000_100;
         7'b0000_101 : zioh_3 = 18'b000000000000000_101;
         7'b0000_110 : zioh_3 = 18'b000000000000000_110;
         7'b0000_111 : zioh_3 = 18'b000000000000000_111;
         7'b0001_000 : zioh_3 = 18'b000000000000001_000;
         7'b0001_001 : zioh_3 = 18'b000000000000001_001;
         7'b0001_010 : zioh_3 = 18'b000000000000001_010;
         7'b0001_011 : zioh_3 = 18'b000000000000001_011;
         7'b0001_100 : zioh_3 = 18'b000000000000001_100;
         7'b0001_101 : zioh_3 = 18'b000000000000001_101;
         7'b0001_110 : zioh_3 = 18'b000000000000001_110;
         7'b0001_111 : zioh_3 = 18'b000000000000001_111;
         7'b0010_000 : zioh_3 = 18'b000000000000011_000;
         7'b0010_001 : zioh_3 = 18'b000000000000011_001;
         7'b0010_010 : zioh_3 = 18'b000000000000011_010;
         7'b0010_011 : zioh_3 = 18'b000000000000011_011;
         7'b0010_100 : zioh_3 = 18'b000000000000011_100;
         7'b0010_101 : zioh_3 = 18'b000000000000011_101;
         7'b0010_110 : zioh_3 = 18'b000000000000011_110;
         7'b0010_111 : zioh_3 = 18'b000000000000011_111;
         7'b0011_000 : zioh_3 = 18'b000000000000111_000;
         7'b0011_001 : zioh_3 = 18'b000000000000111_001;
         7'b0011_010 : zioh_3 = 18'b000000000000111_010;
         7'b0011_011 : zioh_3 = 18'b000000000000111_011;
         7'b0011_100 : zioh_3 = 18'b000000000000111_100;
         7'b0011_101 : zioh_3 = 18'b000000000000111_101;
         7'b0011_110 : zioh_3 = 18'b000000000000111_110;
         7'b0011_111 : zioh_3 = 18'b000000000000111_111;
         7'b0100_000 : zioh_3 = 18'b000000000001111_000;
         7'b0100_001 : zioh_3 = 18'b000000000001111_001;
         7'b0100_010 : zioh_3 = 18'b000000000001111_010;
         7'b0100_011 : zioh_3 = 18'b000000000001111_011;
         7'b0100_100 : zioh_3 = 18'b000000000001111_100;
         7'b0100_101 : zioh_3 = 18'b000000000001111_101;
         7'b0100_110 : zioh_3 = 18'b000000000001111_110;
         7'b0100_111 : zioh_3 = 18'b000000000001111_111;
         7'b0101_000 : zioh_3 = 18'b000000000011111_000;
         7'b0101_001 : zioh_3 = 18'b000000000011111_001;
         7'b0101_010 : zioh_3 = 18'b000000000011111_010;
         7'b0101_011 : zioh_3 = 18'b000000000011111_011;
         7'b0101_100 : zioh_3 = 18'b000000000011111_100;
         7'b0101_101 : zioh_3 = 18'b000000000011111_101;
         7'b0101_110 : zioh_3 = 18'b000000000011111_110;
         7'b0101_111 : zioh_3 = 18'b000000000011111_111;
         7'b0110_000 : zioh_3 = 18'b000000000111111_000;
         7'b0110_001 : zioh_3 = 18'b000000000111111_001;
         7'b0110_010 : zioh_3 = 18'b000000000111111_010;
         7'b0110_011 : zioh_3 = 18'b000000000111111_011;
         7'b0110_100 : zioh_3 = 18'b000000000111111_100;
         7'b0110_101 : zioh_3 = 18'b000000000111111_101;
         7'b0110_110 : zioh_3 = 18'b000000000111111_110;
         7'b0110_111 : zioh_3 = 18'b000000000111111_111;
         7'b0111_000 : zioh_3 = 18'b000000001111111_000;
         7'b0111_001 : zioh_3 = 18'b000000001111111_001;
         7'b0111_010 : zioh_3 = 18'b000000001111111_010;
         7'b0111_011 : zioh_3 = 18'b000000001111111_011;
         7'b0111_100 : zioh_3 = 18'b000000001111111_100;
         7'b0111_101 : zioh_3 = 18'b000000001111111_101;
         7'b0111_110 : zioh_3 = 18'b000000001111111_110;
         7'b0111_111 : zioh_3 = 18'b000000001111111_111;
         7'b1000_000 : zioh_3 = 18'b000000011111111_000;
         7'b1000_001 : zioh_3 = 18'b000000011111111_001;
         7'b1000_010 : zioh_3 = 18'b000000011111111_010;
         7'b1000_011 : zioh_3 = 18'b000000011111111_011;
         7'b1000_100 : zioh_3 = 18'b000000011111111_100;
         7'b1000_101 : zioh_3 = 18'b000000011111111_101;
         7'b1000_110 : zioh_3 = 18'b000000011111111_110;
         7'b1000_111 : zioh_3 = 18'b000000011111111_111;
         7'b1001_000 : zioh_3 = 18'b000000111111111_000;
         7'b1001_001 : zioh_3 = 18'b000000111111111_001;
         7'b1001_010 : zioh_3 = 18'b000000111111111_010;
         7'b1001_011 : zioh_3 = 18'b000000111111111_011;
         7'b1001_100 : zioh_3 = 18'b000000111111111_100;
         7'b1001_101 : zioh_3 = 18'b000000111111111_101;
         7'b1001_110 : zioh_3 = 18'b000000111111111_110;
         7'b1001_111 : zioh_3 = 18'b000000111111111_111;
         7'b1010_000 : zioh_3 = 18'b000001111111111_000;
         7'b1010_001 : zioh_3 = 18'b000001111111111_001;
         7'b1010_010 : zioh_3 = 18'b000001111111111_010;
         7'b1010_011 : zioh_3 = 18'b000001111111111_011;
         7'b1010_100 : zioh_3 = 18'b000001111111111_100;
         7'b1010_101 : zioh_3 = 18'b000001111111111_101;
         7'b1010_110 : zioh_3 = 18'b000001111111111_110;
         7'b1010_111 : zioh_3 = 18'b000001111111111_111;
         7'b1011_000 : zioh_3 = 18'b000011111111111_000;
         7'b1011_001 : zioh_3 = 18'b000011111111111_001;
         7'b1011_010 : zioh_3 = 18'b000011111111111_010;
         7'b1011_011 : zioh_3 = 18'b000011111111111_011;
         7'b1011_100 : zioh_3 = 18'b000011111111111_100;
         7'b1011_101 : zioh_3 = 18'b000011111111111_101;
         7'b1011_110 : zioh_3 = 18'b000011111111111_110;
         7'b1011_111 : zioh_3 = 18'b000011111111111_111;
         7'b1100_000 : zioh_3 = 18'b000111111111111_000;
         7'b1100_001 : zioh_3 = 18'b000111111111111_001;
         7'b1100_010 : zioh_3 = 18'b000111111111111_010;
         7'b1100_011 : zioh_3 = 18'b000111111111111_011;
         7'b1100_100 : zioh_3 = 18'b000111111111111_100;
         7'b1100_101 : zioh_3 = 18'b000111111111111_101;
         7'b1100_110 : zioh_3 = 18'b000111111111111_110;
         7'b1100_111 : zioh_3 = 18'b000111111111111_111;
         7'b1101_000 : zioh_3 = 18'b001111111111111_000;
         7'b1101_001 : zioh_3 = 18'b001111111111111_001;
         7'b1101_010 : zioh_3 = 18'b001111111111111_010;
         7'b1101_011 : zioh_3 = 18'b001111111111111_011;
         7'b1101_100 : zioh_3 = 18'b001111111111111_100;
         7'b1101_101 : zioh_3 = 18'b001111111111111_101;
         7'b1101_110 : zioh_3 = 18'b001111111111111_110;
         7'b1101_111 : zioh_3 = 18'b001111111111111_111;
         7'b1110_000 : zioh_3 = 18'b011111111111111_000;
         7'b1110_001 : zioh_3 = 18'b011111111111111_001;
         7'b1110_010 : zioh_3 = 18'b011111111111111_010;
         7'b1110_011 : zioh_3 = 18'b011111111111111_011;
         7'b1110_100 : zioh_3 = 18'b011111111111111_100;
         7'b1110_101 : zioh_3 = 18'b011111111111111_101;
         7'b1110_110 : zioh_3 = 18'b011111111111111_110;
         7'b1110_111 : zioh_3 = 18'b011111111111111_111;
         7'b1111_000 : zioh_3 = 18'b111111111111111_000;
         7'b1111_001 : zioh_3 = 18'b111111111111111_001;
         7'b1111_010 : zioh_3 = 18'b111111111111111_010;
         7'b1111_011 : zioh_3 = 18'b111111111111111_011;
         7'b1111_100 : zioh_3 = 18'b111111111111111_100;
         7'b1111_101 : zioh_3 = 18'b111111111111111_101;
         7'b1111_110 : zioh_3 = 18'b111111111111111_110;
         7'b1111_111 : zioh_3 = 18'b111111111111111_111;
         default     : zioh_3 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[20:14]) begin
      case (ZCTRL[20:14])
         7'b0000_000 : zioh_2 = 18'b000000000000000_000;
         7'b0000_001 : zioh_2 = 18'b000000000000000_001;
         7'b0000_010 : zioh_2 = 18'b000000000000000_010;
         7'b0000_011 : zioh_2 = 18'b000000000000000_011;
         7'b0000_100 : zioh_2 = 18'b000000000000000_100;
         7'b0000_101 : zioh_2 = 18'b000000000000000_101;
         7'b0000_110 : zioh_2 = 18'b000000000000000_110;
         7'b0000_111 : zioh_2 = 18'b000000000000000_111;
         7'b0001_000 : zioh_2 = 18'b000000000000001_000;
         7'b0001_001 : zioh_2 = 18'b000000000000001_001;
         7'b0001_010 : zioh_2 = 18'b000000000000001_010;
         7'b0001_011 : zioh_2 = 18'b000000000000001_011;
         7'b0001_100 : zioh_2 = 18'b000000000000001_100;
         7'b0001_101 : zioh_2 = 18'b000000000000001_101;
         7'b0001_110 : zioh_2 = 18'b000000000000001_110;
         7'b0001_111 : zioh_2 = 18'b000000000000001_111;
         7'b0010_000 : zioh_2 = 18'b000000000000011_000;
         7'b0010_001 : zioh_2 = 18'b000000000000011_001;
         7'b0010_010 : zioh_2 = 18'b000000000000011_010;
         7'b0010_011 : zioh_2 = 18'b000000000000011_011;
         7'b0010_100 : zioh_2 = 18'b000000000000011_100;
         7'b0010_101 : zioh_2 = 18'b000000000000011_101;
         7'b0010_110 : zioh_2 = 18'b000000000000011_110;
         7'b0010_111 : zioh_2 = 18'b000000000000011_111;
         7'b0011_000 : zioh_2 = 18'b000000000000111_000;
         7'b0011_001 : zioh_2 = 18'b000000000000111_001;
         7'b0011_010 : zioh_2 = 18'b000000000000111_010;
         7'b0011_011 : zioh_2 = 18'b000000000000111_011;
         7'b0011_100 : zioh_2 = 18'b000000000000111_100;
         7'b0011_101 : zioh_2 = 18'b000000000000111_101;
         7'b0011_110 : zioh_2 = 18'b000000000000111_110;
         7'b0011_111 : zioh_2 = 18'b000000000000111_111;
         7'b0100_000 : zioh_2 = 18'b000000000001111_000;
         7'b0100_001 : zioh_2 = 18'b000000000001111_001;
         7'b0100_010 : zioh_2 = 18'b000000000001111_010;
         7'b0100_011 : zioh_2 = 18'b000000000001111_011;
         7'b0100_100 : zioh_2 = 18'b000000000001111_100;
         7'b0100_101 : zioh_2 = 18'b000000000001111_101;
         7'b0100_110 : zioh_2 = 18'b000000000001111_110;
         7'b0100_111 : zioh_2 = 18'b000000000001111_111;
         7'b0101_000 : zioh_2 = 18'b000000000011111_000;
         7'b0101_001 : zioh_2 = 18'b000000000011111_001;
         7'b0101_010 : zioh_2 = 18'b000000000011111_010;
         7'b0101_011 : zioh_2 = 18'b000000000011111_011;
         7'b0101_100 : zioh_2 = 18'b000000000011111_100;
         7'b0101_101 : zioh_2 = 18'b000000000011111_101;
         7'b0101_110 : zioh_2 = 18'b000000000011111_110;
         7'b0101_111 : zioh_2 = 18'b000000000011111_111;
         7'b0110_000 : zioh_2 = 18'b000000000111111_000;
         7'b0110_001 : zioh_2 = 18'b000000000111111_001;
         7'b0110_010 : zioh_2 = 18'b000000000111111_010;
         7'b0110_011 : zioh_2 = 18'b000000000111111_011;
         7'b0110_100 : zioh_2 = 18'b000000000111111_100;
         7'b0110_101 : zioh_2 = 18'b000000000111111_101;
         7'b0110_110 : zioh_2 = 18'b000000000111111_110;
         7'b0110_111 : zioh_2 = 18'b000000000111111_111;
         7'b0111_000 : zioh_2 = 18'b000000001111111_000;
         7'b0111_001 : zioh_2 = 18'b000000001111111_001;
         7'b0111_010 : zioh_2 = 18'b000000001111111_010;
         7'b0111_011 : zioh_2 = 18'b000000001111111_011;
         7'b0111_100 : zioh_2 = 18'b000000001111111_100;
         7'b0111_101 : zioh_2 = 18'b000000001111111_101;
         7'b0111_110 : zioh_2 = 18'b000000001111111_110;
         7'b0111_111 : zioh_2 = 18'b000000001111111_111;
         7'b1000_000 : zioh_2 = 18'b000000011111111_000;
         7'b1000_001 : zioh_2 = 18'b000000011111111_001;
         7'b1000_010 : zioh_2 = 18'b000000011111111_010;
         7'b1000_011 : zioh_2 = 18'b000000011111111_011;
         7'b1000_100 : zioh_2 = 18'b000000011111111_100;
         7'b1000_101 : zioh_2 = 18'b000000011111111_101;
         7'b1000_110 : zioh_2 = 18'b000000011111111_110;
         7'b1000_111 : zioh_2 = 18'b000000011111111_111;
         7'b1001_000 : zioh_2 = 18'b000000111111111_000;
         7'b1001_001 : zioh_2 = 18'b000000111111111_001;
         7'b1001_010 : zioh_2 = 18'b000000111111111_010;
         7'b1001_011 : zioh_2 = 18'b000000111111111_011;
         7'b1001_100 : zioh_2 = 18'b000000111111111_100;
         7'b1001_101 : zioh_2 = 18'b000000111111111_101;
         7'b1001_110 : zioh_2 = 18'b000000111111111_110;
         7'b1001_111 : zioh_2 = 18'b000000111111111_111;
         7'b1010_000 : zioh_2 = 18'b000001111111111_000;
         7'b1010_001 : zioh_2 = 18'b000001111111111_001;
         7'b1010_010 : zioh_2 = 18'b000001111111111_010;
         7'b1010_011 : zioh_2 = 18'b000001111111111_011;
         7'b1010_100 : zioh_2 = 18'b000001111111111_100;
         7'b1010_101 : zioh_2 = 18'b000001111111111_101;
         7'b1010_110 : zioh_2 = 18'b000001111111111_110;
         7'b1010_111 : zioh_2 = 18'b000001111111111_111;
         7'b1011_000 : zioh_2 = 18'b000011111111111_000;
         7'b1011_001 : zioh_2 = 18'b000011111111111_001;
         7'b1011_010 : zioh_2 = 18'b000011111111111_010;
         7'b1011_011 : zioh_2 = 18'b000011111111111_011;
         7'b1011_100 : zioh_2 = 18'b000011111111111_100;
         7'b1011_101 : zioh_2 = 18'b000011111111111_101;
         7'b1011_110 : zioh_2 = 18'b000011111111111_110;
         7'b1011_111 : zioh_2 = 18'b000011111111111_111;
         7'b1100_000 : zioh_2 = 18'b000111111111111_000;
         7'b1100_001 : zioh_2 = 18'b000111111111111_001;
         7'b1100_010 : zioh_2 = 18'b000111111111111_010;
         7'b1100_011 : zioh_2 = 18'b000111111111111_011;
         7'b1100_100 : zioh_2 = 18'b000111111111111_100;
         7'b1100_101 : zioh_2 = 18'b000111111111111_101;
         7'b1100_110 : zioh_2 = 18'b000111111111111_110;
         7'b1100_111 : zioh_2 = 18'b000111111111111_111;
         7'b1101_000 : zioh_2 = 18'b001111111111111_000;
         7'b1101_001 : zioh_2 = 18'b001111111111111_001;
         7'b1101_010 : zioh_2 = 18'b001111111111111_010;
         7'b1101_011 : zioh_2 = 18'b001111111111111_011;
         7'b1101_100 : zioh_2 = 18'b001111111111111_100;
         7'b1101_101 : zioh_2 = 18'b001111111111111_101;
         7'b1101_110 : zioh_2 = 18'b001111111111111_110;
         7'b1101_111 : zioh_2 = 18'b001111111111111_111;
         7'b1110_000 : zioh_2 = 18'b011111111111111_000;
         7'b1110_001 : zioh_2 = 18'b011111111111111_001;
         7'b1110_010 : zioh_2 = 18'b011111111111111_010;
         7'b1110_011 : zioh_2 = 18'b011111111111111_011;
         7'b1110_100 : zioh_2 = 18'b011111111111111_100;
         7'b1110_101 : zioh_2 = 18'b011111111111111_101;
         7'b1110_110 : zioh_2 = 18'b011111111111111_110;
         7'b1110_111 : zioh_2 = 18'b011111111111111_111;
         7'b1111_000 : zioh_2 = 18'b111111111111111_000;
         7'b1111_001 : zioh_2 = 18'b111111111111111_001;
         7'b1111_010 : zioh_2 = 18'b111111111111111_010;
         7'b1111_011 : zioh_2 = 18'b111111111111111_011;
         7'b1111_100 : zioh_2 = 18'b111111111111111_100;
         7'b1111_101 : zioh_2 = 18'b111111111111111_101;
         7'b1111_110 : zioh_2 = 18'b111111111111111_110;
         7'b1111_111 : zioh_2 = 18'b111111111111111_111;
         default     : zioh_2 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[13:7]) begin
      case (ZCTRL[13:7])
         7'b0000_000 : zioh_1 = 18'b000000000000000_000;
         7'b0000_001 : zioh_1 = 18'b000000000000000_001;
         7'b0000_010 : zioh_1 = 18'b000000000000000_010;
         7'b0000_011 : zioh_1 = 18'b000000000000000_011;
         7'b0000_100 : zioh_1 = 18'b000000000000000_100;
         7'b0000_101 : zioh_1 = 18'b000000000000000_101;
         7'b0000_110 : zioh_1 = 18'b000000000000000_110;
         7'b0000_111 : zioh_1 = 18'b000000000000000_111;
         7'b0001_000 : zioh_1 = 18'b000000000000001_000;
         7'b0001_001 : zioh_1 = 18'b000000000000001_001;
         7'b0001_010 : zioh_1 = 18'b000000000000001_010;
         7'b0001_011 : zioh_1 = 18'b000000000000001_011;
         7'b0001_100 : zioh_1 = 18'b000000000000001_100;
         7'b0001_101 : zioh_1 = 18'b000000000000001_101;
         7'b0001_110 : zioh_1 = 18'b000000000000001_110;
         7'b0001_111 : zioh_1 = 18'b000000000000001_111;
         7'b0010_000 : zioh_1 = 18'b000000000000011_000;
         7'b0010_001 : zioh_1 = 18'b000000000000011_001;
         7'b0010_010 : zioh_1 = 18'b000000000000011_010;
         7'b0010_011 : zioh_1 = 18'b000000000000011_011;
         7'b0010_100 : zioh_1 = 18'b000000000000011_100;
         7'b0010_101 : zioh_1 = 18'b000000000000011_101;
         7'b0010_110 : zioh_1 = 18'b000000000000011_110;
         7'b0010_111 : zioh_1 = 18'b000000000000011_111;
         7'b0011_000 : zioh_1 = 18'b000000000000111_000;
         7'b0011_001 : zioh_1 = 18'b000000000000111_001;
         7'b0011_010 : zioh_1 = 18'b000000000000111_010;
         7'b0011_011 : zioh_1 = 18'b000000000000111_011;
         7'b0011_100 : zioh_1 = 18'b000000000000111_100;
         7'b0011_101 : zioh_1 = 18'b000000000000111_101;
         7'b0011_110 : zioh_1 = 18'b000000000000111_110;
         7'b0011_111 : zioh_1 = 18'b000000000000111_111;
         7'b0100_000 : zioh_1 = 18'b000000000001111_000;
         7'b0100_001 : zioh_1 = 18'b000000000001111_001;
         7'b0100_010 : zioh_1 = 18'b000000000001111_010;
         7'b0100_011 : zioh_1 = 18'b000000000001111_011;
         7'b0100_100 : zioh_1 = 18'b000000000001111_100;
         7'b0100_101 : zioh_1 = 18'b000000000001111_101;
         7'b0100_110 : zioh_1 = 18'b000000000001111_110;
         7'b0100_111 : zioh_1 = 18'b000000000001111_111;
         7'b0101_000 : zioh_1 = 18'b000000000011111_000;
         7'b0101_001 : zioh_1 = 18'b000000000011111_001;
         7'b0101_010 : zioh_1 = 18'b000000000011111_010;
         7'b0101_011 : zioh_1 = 18'b000000000011111_011;
         7'b0101_100 : zioh_1 = 18'b000000000011111_100;
         7'b0101_101 : zioh_1 = 18'b000000000011111_101;
         7'b0101_110 : zioh_1 = 18'b000000000011111_110;
         7'b0101_111 : zioh_1 = 18'b000000000011111_111;
         7'b0110_000 : zioh_1 = 18'b000000000111111_000;
         7'b0110_001 : zioh_1 = 18'b000000000111111_001;
         7'b0110_010 : zioh_1 = 18'b000000000111111_010;
         7'b0110_011 : zioh_1 = 18'b000000000111111_011;
         7'b0110_100 : zioh_1 = 18'b000000000111111_100;
         7'b0110_101 : zioh_1 = 18'b000000000111111_101;
         7'b0110_110 : zioh_1 = 18'b000000000111111_110;
         7'b0110_111 : zioh_1 = 18'b000000000111111_111;
         7'b0111_000 : zioh_1 = 18'b000000001111111_000;
         7'b0111_001 : zioh_1 = 18'b000000001111111_001;
         7'b0111_010 : zioh_1 = 18'b000000001111111_010;
         7'b0111_011 : zioh_1 = 18'b000000001111111_011;
         7'b0111_100 : zioh_1 = 18'b000000001111111_100;
         7'b0111_101 : zioh_1 = 18'b000000001111111_101;
         7'b0111_110 : zioh_1 = 18'b000000001111111_110;
         7'b0111_111 : zioh_1 = 18'b000000001111111_111;
         7'b1000_000 : zioh_1 = 18'b000000011111111_000;
         7'b1000_001 : zioh_1 = 18'b000000011111111_001;
         7'b1000_010 : zioh_1 = 18'b000000011111111_010;
         7'b1000_011 : zioh_1 = 18'b000000011111111_011;
         7'b1000_100 : zioh_1 = 18'b000000011111111_100;
         7'b1000_101 : zioh_1 = 18'b000000011111111_101;
         7'b1000_110 : zioh_1 = 18'b000000011111111_110;
         7'b1000_111 : zioh_1 = 18'b000000011111111_111;
         7'b1001_000 : zioh_1 = 18'b000000111111111_000;
         7'b1001_001 : zioh_1 = 18'b000000111111111_001;
         7'b1001_010 : zioh_1 = 18'b000000111111111_010;
         7'b1001_011 : zioh_1 = 18'b000000111111111_011;
         7'b1001_100 : zioh_1 = 18'b000000111111111_100;
         7'b1001_101 : zioh_1 = 18'b000000111111111_101;
         7'b1001_110 : zioh_1 = 18'b000000111111111_110;
         7'b1001_111 : zioh_1 = 18'b000000111111111_111;
         7'b1010_000 : zioh_1 = 18'b000001111111111_000;
         7'b1010_001 : zioh_1 = 18'b000001111111111_001;
         7'b1010_010 : zioh_1 = 18'b000001111111111_010;
         7'b1010_011 : zioh_1 = 18'b000001111111111_011;
         7'b1010_100 : zioh_1 = 18'b000001111111111_100;
         7'b1010_101 : zioh_1 = 18'b000001111111111_101;
         7'b1010_110 : zioh_1 = 18'b000001111111111_110;
         7'b1010_111 : zioh_1 = 18'b000001111111111_111;
         7'b1011_000 : zioh_1 = 18'b000011111111111_000;
         7'b1011_001 : zioh_1 = 18'b000011111111111_001;
         7'b1011_010 : zioh_1 = 18'b000011111111111_010;
         7'b1011_011 : zioh_1 = 18'b000011111111111_011;
         7'b1011_100 : zioh_1 = 18'b000011111111111_100;
         7'b1011_101 : zioh_1 = 18'b000011111111111_101;
         7'b1011_110 : zioh_1 = 18'b000011111111111_110;
         7'b1011_111 : zioh_1 = 18'b000011111111111_111;
         7'b1100_000 : zioh_1 = 18'b000111111111111_000;
         7'b1100_001 : zioh_1 = 18'b000111111111111_001;
         7'b1100_010 : zioh_1 = 18'b000111111111111_010;
         7'b1100_011 : zioh_1 = 18'b000111111111111_011;
         7'b1100_100 : zioh_1 = 18'b000111111111111_100;
         7'b1100_101 : zioh_1 = 18'b000111111111111_101;
         7'b1100_110 : zioh_1 = 18'b000111111111111_110;
         7'b1100_111 : zioh_1 = 18'b000111111111111_111;
         7'b1101_000 : zioh_1 = 18'b001111111111111_000;
         7'b1101_001 : zioh_1 = 18'b001111111111111_001;
         7'b1101_010 : zioh_1 = 18'b001111111111111_010;
         7'b1101_011 : zioh_1 = 18'b001111111111111_011;
         7'b1101_100 : zioh_1 = 18'b001111111111111_100;
         7'b1101_101 : zioh_1 = 18'b001111111111111_101;
         7'b1101_110 : zioh_1 = 18'b001111111111111_110;
         7'b1101_111 : zioh_1 = 18'b001111111111111_111;
         7'b1110_000 : zioh_1 = 18'b011111111111111_000;
         7'b1110_001 : zioh_1 = 18'b011111111111111_001;
         7'b1110_010 : zioh_1 = 18'b011111111111111_010;
         7'b1110_011 : zioh_1 = 18'b011111111111111_011;
         7'b1110_100 : zioh_1 = 18'b011111111111111_100;
         7'b1110_101 : zioh_1 = 18'b011111111111111_101;
         7'b1110_110 : zioh_1 = 18'b011111111111111_110;
         7'b1110_111 : zioh_1 = 18'b011111111111111_111;
         7'b1111_000 : zioh_1 = 18'b111111111111111_000;
         7'b1111_001 : zioh_1 = 18'b111111111111111_001;
         7'b1111_010 : zioh_1 = 18'b111111111111111_010;
         7'b1111_011 : zioh_1 = 18'b111111111111111_011;
         7'b1111_100 : zioh_1 = 18'b111111111111111_100;
         7'b1111_101 : zioh_1 = 18'b111111111111111_101;
         7'b1111_110 : zioh_1 = 18'b111111111111111_110;
         7'b1111_111 : zioh_1 = 18'b111111111111111_111;
         default     : zioh_1 = 18'b000000000111111_000;
      endcase
  end

  always @(ZCTRL[6:0]) begin
      case (ZCTRL[6:0])
         7'b0000_000 : zioh_0 = 18'b000000000000000_000;
         7'b0000_001 : zioh_0 = 18'b000000000000000_001;
         7'b0000_010 : zioh_0 = 18'b000000000000000_010;
         7'b0000_011 : zioh_0 = 18'b000000000000000_011;
         7'b0000_100 : zioh_0 = 18'b000000000000000_100;
         7'b0000_101 : zioh_0 = 18'b000000000000000_101;
         7'b0000_110 : zioh_0 = 18'b000000000000000_110;
         7'b0000_111 : zioh_0 = 18'b000000000000000_111;
         7'b0001_000 : zioh_0 = 18'b000000000000001_000;
         7'b0001_001 : zioh_0 = 18'b000000000000001_001;
         7'b0001_010 : zioh_0 = 18'b000000000000001_010;
         7'b0001_011 : zioh_0 = 18'b000000000000001_011;
         7'b0001_100 : zioh_0 = 18'b000000000000001_100;
         7'b0001_101 : zioh_0 = 18'b000000000000001_101;
         7'b0001_110 : zioh_0 = 18'b000000000000001_110;
         7'b0001_111 : zioh_0 = 18'b000000000000001_111;
         7'b0010_000 : zioh_0 = 18'b000000000000011_000;
         7'b0010_001 : zioh_0 = 18'b000000000000011_001;
         7'b0010_010 : zioh_0 = 18'b000000000000011_010;
         7'b0010_011 : zioh_0 = 18'b000000000000011_011;
         7'b0010_100 : zioh_0 = 18'b000000000000011_100;
         7'b0010_101 : zioh_0 = 18'b000000000000011_101;
         7'b0010_110 : zioh_0 = 18'b000000000000011_110;
         7'b0010_111 : zioh_0 = 18'b000000000000011_111;
         7'b0011_000 : zioh_0 = 18'b000000000000111_000;
         7'b0011_001 : zioh_0 = 18'b000000000000111_001;
         7'b0011_010 : zioh_0 = 18'b000000000000111_010;
         7'b0011_011 : zioh_0 = 18'b000000000000111_011;
         7'b0011_100 : zioh_0 = 18'b000000000000111_100;
         7'b0011_101 : zioh_0 = 18'b000000000000111_101;
         7'b0011_110 : zioh_0 = 18'b000000000000111_110;
         7'b0011_111 : zioh_0 = 18'b000000000000111_111;
         7'b0100_000 : zioh_0 = 18'b000000000001111_000;
         7'b0100_001 : zioh_0 = 18'b000000000001111_001;
         7'b0100_010 : zioh_0 = 18'b000000000001111_010;
         7'b0100_011 : zioh_0 = 18'b000000000001111_011;
         7'b0100_100 : zioh_0 = 18'b000000000001111_100;
         7'b0100_101 : zioh_0 = 18'b000000000001111_101;
         7'b0100_110 : zioh_0 = 18'b000000000001111_110;
         7'b0100_111 : zioh_0 = 18'b000000000001111_111;
         7'b0101_000 : zioh_0 = 18'b000000000011111_000;
         7'b0101_001 : zioh_0 = 18'b000000000011111_001;
         7'b0101_010 : zioh_0 = 18'b000000000011111_010;
         7'b0101_011 : zioh_0 = 18'b000000000011111_011;
         7'b0101_100 : zioh_0 = 18'b000000000011111_100;
         7'b0101_101 : zioh_0 = 18'b000000000011111_101;
         7'b0101_110 : zioh_0 = 18'b000000000011111_110;
         7'b0101_111 : zioh_0 = 18'b000000000011111_111;
         7'b0110_000 : zioh_0 = 18'b000000000111111_000;
         7'b0110_001 : zioh_0 = 18'b000000000111111_001;
         7'b0110_010 : zioh_0 = 18'b000000000111111_010;
         7'b0110_011 : zioh_0 = 18'b000000000111111_011;
         7'b0110_100 : zioh_0 = 18'b000000000111111_100;
         7'b0110_101 : zioh_0 = 18'b000000000111111_101;
         7'b0110_110 : zioh_0 = 18'b000000000111111_110;
         7'b0110_111 : zioh_0 = 18'b000000000111111_111;
         7'b0111_000 : zioh_0 = 18'b000000001111111_000;
         7'b0111_001 : zioh_0 = 18'b000000001111111_001;
         7'b0111_010 : zioh_0 = 18'b000000001111111_010;
         7'b0111_011 : zioh_0 = 18'b000000001111111_011;
         7'b0111_100 : zioh_0 = 18'b000000001111111_100;
         7'b0111_101 : zioh_0 = 18'b000000001111111_101;
         7'b0111_110 : zioh_0 = 18'b000000001111111_110;
         7'b0111_111 : zioh_0 = 18'b000000001111111_111;
         7'b1000_000 : zioh_0 = 18'b000000011111111_000;
         7'b1000_001 : zioh_0 = 18'b000000011111111_001;
         7'b1000_010 : zioh_0 = 18'b000000011111111_010;
         7'b1000_011 : zioh_0 = 18'b000000011111111_011;
         7'b1000_100 : zioh_0 = 18'b000000011111111_100;
         7'b1000_101 : zioh_0 = 18'b000000011111111_101;
         7'b1000_110 : zioh_0 = 18'b000000011111111_110;
         7'b1000_111 : zioh_0 = 18'b000000011111111_111;
         7'b1001_000 : zioh_0 = 18'b000000111111111_000;
         7'b1001_001 : zioh_0 = 18'b000000111111111_001;
         7'b1001_010 : zioh_0 = 18'b000000111111111_010;
         7'b1001_011 : zioh_0 = 18'b000000111111111_011;
         7'b1001_100 : zioh_0 = 18'b000000111111111_100;
         7'b1001_101 : zioh_0 = 18'b000000111111111_101;
         7'b1001_110 : zioh_0 = 18'b000000111111111_110;
         7'b1001_111 : zioh_0 = 18'b000000111111111_111;
         7'b1010_000 : zioh_0 = 18'b000001111111111_000;
         7'b1010_001 : zioh_0 = 18'b000001111111111_001;
         7'b1010_010 : zioh_0 = 18'b000001111111111_010;
         7'b1010_011 : zioh_0 = 18'b000001111111111_011;
         7'b1010_100 : zioh_0 = 18'b000001111111111_100;
         7'b1010_101 : zioh_0 = 18'b000001111111111_101;
         7'b1010_110 : zioh_0 = 18'b000001111111111_110;
         7'b1010_111 : zioh_0 = 18'b000001111111111_111;
         7'b1011_000 : zioh_0 = 18'b000011111111111_000;
         7'b1011_001 : zioh_0 = 18'b000011111111111_001;
         7'b1011_010 : zioh_0 = 18'b000011111111111_010;
         7'b1011_011 : zioh_0 = 18'b000011111111111_011;
         7'b1011_100 : zioh_0 = 18'b000011111111111_100;
         7'b1011_101 : zioh_0 = 18'b000011111111111_101;
         7'b1011_110 : zioh_0 = 18'b000011111111111_110;
         7'b1011_111 : zioh_0 = 18'b000011111111111_111;
         7'b1100_000 : zioh_0 = 18'b000111111111111_000;
         7'b1100_001 : zioh_0 = 18'b000111111111111_001;
         7'b1100_010 : zioh_0 = 18'b000111111111111_010;
         7'b1100_011 : zioh_0 = 18'b000111111111111_011;
         7'b1100_100 : zioh_0 = 18'b000111111111111_100;
         7'b1100_101 : zioh_0 = 18'b000111111111111_101;
         7'b1100_110 : zioh_0 = 18'b000111111111111_110;
         7'b1100_111 : zioh_0 = 18'b000111111111111_111;
         7'b1101_000 : zioh_0 = 18'b001111111111111_000;
         7'b1101_001 : zioh_0 = 18'b001111111111111_001;
         7'b1101_010 : zioh_0 = 18'b001111111111111_010;
         7'b1101_011 : zioh_0 = 18'b001111111111111_011;
         7'b1101_100 : zioh_0 = 18'b001111111111111_100;
         7'b1101_101 : zioh_0 = 18'b001111111111111_101;
         7'b1101_110 : zioh_0 = 18'b001111111111111_110;
         7'b1101_111 : zioh_0 = 18'b001111111111111_111;
         7'b1110_000 : zioh_0 = 18'b011111111111111_000;
         7'b1110_001 : zioh_0 = 18'b011111111111111_001;
         7'b1110_010 : zioh_0 = 18'b011111111111111_010;
         7'b1110_011 : zioh_0 = 18'b011111111111111_011;
         7'b1110_100 : zioh_0 = 18'b011111111111111_100;
         7'b1110_101 : zioh_0 = 18'b011111111111111_101;
         7'b1110_110 : zioh_0 = 18'b011111111111111_110;
         7'b1110_111 : zioh_0 = 18'b011111111111111_111;
         7'b1111_000 : zioh_0 = 18'b111111111111111_000;
         7'b1111_001 : zioh_0 = 18'b111111111111111_001;
         7'b1111_010 : zioh_0 = 18'b111111111111111_010;
         7'b1111_011 : zioh_0 = 18'b111111111111111_011;
         7'b1111_100 : zioh_0 = 18'b111111111111111_100;
         7'b1111_101 : zioh_0 = 18'b111111111111111_101;
         7'b1111_110 : zioh_0 = 18'b111111111111111_110;
         7'b1111_111 : zioh_0 = 18'b111111111111111_111;
         default     : zioh_0 = 18'b000000000111111_000;
      endcase
  end
`endif

  specify
      (ZCTRL[0] *> ZIOH[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[1] *> ZIOH[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[2] *> ZIOH[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[3] *> ZIOH[17], ZIOH[15], ZIOH[13], ZIOH[11], ZIOH[9], ZIOH[7], ZIOH[5], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[4] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[5] *> ZIOH[17], ZIOH[16], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[6] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[10], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[7] *> ZIOH[18]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[8] *> ZIOH[19]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[9] *> ZIOH[20]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[10] *> ZIOH[35], ZIOH[33], ZIOH[31], ZIOH[29], ZIOH[27], ZIOH[25], ZIOH[23], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[11] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[12] *> ZIOH[35], ZIOH[34], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[13] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[28], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[14] *> ZIOH[36]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[15] *> ZIOH[37]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[16] *> ZIOH[38]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[17] *> ZIOH[53], ZIOH[51], ZIOH[49], ZIOH[47], ZIOH[45], ZIOH[43], ZIOH[41], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[18] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[19] *> ZIOH[53], ZIOH[52], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[20] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[46], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[21] *> ZIOH[54]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[22] *> ZIOH[55]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[23] *> ZIOH[56]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[24] *> ZIOH[71], ZIOH[69], ZIOH[67], ZIOH[65], ZIOH[63], ZIOH[61], ZIOH[59], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[25] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[26] *> ZIOH[71], ZIOH[70], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[27] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[64], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

       // (PAD => MVREF)    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // Jing: comment out
      
      // Jing: add the following lines
      (PAD => MVREF[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine


// ------------------------------
// SSTL reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PVREF_EW (PAD,MVREF,
`ifdef DWC_DDRPHY_PG_PINS 
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZCTRL, ZIOH, LENH, REFEN, REFSEL, PDRH18, MVREFSE, ENPAD, REFENSE, REFSELSE, VRMON); //Jing: add VRMON
  inout             PAD;	  
`ifdef DWC_DDRPHY_PG_PINS     
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  inout [3:0]       MVREF;	    //Jing: add [3:0], change to inout
  input             REFEN;          // Enable internal VREF generator 
  input  [5:0]      REFSEL;         // Select generated VREF value
  input             POCH;	          // Power-on clear high voltage
  input  [27:0]     ZCTRL;
  output [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  output		PDRH18;
  output		MVREFSE; // Special Vref for single ended receiver
  input		ENPAD; // Enable pass gate between MVREF and PAD
  input		REFENSE; // Enable reference generator for single ended comparator
  input [5:0]	REFSELSE; // Select reference value for single ended comparator
  input [1:0]       VRMON; //Jing: add VRMON[1:0], select MVREF[3:0] to PAD or vice versa


`ifdef DWC_DDRPHY_ATPG_MODEL
  wire   [17:0]     zioh_3;
  wire   [17:0]     zioh_2;
  wire   [17:0]     zioh_1;
  wire   [17:0]     zioh_0;
`else
  reg    [17:0]     zioh_3;
  reg    [17:0]     zioh_2;
  reg    [17:0]     zioh_1;
  reg    [17:0]     zioh_0;
`endif

  wire   [17:0]     zioh_3_ret;
  wire   [17:0]     zioh_2_ret;
  wire   [17:0]     zioh_1_ret;
  wire   [17:0]     zioh_0_ret; 
  
  wire ENPAD_ret;
  wire REFEN_ret;
  wire REFENSE_ret;
  wire   [1:0] VRMON_ret; 
  wire          POCH_internal;
  wire          LENH_b;
  wire 		PAD_internal; //internal pad signal

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  DWC_D4MV_LATCH Z_0_0_lat (zioh_0_ret[0], zioh_0[0], LENH);
  DWC_D4MV_LATCH Z_0_1_lat (zioh_0_ret[1], zioh_0[1], LENH);
  DWC_D4MV_LATCH Z_0_2_lat (zioh_0_ret[2], zioh_0[2], LENH);
  DWC_D4MV_LATCH Z_0_3_lat (zioh_0_ret[3], zioh_0[3], LENH);
  DWC_D4MV_LATCH Z_0_4_lat (zioh_0_ret[4], zioh_0[4], LENH);
  DWC_D4MV_LATCH Z_0_5_lat (zioh_0_ret[5], zioh_0[5], LENH);
  DWC_D4MV_LATCH Z_0_6_lat (zioh_0_ret[6], zioh_0[6], LENH);
  DWC_D4MV_LATCH Z_0_7_lat (zioh_0_ret[7], zioh_0[7], LENH);
  DWC_D4MV_LATCH Z_0_8_lat (zioh_0_ret[8], zioh_0[8], LENH);
  DWC_D4MV_LATCH Z_0_9_lat (zioh_0_ret[9], zioh_0[9], LENH);
  DWC_D4MV_LATCH Z_0_10_lat (zioh_0_ret[10], zioh_0[10], LENH);
  DWC_D4MV_LATCH Z_0_11_lat (zioh_0_ret[11], zioh_0[11], LENH);
  DWC_D4MV_LATCH Z_0_12_lat (zioh_0_ret[12], zioh_0[12], LENH);
  DWC_D4MV_LATCH Z_0_13_lat (zioh_0_ret[13], zioh_0[13], LENH);
  DWC_D4MV_LATCH Z_0_14_lat (zioh_0_ret[14], zioh_0[14], LENH);
  DWC_D4MV_LATCH Z_0_15_lat (zioh_0_ret[15], zioh_0[15], LENH);
  DWC_D4MV_LATCH Z_0_16_lat (zioh_0_ret[16], zioh_0[16], LENH);
  DWC_D4MV_LATCH Z_0_17_lat (zioh_0_ret[17], zioh_0[17], LENH);

  DWC_D4MV_LATCH Z_1_0_lat (zioh_1_ret[0], zioh_1[0], LENH);
  DWC_D4MV_LATCH Z_1_1_lat (zioh_1_ret[1], zioh_1[1], LENH);
  DWC_D4MV_LATCH Z_1_2_lat (zioh_1_ret[2], zioh_1[2], LENH);
  DWC_D4MV_LATCH Z_1_3_lat (zioh_1_ret[3], zioh_1[3], LENH);
  DWC_D4MV_LATCH Z_1_4_lat (zioh_1_ret[4], zioh_1[4], LENH);
  DWC_D4MV_LATCH Z_1_5_lat (zioh_1_ret[5], zioh_1[5], LENH);
  DWC_D4MV_LATCH Z_1_6_lat (zioh_1_ret[6], zioh_1[6], LENH);
  DWC_D4MV_LATCH Z_1_7_lat (zioh_1_ret[7], zioh_1[7], LENH);
  DWC_D4MV_LATCH Z_1_8_lat (zioh_1_ret[8], zioh_1[8], LENH);
  DWC_D4MV_LATCH Z_1_9_lat (zioh_1_ret[9], zioh_1[9], LENH);
  DWC_D4MV_LATCH Z_1_10_lat (zioh_1_ret[10], zioh_1[10], LENH);
  DWC_D4MV_LATCH Z_1_11_lat (zioh_1_ret[11], zioh_1[11], LENH);
  DWC_D4MV_LATCH Z_1_12_lat (zioh_1_ret[12], zioh_1[12], LENH);
  DWC_D4MV_LATCH Z_1_13_lat (zioh_1_ret[13], zioh_1[13], LENH);
  DWC_D4MV_LATCH Z_1_14_lat (zioh_1_ret[14], zioh_1[14], LENH);
  DWC_D4MV_LATCH Z_1_15_lat (zioh_1_ret[15], zioh_1[15], LENH);
  DWC_D4MV_LATCH Z_1_16_lat (zioh_1_ret[16], zioh_1[16], LENH);
  DWC_D4MV_LATCH Z_1_17_lat (zioh_1_ret[17], zioh_1[17], LENH);

  DWC_D4MV_LATCH Z_2_0_lat (zioh_2_ret[0], zioh_2[0], LENH);
  DWC_D4MV_LATCH Z_2_1_lat (zioh_2_ret[1], zioh_2[1], LENH);
  DWC_D4MV_LATCH Z_2_2_lat (zioh_2_ret[2], zioh_2[2], LENH);
  DWC_D4MV_LATCH Z_2_3_lat (zioh_2_ret[3], zioh_2[3], LENH);
  DWC_D4MV_LATCH Z_2_4_lat (zioh_2_ret[4], zioh_2[4], LENH);
  DWC_D4MV_LATCH Z_2_5_lat (zioh_2_ret[5], zioh_2[5], LENH);
  DWC_D4MV_LATCH Z_2_6_lat (zioh_2_ret[6], zioh_2[6], LENH);
  DWC_D4MV_LATCH Z_2_7_lat (zioh_2_ret[7], zioh_2[7], LENH);
  DWC_D4MV_LATCH Z_2_8_lat (zioh_2_ret[8], zioh_2[8], LENH);
  DWC_D4MV_LATCH Z_2_9_lat (zioh_2_ret[9], zioh_2[9], LENH);
  DWC_D4MV_LATCH Z_2_10_lat (zioh_2_ret[10], zioh_2[10], LENH);
  DWC_D4MV_LATCH Z_2_11_lat (zioh_2_ret[11], zioh_2[11], LENH);
  DWC_D4MV_LATCH Z_2_12_lat (zioh_2_ret[12], zioh_2[12], LENH);
  DWC_D4MV_LATCH Z_2_13_lat (zioh_2_ret[13], zioh_2[13], LENH);
  DWC_D4MV_LATCH Z_2_14_lat (zioh_2_ret[14], zioh_2[14], LENH);
  DWC_D4MV_LATCH Z_2_15_lat (zioh_2_ret[15], zioh_2[15], LENH);
  DWC_D4MV_LATCH Z_2_16_lat (zioh_2_ret[16], zioh_2[16], LENH);
  DWC_D4MV_LATCH Z_2_17_lat (zioh_2_ret[17], zioh_2[17], LENH);
  
  DWC_D4MV_LATCH Z_3_0_lat (zioh_3_ret[0], zioh_3[0], LENH);
  DWC_D4MV_LATCH Z_3_1_lat (zioh_3_ret[1], zioh_3[1], LENH);
  DWC_D4MV_LATCH Z_3_2_lat (zioh_3_ret[2], zioh_3[2], LENH);
  DWC_D4MV_LATCH Z_3_3_lat (zioh_3_ret[3], zioh_3[3], LENH);
  DWC_D4MV_LATCH Z_3_4_lat (zioh_3_ret[4], zioh_3[4], LENH);
  DWC_D4MV_LATCH Z_3_5_lat (zioh_3_ret[5], zioh_3[5], LENH);
  DWC_D4MV_LATCH Z_3_6_lat (zioh_3_ret[6], zioh_3[6], LENH);
  DWC_D4MV_LATCH Z_3_7_lat (zioh_3_ret[7], zioh_3[7], LENH);
  DWC_D4MV_LATCH Z_3_8_lat (zioh_3_ret[8], zioh_3[8], LENH);
  DWC_D4MV_LATCH Z_3_9_lat (zioh_3_ret[9], zioh_3[9], LENH);
  DWC_D4MV_LATCH Z_3_10_lat (zioh_3_ret[10], zioh_3[10], LENH);
  DWC_D4MV_LATCH Z_3_11_lat (zioh_3_ret[11], zioh_3[11], LENH);
  DWC_D4MV_LATCH Z_3_12_lat (zioh_3_ret[12], zioh_3[12], LENH);
  DWC_D4MV_LATCH Z_3_13_lat (zioh_3_ret[13], zioh_3[13], LENH);
  DWC_D4MV_LATCH Z_3_14_lat (zioh_3_ret[14], zioh_3[14], LENH);
  DWC_D4MV_LATCH Z_3_15_lat (zioh_3_ret[15], zioh_3[15], LENH);
  DWC_D4MV_LATCH Z_3_16_lat (zioh_3_ret[16], zioh_3[16], LENH);
  DWC_D4MV_LATCH Z_3_17_lat (zioh_3_ret[17], zioh_3[17], LENH);

  DWC_D4MV_LATCH ENPAD_lat (ENPAD_ret, ENPAD, LENH);
  DWC_D4MV_LATCH REFEN_lat (REFEN_ret, REFEN, LENH); 
  DWC_D4MV_LATCH REFENSE_lat (REFENSE_ret, REFENSE, LENH);
  
  DWC_D4MV_LATCH VRMON0_lat (VRMON_ret[0], VRMON[0], LENH);
  DWC_D4MV_LATCH VRMON1_lat (VRMON_ret[1], VRMON[1], LENH);

  assign ZIOH[71]  = (POCH_internal) ? 1'b0 : zioh_3_ret[17];
  assign ZIOH[70]  = (POCH_internal) ? 1'b0 : zioh_3_ret[16];
  assign ZIOH[69]  = (POCH_internal) ? 1'b0 : zioh_3_ret[15];
  assign ZIOH[68]  = (POCH_internal) ? 1'b0 : zioh_3_ret[14];
  assign ZIOH[67]  = (POCH_internal) ? 1'b0 : zioh_3_ret[13];
  assign ZIOH[66]  = (POCH_internal) ? 1'b0 : zioh_3_ret[12];
  assign ZIOH[65]  = (POCH_internal) ? 1'b0 : zioh_3_ret[11];
  assign ZIOH[64]  = (POCH_internal) ? 1'b0 : zioh_3_ret[10];
  assign ZIOH[63]  = (POCH_internal) ? 1'b0 : zioh_3_ret[9];
  assign ZIOH[62]  = (POCH_internal) ? 1'b0 : zioh_3_ret[8];
  assign ZIOH[61]  = (POCH_internal) ? 1'b0 : zioh_3_ret[7];
  assign ZIOH[60]  = (POCH_internal) ? 1'b0 : zioh_3_ret[6];
  assign ZIOH[59]  = (POCH_internal) ? 1'b0 : zioh_3_ret[5];
  assign ZIOH[58]  = (POCH_internal) ? 1'b0 : zioh_3_ret[4];
  assign ZIOH[57]  = (POCH_internal) ? 1'b0 : zioh_3_ret[3];
  assign ZIOH[56]  = (POCH_internal) ? 1'b0 : zioh_3_ret[2];
  assign ZIOH[55]  = (POCH_internal) ? 1'b0 : zioh_3_ret[1];
  assign ZIOH[54]  = (POCH_internal) ? 1'b0 : zioh_3_ret[0];

  assign ZIOH[53]  = (POCH_internal) ? 1'b0 : zioh_2_ret[17];
  assign ZIOH[52]  = (POCH_internal) ? 1'b0 : zioh_2_ret[16];
  assign ZIOH[51]  = (POCH_internal) ? 1'b0 : zioh_2_ret[15];
  assign ZIOH[50]  = (POCH_internal) ? 1'b0 : zioh_2_ret[14];
  assign ZIOH[49]  = (POCH_internal) ? 1'b0 : zioh_2_ret[13];
  assign ZIOH[48]  = (POCH_internal) ? 1'b0 : zioh_2_ret[12];
  assign ZIOH[47]  = (POCH_internal) ? 1'b0 : zioh_2_ret[11];
  assign ZIOH[46]  = (POCH_internal) ? 1'b0 : zioh_2_ret[10];
  assign ZIOH[45]  = (POCH_internal) ? 1'b0 : zioh_2_ret[9];
  assign ZIOH[44]  = (POCH_internal) ? 1'b0 : zioh_2_ret[8];
  assign ZIOH[43]  = (POCH_internal) ? 1'b0 : zioh_2_ret[7];
  assign ZIOH[42]  = (POCH_internal) ? 1'b0 : zioh_2_ret[6];
  assign ZIOH[41]  = (POCH_internal) ? 1'b0 : zioh_2_ret[5];
  assign ZIOH[40]  = (POCH_internal) ? 1'b0 : zioh_2_ret[4];
  assign ZIOH[39]  = (POCH_internal) ? 1'b0 : zioh_2_ret[3];
  assign ZIOH[38]  = (POCH_internal) ? 1'b0 : zioh_2_ret[2];
  assign ZIOH[37]  = (POCH_internal) ? 1'b0 : zioh_2_ret[1];
  assign ZIOH[36]  = (POCH_internal) ? 1'b0 : zioh_2_ret[0];

  assign ZIOH[35]  = (POCH_internal) ? 1'b0 : zioh_1_ret[17];
  assign ZIOH[34]  = (POCH_internal) ? 1'b0 : zioh_1_ret[16];
  assign ZIOH[33]  = (POCH_internal) ? 1'b0 : zioh_1_ret[15];
  assign ZIOH[32]  = (POCH_internal) ? 1'b0 : zioh_1_ret[14];
  assign ZIOH[31]  = (POCH_internal) ? 1'b0 : zioh_1_ret[13];
  assign ZIOH[30]  = (POCH_internal) ? 1'b0 : zioh_1_ret[12];
  assign ZIOH[29]  = (POCH_internal) ? 1'b0 : zioh_1_ret[11];
  assign ZIOH[28]  = (POCH_internal) ? 1'b0 : zioh_1_ret[10];
  assign ZIOH[27]  = (POCH_internal) ? 1'b0 : zioh_1_ret[9];
  assign ZIOH[26]  = (POCH_internal) ? 1'b0 : zioh_1_ret[8];
  assign ZIOH[25]  = (POCH_internal) ? 1'b0 : zioh_1_ret[7];
  assign ZIOH[24]  = (POCH_internal) ? 1'b0 : zioh_1_ret[6];
  assign ZIOH[23]  = (POCH_internal) ? 1'b0 : zioh_1_ret[5];
  assign ZIOH[22]  = (POCH_internal) ? 1'b0 : zioh_1_ret[4];
  assign ZIOH[21]  = (POCH_internal) ? 1'b0 : zioh_1_ret[3];
  assign ZIOH[20]  = (POCH_internal) ? 1'b0 : zioh_1_ret[2];
  assign ZIOH[19]  = (POCH_internal) ? 1'b0 : zioh_1_ret[1];
  assign ZIOH[18]  = (POCH_internal) ? 1'b0 : zioh_1_ret[0];

  assign ZIOH[17]   = (POCH_internal) ? 1'b0 : zioh_0_ret[17];
  assign ZIOH[16]   = (POCH_internal) ? 1'b0 : zioh_0_ret[16];
  assign ZIOH[15]   = (POCH_internal) ? 1'b0 : zioh_0_ret[15];
  assign ZIOH[14]   = (POCH_internal) ? 1'b0 : zioh_0_ret[14];
  assign ZIOH[13]   = (POCH_internal) ? 1'b0 : zioh_0_ret[13];
  assign ZIOH[12]   = (POCH_internal) ? 1'b0 : zioh_0_ret[12];
  assign ZIOH[11]   = (POCH_internal) ? 1'b0 : zioh_0_ret[11];
  assign ZIOH[10]   = (POCH_internal) ? 1'b0 : zioh_0_ret[10];
  assign ZIOH[9]   = (POCH_internal) ? 1'b0 : zioh_0_ret[9];
  assign ZIOH[8]   = (POCH_internal) ? 1'b0 : zioh_0_ret[8];
  assign ZIOH[7]   = (POCH_internal) ? 1'b0 : zioh_0_ret[7];
  assign ZIOH[6]   = (POCH_internal) ? 1'b0 : zioh_0_ret[6];
  assign ZIOH[5]   = (POCH_internal) ? 1'b0 : zioh_0_ret[5];
  assign ZIOH[4]   = (POCH_internal) ? 1'b0 : zioh_0_ret[4];
  assign ZIOH[3]   = (POCH_internal) ? 1'b0 : zioh_0_ret[3];
  assign ZIOH[2]   = (POCH_internal) ? 1'b0 : zioh_0_ret[2];
  assign ZIOH[1]   = (POCH_internal) ? 1'b0 : zioh_0_ret[1];
  assign ZIOH[0]   = (POCH_internal) ? 1'b0 : zioh_0_ret[0];

  // Output MVREF as a buffered version of PAD
  //buf (MVREF, PAD);
 
 /* Jing: comment out the following lines
 `ifdef DWC_DDRPHY_ATPG_MODEL
 buf (MVREF, PAD); 
 and (MVREF_PAD, ENPAD_ret,PAD); or (MVREF, MVREF_PAD, REFEN_ret); WM
 `else 
 assign MVREF=(!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:(REFEN_ret && !ENPAD_ret)? 1'b1:1'bx;
`endif */ 
//Jing: end of comment out 


  reg vrmon_valid;
  initial
  begin
    vrmon_valid = 1'b1;
  end
 // check if VRMON is being driven to a valid state
  always @(VRMON) begin
      case (VRMON[1:0])
        2'b00 	: vrmon_valid = 1'b1;
	2'b01 	: vrmon_valid = 1'b1;
	2'b10 	: vrmon_valid = 1'b1;
	2'b11 	: vrmon_valid = 1'b1;
	default : vrmon_valid = 1'b0;
      endcase
  end  
  

   parameter PREVENT_VRMON_ERR_AT_START = 0.001;  // disable VRMON errors for first picosecond

//  generate the signal to gate off VRMON errors for the first picosecond of simulation

  reg gate_vrmon_error;

  initial 
  begin
	gate_vrmon_error = 1'b0;
  end

always@(VRMON) begin

   if (gate_vrmon_error == 1'b0) begin

      gate_vrmon_error <= #( PREVENT_VRMON_ERR_AT_START)  1'b1;

   end

end

 
  always @(vrmon_valid)

   begin

      if (gate_vrmon_error == 1'b1) begin

      	if (vrmon_valid === 1'b0) $display("ERROR: Incorrect value on VRMON[1:0] -  %b", VRMON[1:0]);
      
      end
   end 

  reg refen_valid;
  initial
  begin
    refen_valid = 1'b1;
  end
 // check if REFEN is being driven to a valid state
  always @(REFEN) begin
      case (REFEN)
        1'b0 	: refen_valid = 1'b1;
	1'b1 	: refen_valid = 1'b1;
	default : refen_valid = 1'b0;
      endcase
  end  


   parameter PREVENT_REFEN_ERR_AT_START = 0.001;  // disable REFEN errors for first picosecond

//  generate the signal to gate off REFEN errors for the first picosecond of simulation

  reg gate_refen_error;

  initial 
  begin
	gate_refen_error = 1'b0;
  end

always@(REFEN) begin

   if (gate_refen_error == 1'b0) begin

      gate_refen_error <= #( PREVENT_REFEN_ERR_AT_START)  1'b1;

   end

end

 
  always @(refen_valid)

   begin

      if (gate_refen_error == 1'b1) begin

      	if (refen_valid === 1'b0) $display("ERROR: Incorrect value on REFEN -  %b", REFEN);
      
      end
   end 

  reg refsel_valid;
  
  initial
  begin
    refsel_valid = 1'b1;
  end
 // check if REFSEL is being driven to a valid state
  always @(REFSEL[5:0]) begin
      case (REFSEL[5:0])
        6'b000000 	: refsel_valid = 1'b1;
	6'b000001 	: refsel_valid = 1'b1;
	6'b000010 	: refsel_valid = 1'b1;
	6'b000011 	: refsel_valid = 1'b1;
	6'b000100 	: refsel_valid = 1'b1;
	6'b000101 	: refsel_valid = 1'b1;
	6'b000110 	: refsel_valid = 1'b1;
	6'b000111 	: refsel_valid = 1'b1;
	6'b001000 	: refsel_valid = 1'b1;
	6'b001001 	: refsel_valid = 1'b1;
	6'b001010 	: refsel_valid = 1'b1;
	6'b001011 	: refsel_valid = 1'b1;
	6'b001100 	: refsel_valid = 1'b1;
	6'b001101 	: refsel_valid = 1'b1;
	6'b001110 	: refsel_valid = 1'b1;
	6'b001111 	: refsel_valid = 1'b1;
	6'b010000 	: refsel_valid = 1'b1;
	6'b010001 	: refsel_valid = 1'b1;
	6'b010010 	: refsel_valid = 1'b1;
	6'b010011 	: refsel_valid = 1'b1;
	6'b010100 	: refsel_valid = 1'b1;
	6'b010101 	: refsel_valid = 1'b1;
	6'b010110 	: refsel_valid = 1'b1;
	6'b010111 	: refsel_valid = 1'b1;
	6'b011000 	: refsel_valid = 1'b1;
	6'b011001 	: refsel_valid = 1'b1;
	6'b011010 	: refsel_valid = 1'b1;
	6'b011011 	: refsel_valid = 1'b1;
	6'b011100 	: refsel_valid = 1'b1;
	6'b011101 	: refsel_valid = 1'b1;
	6'b011110 	: refsel_valid = 1'b1;
	6'b011111 	: refsel_valid = 1'b1;
	6'b100000 	: refsel_valid = 1'b1;
	6'b100001 	: refsel_valid = 1'b1;
	6'b100010 	: refsel_valid = 1'b1;
	6'b100011 	: refsel_valid = 1'b1;
	6'b100100 	: refsel_valid = 1'b1;
	6'b100101 	: refsel_valid = 1'b1;
	6'b100110 	: refsel_valid = 1'b1;
	6'b100111 	: refsel_valid = 1'b1;
	6'b101000 	: refsel_valid = 1'b1;
	6'b101001 	: refsel_valid = 1'b1;
	6'b101010 	: refsel_valid = 1'b1;
	6'b101011 	: refsel_valid = 1'b1;
	6'b101100 	: refsel_valid = 1'b1;
	6'b101101 	: refsel_valid = 1'b1;
	6'b101110 	: refsel_valid = 1'b1;
	6'b101111 	: refsel_valid = 1'b1;
	6'b110000 	: refsel_valid = 1'b1;
	6'b110001 	: refsel_valid = 1'b1;
	6'b110010 	: refsel_valid = 1'b1;
	6'b110011 	: refsel_valid = 1'b1;
	6'b110100 	: refsel_valid = 1'b1;
	6'b110101 	: refsel_valid = 1'b1;
	6'b110110 	: refsel_valid = 1'b1;
	6'b110111 	: refsel_valid = 1'b1;
	6'b111000 	: refsel_valid = 1'b1;
	6'b111001 	: refsel_valid = 1'b1;
	6'b111010 	: refsel_valid = 1'b1;
	6'b111011 	: refsel_valid = 1'b1;
	6'b111100 	: refsel_valid = 1'b1;
	6'b111101 	: refsel_valid = 1'b1;
	6'b111110 	: refsel_valid = 1'b1;
	6'b111111 	: refsel_valid = 1'b1;
	default 	: refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_5_0_ERR_AT_START = 0.001;  // disable REFSEL[5:0] errors for first picosecond

//  generate the signal to gate off REFSEL[5:0] errors for the first picosecond of simulation

  reg gate_refsel_5_0_error;

  initial 
  begin
	gate_refsel_5_0_error = 1'b0;
  end

always@(REFSEL[5:0]) begin

   if (gate_refsel_5_0_error == 1'b0) begin

      gate_refsel_5_0_error <= #( PREVENT_REFSEL_5_0_ERR_AT_START)  1'b1;

   end

end

 
  always @(refsel_valid)

   begin

      if (gate_refsel_5_0_error == 1'b1) begin

      	if (refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[5:0] -  %b", REFSEL[5:0]);
      
      end
   end 

 reg refselse_valid;
  initial
  begin
    refselse_valid = 1'b1;
  end
 // check if REFSELSE is being driven to a valid state
  always @(REFSELSE[5:0]) begin
      case (REFSELSE[5:0])
        6'b000000 	: refselse_valid = 1'b1;
	6'b000001 	: refselse_valid = 1'b1;
	6'b000010 	: refselse_valid = 1'b1;
	6'b000011 	: refselse_valid = 1'b1;
	6'b000100 	: refselse_valid = 1'b1;
	6'b000101 	: refselse_valid = 1'b1;
	6'b000110 	: refselse_valid = 1'b1;
	6'b000111 	: refselse_valid = 1'b1;
	6'b001000 	: refselse_valid = 1'b1;
	6'b001001 	: refselse_valid = 1'b1;
	6'b001010 	: refselse_valid = 1'b1;
	6'b001011 	: refselse_valid = 1'b1;
	6'b001100 	: refselse_valid = 1'b1;
	6'b001101 	: refselse_valid = 1'b1;
	6'b001110 	: refselse_valid = 1'b1;
	6'b001111 	: refselse_valid = 1'b1;
	6'b010000 	: refselse_valid = 1'b1;
	6'b010001 	: refselse_valid = 1'b1;
	6'b010010 	: refselse_valid = 1'b1;
	6'b010011 	: refselse_valid = 1'b1;
	6'b010100 	: refselse_valid = 1'b1;
	6'b010101 	: refselse_valid = 1'b1;
	6'b010110 	: refselse_valid = 1'b1;
	6'b010111 	: refselse_valid = 1'b1;
	6'b011000 	: refselse_valid = 1'b1;
	6'b011001 	: refselse_valid = 1'b1;
	6'b011010 	: refselse_valid = 1'b1;
	6'b011011 	: refselse_valid = 1'b1;
	6'b011100 	: refselse_valid = 1'b1;
	6'b011101 	: refselse_valid = 1'b1;
	6'b011110 	: refselse_valid = 1'b1;
	6'b011111 	: refselse_valid = 1'b1;
	6'b100000 	: refselse_valid = 1'b1;
	6'b100001 	: refselse_valid = 1'b1;
	6'b100010 	: refselse_valid = 1'b1;
	6'b100011 	: refselse_valid = 1'b1;
	6'b100100 	: refselse_valid = 1'b1;
	6'b100101 	: refselse_valid = 1'b1;
	6'b100110 	: refselse_valid = 1'b1;
	6'b100111 	: refselse_valid = 1'b1;
	6'b101000 	: refselse_valid = 1'b1;
	6'b101001 	: refselse_valid = 1'b1;
	6'b101010 	: refselse_valid = 1'b1;
	6'b101011 	: refselse_valid = 1'b1;
	6'b101100 	: refselse_valid = 1'b1;
	6'b101101 	: refselse_valid = 1'b1;
	6'b101110 	: refselse_valid = 1'b1;
	6'b101111 	: refselse_valid = 1'b1;
	6'b110000 	: refselse_valid = 1'b1;
	6'b110001 	: refselse_valid = 1'b1;
	6'b110010 	: refselse_valid = 1'b1;
	6'b110011 	: refselse_valid = 1'b1;
	6'b110100 	: refselse_valid = 1'b1;
	6'b110101 	: refselse_valid = 1'b1;
	6'b110110 	: refselse_valid = 1'b1;
	6'b110111 	: refselse_valid = 1'b1;
	6'b111000 	: refselse_valid = 1'b1;
	6'b111001 	: refselse_valid = 1'b1;
	6'b111010 	: refselse_valid = 1'b1;
	6'b111011 	: refselse_valid = 1'b1;
	6'b111100 	: refselse_valid = 1'b1;
	6'b111101 	: refselse_valid = 1'b1;
	6'b111110 	: refselse_valid = 1'b1;
	6'b111111 	: refselse_valid = 1'b1;
	default 	: refselse_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSELSE_5_0_ERR_AT_START = 0.001;  // disable REFSELSE[5:0] errors for first picosecond

//  generate the signal to gate off REFSELSE[5:0] errors for the first picosecond of simulation

  reg gate_refselse_5_0_error;

  initial 
  begin
	gate_refselse_5_0_error = 1'b0;
  end

always@(REFSELSE[5:0]) begin

   if (gate_refselse_5_0_error == 1'b0) begin

      gate_refselse_5_0_error <= #( PREVENT_REFSELSE_5_0_ERR_AT_START)  1'b1;

   end

end

 
  always @(refselse_valid)

   begin

      if (gate_refselse_5_0_error == 1'b1) begin

      	if (refselse_valid === 1'b0) $display("ERROR: Incorrect value on REFSELSE[5:0] -  %b", REFSELSE[5:0]);
      
      end
   end 
   

   // select one of MVREF[3:0] to PAD
 /* always @(ENPAD_ret) begin
  if (ENPAD_ret == 1'b1) begin
  	case (VRMON_ret[1:0])
  		2'b00   : assign PAD_internal = MVREF[0];
  		2'b01   : assign PAD_internal = MVREF[1];
  		2'b10   : assign PAD_internal = MVREF[2];
  		2'b11   : assign PAD_internal = MVREF[3];
  		default : assign PAD_internal = MVREF[0];
  	endcase
  end	
  else assign PAD_internal = 1'bz;
    
  end*/
  
  
`ifdef DWC_DDRPHY_ATPG_MODEL
 bufif1 (PAD_internal, MVREF[0], ENPAD_ret); 
`else
 assign PAD_internal = (ENPAD_ret)?((!VRMON_ret[1] && !VRMON_ret[0])? MVREF[0]:(!VRMON_ret[1] && VRMON_ret[0])? MVREF[1]:(VRMON_ret[1] && !VRMON_ret[0])? MVREF[2]:(VRMON_ret[1] && VRMON_ret[0])? MVREF[3]: MVREF[0]):1'bz;
`endif
  
//  buf (PAD, PAD_internal);
    
`ifdef DWC_DDRPHY_ATPG_MODEL
 bufif1 (MVREF[0], 1'b1, REFEN_ret);
 buf (PAD, PAD_internal);
`else
// bufif1 (MVREF[0], 1'b1, REFEN_ret);
// bufif1 (MVREF[0], PAD, ENPAD_ret);

 assign MVREF[0]=(!VRMON_ret[1] && !VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;
 assign MVREF[1]=(!VRMON_ret[1] && VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;
 assign MVREF[2]=(VRMON_ret[1] && !VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;
 assign MVREF[3]=(VRMON_ret[1] && VRMON_ret[0])?((!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1):1'bz;

 assign PAD = (REFEN_ret) ? PAD_internal:1'bz;
`endif


bufif1 (MVREFSE, 1'b1, REFENSE_ret);

`ifdef DWC_DDRPHY_ATPG_MODEL
  assign zioh_3 = 18'b000000000000000_000;
  assign zioh_2 = 18'b000000000000000_000;
  assign zioh_1 = 18'b000000000111111_000;
  assign zioh_0 = 18'b000000000111111_000;
`else
  always @(ZCTRL[27:21]) begin
      case (ZCTRL[27:21])
         7'b0000_000 : zioh_3 = 18'b000000000000000_000;
         7'b0000_001 : zioh_3 = 18'b000000000000000_001;
         7'b0000_010 : zioh_3 = 18'b000000000000000_010;
         7'b0000_011 : zioh_3 = 18'b000000000000000_011;
         7'b0000_100 : zioh_3 = 18'b000000000000000_100;
         7'b0000_101 : zioh_3 = 18'b000000000000000_101;
         7'b0000_110 : zioh_3 = 18'b000000000000000_110;
         7'b0000_111 : zioh_3 = 18'b000000000000000_111;
         7'b0001_000 : zioh_3 = 18'b000000000000001_000;
         7'b0001_001 : zioh_3 = 18'b000000000000001_001;
         7'b0001_010 : zioh_3 = 18'b000000000000001_010;
         7'b0001_011 : zioh_3 = 18'b000000000000001_011;
         7'b0001_100 : zioh_3 = 18'b000000000000001_100;
         7'b0001_101 : zioh_3 = 18'b000000000000001_101;
         7'b0001_110 : zioh_3 = 18'b000000000000001_110;
         7'b0001_111 : zioh_3 = 18'b000000000000001_111;
         7'b0010_000 : zioh_3 = 18'b000000000000011_000;
         7'b0010_001 : zioh_3 = 18'b000000000000011_001;
         7'b0010_010 : zioh_3 = 18'b000000000000011_010;
         7'b0010_011 : zioh_3 = 18'b000000000000011_011;
         7'b0010_100 : zioh_3 = 18'b000000000000011_100;
         7'b0010_101 : zioh_3 = 18'b000000000000011_101;
         7'b0010_110 : zioh_3 = 18'b000000000000011_110;
         7'b0010_111 : zioh_3 = 18'b000000000000011_111;
         7'b0011_000 : zioh_3 = 18'b000000000000111_000;
         7'b0011_001 : zioh_3 = 18'b000000000000111_001;
         7'b0011_010 : zioh_3 = 18'b000000000000111_010;
         7'b0011_011 : zioh_3 = 18'b000000000000111_011;
         7'b0011_100 : zioh_3 = 18'b000000000000111_100;
         7'b0011_101 : zioh_3 = 18'b000000000000111_101;
         7'b0011_110 : zioh_3 = 18'b000000000000111_110;
         7'b0011_111 : zioh_3 = 18'b000000000000111_111;
         7'b0100_000 : zioh_3 = 18'b000000000001111_000;
         7'b0100_001 : zioh_3 = 18'b000000000001111_001;
         7'b0100_010 : zioh_3 = 18'b000000000001111_010;
         7'b0100_011 : zioh_3 = 18'b000000000001111_011;
         7'b0100_100 : zioh_3 = 18'b000000000001111_100;
         7'b0100_101 : zioh_3 = 18'b000000000001111_101;
         7'b0100_110 : zioh_3 = 18'b000000000001111_110;
         7'b0100_111 : zioh_3 = 18'b000000000001111_111;
         7'b0101_000 : zioh_3 = 18'b000000000011111_000;
         7'b0101_001 : zioh_3 = 18'b000000000011111_001;
         7'b0101_010 : zioh_3 = 18'b000000000011111_010;
         7'b0101_011 : zioh_3 = 18'b000000000011111_011;
         7'b0101_100 : zioh_3 = 18'b000000000011111_100;
         7'b0101_101 : zioh_3 = 18'b000000000011111_101;
         7'b0101_110 : zioh_3 = 18'b000000000011111_110;
         7'b0101_111 : zioh_3 = 18'b000000000011111_111;
         7'b0110_000 : zioh_3 = 18'b000000000111111_000;
         7'b0110_001 : zioh_3 = 18'b000000000111111_001;
         7'b0110_010 : zioh_3 = 18'b000000000111111_010;
         7'b0110_011 : zioh_3 = 18'b000000000111111_011;
         7'b0110_100 : zioh_3 = 18'b000000000111111_100;
         7'b0110_101 : zioh_3 = 18'b000000000111111_101;
         7'b0110_110 : zioh_3 = 18'b000000000111111_110;
         7'b0110_111 : zioh_3 = 18'b000000000111111_111;
         7'b0111_000 : zioh_3 = 18'b000000001111111_000;
         7'b0111_001 : zioh_3 = 18'b000000001111111_001;
         7'b0111_010 : zioh_3 = 18'b000000001111111_010;
         7'b0111_011 : zioh_3 = 18'b000000001111111_011;
         7'b0111_100 : zioh_3 = 18'b000000001111111_100;
         7'b0111_101 : zioh_3 = 18'b000000001111111_101;
         7'b0111_110 : zioh_3 = 18'b000000001111111_110;
         7'b0111_111 : zioh_3 = 18'b000000001111111_111;
         7'b1000_000 : zioh_3 = 18'b000000011111111_000;
         7'b1000_001 : zioh_3 = 18'b000000011111111_001;
         7'b1000_010 : zioh_3 = 18'b000000011111111_010;
         7'b1000_011 : zioh_3 = 18'b000000011111111_011;
         7'b1000_100 : zioh_3 = 18'b000000011111111_100;
         7'b1000_101 : zioh_3 = 18'b000000011111111_101;
         7'b1000_110 : zioh_3 = 18'b000000011111111_110;
         7'b1000_111 : zioh_3 = 18'b000000011111111_111;
         7'b1001_000 : zioh_3 = 18'b000000111111111_000;
         7'b1001_001 : zioh_3 = 18'b000000111111111_001;
         7'b1001_010 : zioh_3 = 18'b000000111111111_010;
         7'b1001_011 : zioh_3 = 18'b000000111111111_011;
         7'b1001_100 : zioh_3 = 18'b000000111111111_100;
         7'b1001_101 : zioh_3 = 18'b000000111111111_101;
         7'b1001_110 : zioh_3 = 18'b000000111111111_110;
         7'b1001_111 : zioh_3 = 18'b000000111111111_111;
         7'b1010_000 : zioh_3 = 18'b000001111111111_000;
         7'b1010_001 : zioh_3 = 18'b000001111111111_001;
         7'b1010_010 : zioh_3 = 18'b000001111111111_010;
         7'b1010_011 : zioh_3 = 18'b000001111111111_011;
         7'b1010_100 : zioh_3 = 18'b000001111111111_100;
         7'b1010_101 : zioh_3 = 18'b000001111111111_101;
         7'b1010_110 : zioh_3 = 18'b000001111111111_110;
         7'b1010_111 : zioh_3 = 18'b000001111111111_111;
         7'b1011_000 : zioh_3 = 18'b000011111111111_000;
         7'b1011_001 : zioh_3 = 18'b000011111111111_001;
         7'b1011_010 : zioh_3 = 18'b000011111111111_010;
         7'b1011_011 : zioh_3 = 18'b000011111111111_011;
         7'b1011_100 : zioh_3 = 18'b000011111111111_100;
         7'b1011_101 : zioh_3 = 18'b000011111111111_101;
         7'b1011_110 : zioh_3 = 18'b000011111111111_110;
         7'b1011_111 : zioh_3 = 18'b000011111111111_111;
         7'b1100_000 : zioh_3 = 18'b000111111111111_000;
         7'b1100_001 : zioh_3 = 18'b000111111111111_001;
         7'b1100_010 : zioh_3 = 18'b000111111111111_010;
         7'b1100_011 : zioh_3 = 18'b000111111111111_011;
         7'b1100_100 : zioh_3 = 18'b000111111111111_100;
         7'b1100_101 : zioh_3 = 18'b000111111111111_101;
         7'b1100_110 : zioh_3 = 18'b000111111111111_110;
         7'b1100_111 : zioh_3 = 18'b000111111111111_111;
         7'b1101_000 : zioh_3 = 18'b001111111111111_000;
         7'b1101_001 : zioh_3 = 18'b001111111111111_001;
         7'b1101_010 : zioh_3 = 18'b001111111111111_010;
         7'b1101_011 : zioh_3 = 18'b001111111111111_011;
         7'b1101_100 : zioh_3 = 18'b001111111111111_100;
         7'b1101_101 : zioh_3 = 18'b001111111111111_101;
         7'b1101_110 : zioh_3 = 18'b001111111111111_110;
         7'b1101_111 : zioh_3 = 18'b001111111111111_111;
         7'b1110_000 : zioh_3 = 18'b011111111111111_000;
         7'b1110_001 : zioh_3 = 18'b011111111111111_001;
         7'b1110_010 : zioh_3 = 18'b011111111111111_010;
         7'b1110_011 : zioh_3 = 18'b011111111111111_011;
         7'b1110_100 : zioh_3 = 18'b011111111111111_100;
         7'b1110_101 : zioh_3 = 18'b011111111111111_101;
         7'b1110_110 : zioh_3 = 18'b011111111111111_110;
         7'b1110_111 : zioh_3 = 18'b011111111111111_111;
         7'b1111_000 : zioh_3 = 18'b111111111111111_000;
         7'b1111_001 : zioh_3 = 18'b111111111111111_001;
         7'b1111_010 : zioh_3 = 18'b111111111111111_010;
         7'b1111_011 : zioh_3 = 18'b111111111111111_011;
         7'b1111_100 : zioh_3 = 18'b111111111111111_100;
         7'b1111_101 : zioh_3 = 18'b111111111111111_101;
         7'b1111_110 : zioh_3 = 18'b111111111111111_110;
         7'b1111_111 : zioh_3 = 18'b111111111111111_111;
         default     : zioh_3 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[20:14]) begin
      case (ZCTRL[20:14])
         7'b0000_000 : zioh_2 = 18'b000000000000000_000;
         7'b0000_001 : zioh_2 = 18'b000000000000000_001;
         7'b0000_010 : zioh_2 = 18'b000000000000000_010;
         7'b0000_011 : zioh_2 = 18'b000000000000000_011;
         7'b0000_100 : zioh_2 = 18'b000000000000000_100;
         7'b0000_101 : zioh_2 = 18'b000000000000000_101;
         7'b0000_110 : zioh_2 = 18'b000000000000000_110;
         7'b0000_111 : zioh_2 = 18'b000000000000000_111;
         7'b0001_000 : zioh_2 = 18'b000000000000001_000;
         7'b0001_001 : zioh_2 = 18'b000000000000001_001;
         7'b0001_010 : zioh_2 = 18'b000000000000001_010;
         7'b0001_011 : zioh_2 = 18'b000000000000001_011;
         7'b0001_100 : zioh_2 = 18'b000000000000001_100;
         7'b0001_101 : zioh_2 = 18'b000000000000001_101;
         7'b0001_110 : zioh_2 = 18'b000000000000001_110;
         7'b0001_111 : zioh_2 = 18'b000000000000001_111;
         7'b0010_000 : zioh_2 = 18'b000000000000011_000;
         7'b0010_001 : zioh_2 = 18'b000000000000011_001;
         7'b0010_010 : zioh_2 = 18'b000000000000011_010;
         7'b0010_011 : zioh_2 = 18'b000000000000011_011;
         7'b0010_100 : zioh_2 = 18'b000000000000011_100;
         7'b0010_101 : zioh_2 = 18'b000000000000011_101;
         7'b0010_110 : zioh_2 = 18'b000000000000011_110;
         7'b0010_111 : zioh_2 = 18'b000000000000011_111;
         7'b0011_000 : zioh_2 = 18'b000000000000111_000;
         7'b0011_001 : zioh_2 = 18'b000000000000111_001;
         7'b0011_010 : zioh_2 = 18'b000000000000111_010;
         7'b0011_011 : zioh_2 = 18'b000000000000111_011;
         7'b0011_100 : zioh_2 = 18'b000000000000111_100;
         7'b0011_101 : zioh_2 = 18'b000000000000111_101;
         7'b0011_110 : zioh_2 = 18'b000000000000111_110;
         7'b0011_111 : zioh_2 = 18'b000000000000111_111;
         7'b0100_000 : zioh_2 = 18'b000000000001111_000;
         7'b0100_001 : zioh_2 = 18'b000000000001111_001;
         7'b0100_010 : zioh_2 = 18'b000000000001111_010;
         7'b0100_011 : zioh_2 = 18'b000000000001111_011;
         7'b0100_100 : zioh_2 = 18'b000000000001111_100;
         7'b0100_101 : zioh_2 = 18'b000000000001111_101;
         7'b0100_110 : zioh_2 = 18'b000000000001111_110;
         7'b0100_111 : zioh_2 = 18'b000000000001111_111;
         7'b0101_000 : zioh_2 = 18'b000000000011111_000;
         7'b0101_001 : zioh_2 = 18'b000000000011111_001;
         7'b0101_010 : zioh_2 = 18'b000000000011111_010;
         7'b0101_011 : zioh_2 = 18'b000000000011111_011;
         7'b0101_100 : zioh_2 = 18'b000000000011111_100;
         7'b0101_101 : zioh_2 = 18'b000000000011111_101;
         7'b0101_110 : zioh_2 = 18'b000000000011111_110;
         7'b0101_111 : zioh_2 = 18'b000000000011111_111;
         7'b0110_000 : zioh_2 = 18'b000000000111111_000;
         7'b0110_001 : zioh_2 = 18'b000000000111111_001;
         7'b0110_010 : zioh_2 = 18'b000000000111111_010;
         7'b0110_011 : zioh_2 = 18'b000000000111111_011;
         7'b0110_100 : zioh_2 = 18'b000000000111111_100;
         7'b0110_101 : zioh_2 = 18'b000000000111111_101;
         7'b0110_110 : zioh_2 = 18'b000000000111111_110;
         7'b0110_111 : zioh_2 = 18'b000000000111111_111;
         7'b0111_000 : zioh_2 = 18'b000000001111111_000;
         7'b0111_001 : zioh_2 = 18'b000000001111111_001;
         7'b0111_010 : zioh_2 = 18'b000000001111111_010;
         7'b0111_011 : zioh_2 = 18'b000000001111111_011;
         7'b0111_100 : zioh_2 = 18'b000000001111111_100;
         7'b0111_101 : zioh_2 = 18'b000000001111111_101;
         7'b0111_110 : zioh_2 = 18'b000000001111111_110;
         7'b0111_111 : zioh_2 = 18'b000000001111111_111;
         7'b1000_000 : zioh_2 = 18'b000000011111111_000;
         7'b1000_001 : zioh_2 = 18'b000000011111111_001;
         7'b1000_010 : zioh_2 = 18'b000000011111111_010;
         7'b1000_011 : zioh_2 = 18'b000000011111111_011;
         7'b1000_100 : zioh_2 = 18'b000000011111111_100;
         7'b1000_101 : zioh_2 = 18'b000000011111111_101;
         7'b1000_110 : zioh_2 = 18'b000000011111111_110;
         7'b1000_111 : zioh_2 = 18'b000000011111111_111;
         7'b1001_000 : zioh_2 = 18'b000000111111111_000;
         7'b1001_001 : zioh_2 = 18'b000000111111111_001;
         7'b1001_010 : zioh_2 = 18'b000000111111111_010;
         7'b1001_011 : zioh_2 = 18'b000000111111111_011;
         7'b1001_100 : zioh_2 = 18'b000000111111111_100;
         7'b1001_101 : zioh_2 = 18'b000000111111111_101;
         7'b1001_110 : zioh_2 = 18'b000000111111111_110;
         7'b1001_111 : zioh_2 = 18'b000000111111111_111;
         7'b1010_000 : zioh_2 = 18'b000001111111111_000;
         7'b1010_001 : zioh_2 = 18'b000001111111111_001;
         7'b1010_010 : zioh_2 = 18'b000001111111111_010;
         7'b1010_011 : zioh_2 = 18'b000001111111111_011;
         7'b1010_100 : zioh_2 = 18'b000001111111111_100;
         7'b1010_101 : zioh_2 = 18'b000001111111111_101;
         7'b1010_110 : zioh_2 = 18'b000001111111111_110;
         7'b1010_111 : zioh_2 = 18'b000001111111111_111;
         7'b1011_000 : zioh_2 = 18'b000011111111111_000;
         7'b1011_001 : zioh_2 = 18'b000011111111111_001;
         7'b1011_010 : zioh_2 = 18'b000011111111111_010;
         7'b1011_011 : zioh_2 = 18'b000011111111111_011;
         7'b1011_100 : zioh_2 = 18'b000011111111111_100;
         7'b1011_101 : zioh_2 = 18'b000011111111111_101;
         7'b1011_110 : zioh_2 = 18'b000011111111111_110;
         7'b1011_111 : zioh_2 = 18'b000011111111111_111;
         7'b1100_000 : zioh_2 = 18'b000111111111111_000;
         7'b1100_001 : zioh_2 = 18'b000111111111111_001;
         7'b1100_010 : zioh_2 = 18'b000111111111111_010;
         7'b1100_011 : zioh_2 = 18'b000111111111111_011;
         7'b1100_100 : zioh_2 = 18'b000111111111111_100;
         7'b1100_101 : zioh_2 = 18'b000111111111111_101;
         7'b1100_110 : zioh_2 = 18'b000111111111111_110;
         7'b1100_111 : zioh_2 = 18'b000111111111111_111;
         7'b1101_000 : zioh_2 = 18'b001111111111111_000;
         7'b1101_001 : zioh_2 = 18'b001111111111111_001;
         7'b1101_010 : zioh_2 = 18'b001111111111111_010;
         7'b1101_011 : zioh_2 = 18'b001111111111111_011;
         7'b1101_100 : zioh_2 = 18'b001111111111111_100;
         7'b1101_101 : zioh_2 = 18'b001111111111111_101;
         7'b1101_110 : zioh_2 = 18'b001111111111111_110;
         7'b1101_111 : zioh_2 = 18'b001111111111111_111;
         7'b1110_000 : zioh_2 = 18'b011111111111111_000;
         7'b1110_001 : zioh_2 = 18'b011111111111111_001;
         7'b1110_010 : zioh_2 = 18'b011111111111111_010;
         7'b1110_011 : zioh_2 = 18'b011111111111111_011;
         7'b1110_100 : zioh_2 = 18'b011111111111111_100;
         7'b1110_101 : zioh_2 = 18'b011111111111111_101;
         7'b1110_110 : zioh_2 = 18'b011111111111111_110;
         7'b1110_111 : zioh_2 = 18'b011111111111111_111;
         7'b1111_000 : zioh_2 = 18'b111111111111111_000;
         7'b1111_001 : zioh_2 = 18'b111111111111111_001;
         7'b1111_010 : zioh_2 = 18'b111111111111111_010;
         7'b1111_011 : zioh_2 = 18'b111111111111111_011;
         7'b1111_100 : zioh_2 = 18'b111111111111111_100;
         7'b1111_101 : zioh_2 = 18'b111111111111111_101;
         7'b1111_110 : zioh_2 = 18'b111111111111111_110;
         7'b1111_111 : zioh_2 = 18'b111111111111111_111;
         default     : zioh_2 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[13:7]) begin
      case (ZCTRL[13:7])
         7'b0000_000 : zioh_1 = 18'b000000000000000_000;
         7'b0000_001 : zioh_1 = 18'b000000000000000_001;
         7'b0000_010 : zioh_1 = 18'b000000000000000_010;
         7'b0000_011 : zioh_1 = 18'b000000000000000_011;
         7'b0000_100 : zioh_1 = 18'b000000000000000_100;
         7'b0000_101 : zioh_1 = 18'b000000000000000_101;
         7'b0000_110 : zioh_1 = 18'b000000000000000_110;
         7'b0000_111 : zioh_1 = 18'b000000000000000_111;
         7'b0001_000 : zioh_1 = 18'b000000000000001_000;
         7'b0001_001 : zioh_1 = 18'b000000000000001_001;
         7'b0001_010 : zioh_1 = 18'b000000000000001_010;
         7'b0001_011 : zioh_1 = 18'b000000000000001_011;
         7'b0001_100 : zioh_1 = 18'b000000000000001_100;
         7'b0001_101 : zioh_1 = 18'b000000000000001_101;
         7'b0001_110 : zioh_1 = 18'b000000000000001_110;
         7'b0001_111 : zioh_1 = 18'b000000000000001_111;
         7'b0010_000 : zioh_1 = 18'b000000000000011_000;
         7'b0010_001 : zioh_1 = 18'b000000000000011_001;
         7'b0010_010 : zioh_1 = 18'b000000000000011_010;
         7'b0010_011 : zioh_1 = 18'b000000000000011_011;
         7'b0010_100 : zioh_1 = 18'b000000000000011_100;
         7'b0010_101 : zioh_1 = 18'b000000000000011_101;
         7'b0010_110 : zioh_1 = 18'b000000000000011_110;
         7'b0010_111 : zioh_1 = 18'b000000000000011_111;
         7'b0011_000 : zioh_1 = 18'b000000000000111_000;
         7'b0011_001 : zioh_1 = 18'b000000000000111_001;
         7'b0011_010 : zioh_1 = 18'b000000000000111_010;
         7'b0011_011 : zioh_1 = 18'b000000000000111_011;
         7'b0011_100 : zioh_1 = 18'b000000000000111_100;
         7'b0011_101 : zioh_1 = 18'b000000000000111_101;
         7'b0011_110 : zioh_1 = 18'b000000000000111_110;
         7'b0011_111 : zioh_1 = 18'b000000000000111_111;
         7'b0100_000 : zioh_1 = 18'b000000000001111_000;
         7'b0100_001 : zioh_1 = 18'b000000000001111_001;
         7'b0100_010 : zioh_1 = 18'b000000000001111_010;
         7'b0100_011 : zioh_1 = 18'b000000000001111_011;
         7'b0100_100 : zioh_1 = 18'b000000000001111_100;
         7'b0100_101 : zioh_1 = 18'b000000000001111_101;
         7'b0100_110 : zioh_1 = 18'b000000000001111_110;
         7'b0100_111 : zioh_1 = 18'b000000000001111_111;
         7'b0101_000 : zioh_1 = 18'b000000000011111_000;
         7'b0101_001 : zioh_1 = 18'b000000000011111_001;
         7'b0101_010 : zioh_1 = 18'b000000000011111_010;
         7'b0101_011 : zioh_1 = 18'b000000000011111_011;
         7'b0101_100 : zioh_1 = 18'b000000000011111_100;
         7'b0101_101 : zioh_1 = 18'b000000000011111_101;
         7'b0101_110 : zioh_1 = 18'b000000000011111_110;
         7'b0101_111 : zioh_1 = 18'b000000000011111_111;
         7'b0110_000 : zioh_1 = 18'b000000000111111_000;
         7'b0110_001 : zioh_1 = 18'b000000000111111_001;
         7'b0110_010 : zioh_1 = 18'b000000000111111_010;
         7'b0110_011 : zioh_1 = 18'b000000000111111_011;
         7'b0110_100 : zioh_1 = 18'b000000000111111_100;
         7'b0110_101 : zioh_1 = 18'b000000000111111_101;
         7'b0110_110 : zioh_1 = 18'b000000000111111_110;
         7'b0110_111 : zioh_1 = 18'b000000000111111_111;
         7'b0111_000 : zioh_1 = 18'b000000001111111_000;
         7'b0111_001 : zioh_1 = 18'b000000001111111_001;
         7'b0111_010 : zioh_1 = 18'b000000001111111_010;
         7'b0111_011 : zioh_1 = 18'b000000001111111_011;
         7'b0111_100 : zioh_1 = 18'b000000001111111_100;
         7'b0111_101 : zioh_1 = 18'b000000001111111_101;
         7'b0111_110 : zioh_1 = 18'b000000001111111_110;
         7'b0111_111 : zioh_1 = 18'b000000001111111_111;
         7'b1000_000 : zioh_1 = 18'b000000011111111_000;
         7'b1000_001 : zioh_1 = 18'b000000011111111_001;
         7'b1000_010 : zioh_1 = 18'b000000011111111_010;
         7'b1000_011 : zioh_1 = 18'b000000011111111_011;
         7'b1000_100 : zioh_1 = 18'b000000011111111_100;
         7'b1000_101 : zioh_1 = 18'b000000011111111_101;
         7'b1000_110 : zioh_1 = 18'b000000011111111_110;
         7'b1000_111 : zioh_1 = 18'b000000011111111_111;
         7'b1001_000 : zioh_1 = 18'b000000111111111_000;
         7'b1001_001 : zioh_1 = 18'b000000111111111_001;
         7'b1001_010 : zioh_1 = 18'b000000111111111_010;
         7'b1001_011 : zioh_1 = 18'b000000111111111_011;
         7'b1001_100 : zioh_1 = 18'b000000111111111_100;
         7'b1001_101 : zioh_1 = 18'b000000111111111_101;
         7'b1001_110 : zioh_1 = 18'b000000111111111_110;
         7'b1001_111 : zioh_1 = 18'b000000111111111_111;
         7'b1010_000 : zioh_1 = 18'b000001111111111_000;
         7'b1010_001 : zioh_1 = 18'b000001111111111_001;
         7'b1010_010 : zioh_1 = 18'b000001111111111_010;
         7'b1010_011 : zioh_1 = 18'b000001111111111_011;
         7'b1010_100 : zioh_1 = 18'b000001111111111_100;
         7'b1010_101 : zioh_1 = 18'b000001111111111_101;
         7'b1010_110 : zioh_1 = 18'b000001111111111_110;
         7'b1010_111 : zioh_1 = 18'b000001111111111_111;
         7'b1011_000 : zioh_1 = 18'b000011111111111_000;
         7'b1011_001 : zioh_1 = 18'b000011111111111_001;
         7'b1011_010 : zioh_1 = 18'b000011111111111_010;
         7'b1011_011 : zioh_1 = 18'b000011111111111_011;
         7'b1011_100 : zioh_1 = 18'b000011111111111_100;
         7'b1011_101 : zioh_1 = 18'b000011111111111_101;
         7'b1011_110 : zioh_1 = 18'b000011111111111_110;
         7'b1011_111 : zioh_1 = 18'b000011111111111_111;
         7'b1100_000 : zioh_1 = 18'b000111111111111_000;
         7'b1100_001 : zioh_1 = 18'b000111111111111_001;
         7'b1100_010 : zioh_1 = 18'b000111111111111_010;
         7'b1100_011 : zioh_1 = 18'b000111111111111_011;
         7'b1100_100 : zioh_1 = 18'b000111111111111_100;
         7'b1100_101 : zioh_1 = 18'b000111111111111_101;
         7'b1100_110 : zioh_1 = 18'b000111111111111_110;
         7'b1100_111 : zioh_1 = 18'b000111111111111_111;
         7'b1101_000 : zioh_1 = 18'b001111111111111_000;
         7'b1101_001 : zioh_1 = 18'b001111111111111_001;
         7'b1101_010 : zioh_1 = 18'b001111111111111_010;
         7'b1101_011 : zioh_1 = 18'b001111111111111_011;
         7'b1101_100 : zioh_1 = 18'b001111111111111_100;
         7'b1101_101 : zioh_1 = 18'b001111111111111_101;
         7'b1101_110 : zioh_1 = 18'b001111111111111_110;
         7'b1101_111 : zioh_1 = 18'b001111111111111_111;
         7'b1110_000 : zioh_1 = 18'b011111111111111_000;
         7'b1110_001 : zioh_1 = 18'b011111111111111_001;
         7'b1110_010 : zioh_1 = 18'b011111111111111_010;
         7'b1110_011 : zioh_1 = 18'b011111111111111_011;
         7'b1110_100 : zioh_1 = 18'b011111111111111_100;
         7'b1110_101 : zioh_1 = 18'b011111111111111_101;
         7'b1110_110 : zioh_1 = 18'b011111111111111_110;
         7'b1110_111 : zioh_1 = 18'b011111111111111_111;
         7'b1111_000 : zioh_1 = 18'b111111111111111_000;
         7'b1111_001 : zioh_1 = 18'b111111111111111_001;
         7'b1111_010 : zioh_1 = 18'b111111111111111_010;
         7'b1111_011 : zioh_1 = 18'b111111111111111_011;
         7'b1111_100 : zioh_1 = 18'b111111111111111_100;
         7'b1111_101 : zioh_1 = 18'b111111111111111_101;
         7'b1111_110 : zioh_1 = 18'b111111111111111_110;
         7'b1111_111 : zioh_1 = 18'b111111111111111_111;
         default     : zioh_1 = 18'b000000000111111_000;
      endcase
  end

  always @(ZCTRL[6:0]) begin
      case (ZCTRL[6:0])
         7'b0000_000 : zioh_0 = 18'b000000000000000_000;
         7'b0000_001 : zioh_0 = 18'b000000000000000_001;
         7'b0000_010 : zioh_0 = 18'b000000000000000_010;
         7'b0000_011 : zioh_0 = 18'b000000000000000_011;
         7'b0000_100 : zioh_0 = 18'b000000000000000_100;
         7'b0000_101 : zioh_0 = 18'b000000000000000_101;
         7'b0000_110 : zioh_0 = 18'b000000000000000_110;
         7'b0000_111 : zioh_0 = 18'b000000000000000_111;
         7'b0001_000 : zioh_0 = 18'b000000000000001_000;
         7'b0001_001 : zioh_0 = 18'b000000000000001_001;
         7'b0001_010 : zioh_0 = 18'b000000000000001_010;
         7'b0001_011 : zioh_0 = 18'b000000000000001_011;
         7'b0001_100 : zioh_0 = 18'b000000000000001_100;
         7'b0001_101 : zioh_0 = 18'b000000000000001_101;
         7'b0001_110 : zioh_0 = 18'b000000000000001_110;
         7'b0001_111 : zioh_0 = 18'b000000000000001_111;
         7'b0010_000 : zioh_0 = 18'b000000000000011_000;
         7'b0010_001 : zioh_0 = 18'b000000000000011_001;
         7'b0010_010 : zioh_0 = 18'b000000000000011_010;
         7'b0010_011 : zioh_0 = 18'b000000000000011_011;
         7'b0010_100 : zioh_0 = 18'b000000000000011_100;
         7'b0010_101 : zioh_0 = 18'b000000000000011_101;
         7'b0010_110 : zioh_0 = 18'b000000000000011_110;
         7'b0010_111 : zioh_0 = 18'b000000000000011_111;
         7'b0011_000 : zioh_0 = 18'b000000000000111_000;
         7'b0011_001 : zioh_0 = 18'b000000000000111_001;
         7'b0011_010 : zioh_0 = 18'b000000000000111_010;
         7'b0011_011 : zioh_0 = 18'b000000000000111_011;
         7'b0011_100 : zioh_0 = 18'b000000000000111_100;
         7'b0011_101 : zioh_0 = 18'b000000000000111_101;
         7'b0011_110 : zioh_0 = 18'b000000000000111_110;
         7'b0011_111 : zioh_0 = 18'b000000000000111_111;
         7'b0100_000 : zioh_0 = 18'b000000000001111_000;
         7'b0100_001 : zioh_0 = 18'b000000000001111_001;
         7'b0100_010 : zioh_0 = 18'b000000000001111_010;
         7'b0100_011 : zioh_0 = 18'b000000000001111_011;
         7'b0100_100 : zioh_0 = 18'b000000000001111_100;
         7'b0100_101 : zioh_0 = 18'b000000000001111_101;
         7'b0100_110 : zioh_0 = 18'b000000000001111_110;
         7'b0100_111 : zioh_0 = 18'b000000000001111_111;
         7'b0101_000 : zioh_0 = 18'b000000000011111_000;
         7'b0101_001 : zioh_0 = 18'b000000000011111_001;
         7'b0101_010 : zioh_0 = 18'b000000000011111_010;
         7'b0101_011 : zioh_0 = 18'b000000000011111_011;
         7'b0101_100 : zioh_0 = 18'b000000000011111_100;
         7'b0101_101 : zioh_0 = 18'b000000000011111_101;
         7'b0101_110 : zioh_0 = 18'b000000000011111_110;
         7'b0101_111 : zioh_0 = 18'b000000000011111_111;
         7'b0110_000 : zioh_0 = 18'b000000000111111_000;
         7'b0110_001 : zioh_0 = 18'b000000000111111_001;
         7'b0110_010 : zioh_0 = 18'b000000000111111_010;
         7'b0110_011 : zioh_0 = 18'b000000000111111_011;
         7'b0110_100 : zioh_0 = 18'b000000000111111_100;
         7'b0110_101 : zioh_0 = 18'b000000000111111_101;
         7'b0110_110 : zioh_0 = 18'b000000000111111_110;
         7'b0110_111 : zioh_0 = 18'b000000000111111_111;
         7'b0111_000 : zioh_0 = 18'b000000001111111_000;
         7'b0111_001 : zioh_0 = 18'b000000001111111_001;
         7'b0111_010 : zioh_0 = 18'b000000001111111_010;
         7'b0111_011 : zioh_0 = 18'b000000001111111_011;
         7'b0111_100 : zioh_0 = 18'b000000001111111_100;
         7'b0111_101 : zioh_0 = 18'b000000001111111_101;
         7'b0111_110 : zioh_0 = 18'b000000001111111_110;
         7'b0111_111 : zioh_0 = 18'b000000001111111_111;
         7'b1000_000 : zioh_0 = 18'b000000011111111_000;
         7'b1000_001 : zioh_0 = 18'b000000011111111_001;
         7'b1000_010 : zioh_0 = 18'b000000011111111_010;
         7'b1000_011 : zioh_0 = 18'b000000011111111_011;
         7'b1000_100 : zioh_0 = 18'b000000011111111_100;
         7'b1000_101 : zioh_0 = 18'b000000011111111_101;
         7'b1000_110 : zioh_0 = 18'b000000011111111_110;
         7'b1000_111 : zioh_0 = 18'b000000011111111_111;
         7'b1001_000 : zioh_0 = 18'b000000111111111_000;
         7'b1001_001 : zioh_0 = 18'b000000111111111_001;
         7'b1001_010 : zioh_0 = 18'b000000111111111_010;
         7'b1001_011 : zioh_0 = 18'b000000111111111_011;
         7'b1001_100 : zioh_0 = 18'b000000111111111_100;
         7'b1001_101 : zioh_0 = 18'b000000111111111_101;
         7'b1001_110 : zioh_0 = 18'b000000111111111_110;
         7'b1001_111 : zioh_0 = 18'b000000111111111_111;
         7'b1010_000 : zioh_0 = 18'b000001111111111_000;
         7'b1010_001 : zioh_0 = 18'b000001111111111_001;
         7'b1010_010 : zioh_0 = 18'b000001111111111_010;
         7'b1010_011 : zioh_0 = 18'b000001111111111_011;
         7'b1010_100 : zioh_0 = 18'b000001111111111_100;
         7'b1010_101 : zioh_0 = 18'b000001111111111_101;
         7'b1010_110 : zioh_0 = 18'b000001111111111_110;
         7'b1010_111 : zioh_0 = 18'b000001111111111_111;
         7'b1011_000 : zioh_0 = 18'b000011111111111_000;
         7'b1011_001 : zioh_0 = 18'b000011111111111_001;
         7'b1011_010 : zioh_0 = 18'b000011111111111_010;
         7'b1011_011 : zioh_0 = 18'b000011111111111_011;
         7'b1011_100 : zioh_0 = 18'b000011111111111_100;
         7'b1011_101 : zioh_0 = 18'b000011111111111_101;
         7'b1011_110 : zioh_0 = 18'b000011111111111_110;
         7'b1011_111 : zioh_0 = 18'b000011111111111_111;
         7'b1100_000 : zioh_0 = 18'b000111111111111_000;
         7'b1100_001 : zioh_0 = 18'b000111111111111_001;
         7'b1100_010 : zioh_0 = 18'b000111111111111_010;
         7'b1100_011 : zioh_0 = 18'b000111111111111_011;
         7'b1100_100 : zioh_0 = 18'b000111111111111_100;
         7'b1100_101 : zioh_0 = 18'b000111111111111_101;
         7'b1100_110 : zioh_0 = 18'b000111111111111_110;
         7'b1100_111 : zioh_0 = 18'b000111111111111_111;
         7'b1101_000 : zioh_0 = 18'b001111111111111_000;
         7'b1101_001 : zioh_0 = 18'b001111111111111_001;
         7'b1101_010 : zioh_0 = 18'b001111111111111_010;
         7'b1101_011 : zioh_0 = 18'b001111111111111_011;
         7'b1101_100 : zioh_0 = 18'b001111111111111_100;
         7'b1101_101 : zioh_0 = 18'b001111111111111_101;
         7'b1101_110 : zioh_0 = 18'b001111111111111_110;
         7'b1101_111 : zioh_0 = 18'b001111111111111_111;
         7'b1110_000 : zioh_0 = 18'b011111111111111_000;
         7'b1110_001 : zioh_0 = 18'b011111111111111_001;
         7'b1110_010 : zioh_0 = 18'b011111111111111_010;
         7'b1110_011 : zioh_0 = 18'b011111111111111_011;
         7'b1110_100 : zioh_0 = 18'b011111111111111_100;
         7'b1110_101 : zioh_0 = 18'b011111111111111_101;
         7'b1110_110 : zioh_0 = 18'b011111111111111_110;
         7'b1110_111 : zioh_0 = 18'b011111111111111_111;
         7'b1111_000 : zioh_0 = 18'b111111111111111_000;
         7'b1111_001 : zioh_0 = 18'b111111111111111_001;
         7'b1111_010 : zioh_0 = 18'b111111111111111_010;
         7'b1111_011 : zioh_0 = 18'b111111111111111_011;
         7'b1111_100 : zioh_0 = 18'b111111111111111_100;
         7'b1111_101 : zioh_0 = 18'b111111111111111_101;
         7'b1111_110 : zioh_0 = 18'b111111111111111_110;
         7'b1111_111 : zioh_0 = 18'b111111111111111_111;
         default     : zioh_0 = 18'b000000000111111_000;
      endcase
  end
`endif

  specify
      (ZCTRL[0] *> ZIOH[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[1] *> ZIOH[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[2] *> ZIOH[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[3] *> ZIOH[17], ZIOH[15], ZIOH[13], ZIOH[11], ZIOH[9], ZIOH[7], ZIOH[5], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[4] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[5] *> ZIOH[17], ZIOH[16], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[6] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[10], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[7] *> ZIOH[18]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[8] *> ZIOH[19]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[9] *> ZIOH[20]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[10] *> ZIOH[35], ZIOH[33], ZIOH[31], ZIOH[29], ZIOH[27], ZIOH[25], ZIOH[23], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[11] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[12] *> ZIOH[35], ZIOH[34], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[13] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[28], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[14] *> ZIOH[36]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[15] *> ZIOH[37]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[16] *> ZIOH[38]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[17] *> ZIOH[53], ZIOH[51], ZIOH[49], ZIOH[47], ZIOH[45], ZIOH[43], ZIOH[41], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[18] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[19] *> ZIOH[53], ZIOH[52], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[20] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[46], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[21] *> ZIOH[54]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[22] *> ZIOH[55]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[23] *> ZIOH[56]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[24] *> ZIOH[71], ZIOH[69], ZIOH[67], ZIOH[65], ZIOH[63], ZIOH[61], ZIOH[59], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[25] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[26] *> ZIOH[71], ZIOH[70], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[27] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[64], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

       // (PAD => MVREF)    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // Jing: comment out
      
      // Jing: add the following lines
      (PAD => MVREF[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine

 
// ------------------------------
// SSTL reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PVREFE_NS (PAD, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
       MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif       
       POCH, ZCTRL, ZIOH, LENH, REFEN, REFSEL, PDRH18, MVREFSE);
  output            PAD;
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;
  input  [1:0]      REFEN;          // Enable internal VREF generator
  input  [5:0]      REFSEL;         // Select generated VREF value
  input             POCH;	          // Power-on clear high voltage
  input  [27:0]     ZCTRL;
  output [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input 	MVREFSE; // Special Vref for single ended receiver

`ifdef DWC_DDRPHY_ATPG_MODEL
  wire   [17:0]     zioh_3;
  wire   [17:0]     zioh_2;
  wire   [17:0]     zioh_1;
  wire   [17:0]     zioh_0;
`else
  reg    [17:0]     zioh_3;
  reg    [17:0]     zioh_2;
  reg    [17:0]     zioh_1;
  reg    [17:0]     zioh_0;
`endif

  wire   [17:0]     zioh_3_ret;
  wire   [17:0]     zioh_2_ret;
  wire   [17:0]     zioh_1_ret;
  wire   [17:0]     zioh_0_ret; 
  wire          POCH_internal;
  wire          LENH_b;

  wire [1:0] REFEN_ret;
  
  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  DWC_D4MV_LATCH Z_0_0_lat (zioh_0_ret[0], zioh_0[0], LENH);
  DWC_D4MV_LATCH Z_0_1_lat (zioh_0_ret[1], zioh_0[1], LENH);
  DWC_D4MV_LATCH Z_0_2_lat (zioh_0_ret[2], zioh_0[2], LENH);
  DWC_D4MV_LATCH Z_0_3_lat (zioh_0_ret[3], zioh_0[3], LENH);
  DWC_D4MV_LATCH Z_0_4_lat (zioh_0_ret[4], zioh_0[4], LENH); 
  DWC_D4MV_LATCH Z_0_5_lat (zioh_0_ret[5], zioh_0[5], LENH);
  DWC_D4MV_LATCH Z_0_6_lat (zioh_0_ret[6], zioh_0[6], LENH);
  DWC_D4MV_LATCH Z_0_7_lat (zioh_0_ret[7], zioh_0[7], LENH);
  DWC_D4MV_LATCH Z_0_8_lat (zioh_0_ret[8], zioh_0[8], LENH);
  DWC_D4MV_LATCH Z_0_9_lat (zioh_0_ret[9], zioh_0[9], LENH);
  DWC_D4MV_LATCH Z_0_10_lat (zioh_0_ret[10], zioh_0[10], LENH);
  DWC_D4MV_LATCH Z_0_11_lat (zioh_0_ret[11], zioh_0[11], LENH);
  DWC_D4MV_LATCH Z_0_12_lat (zioh_0_ret[12], zioh_0[12], LENH);
  DWC_D4MV_LATCH Z_0_13_lat (zioh_0_ret[13], zioh_0[13], LENH);
  DWC_D4MV_LATCH Z_0_14_lat (zioh_0_ret[14], zioh_0[14], LENH);
  DWC_D4MV_LATCH Z_0_15_lat (zioh_0_ret[15], zioh_0[15], LENH);
  DWC_D4MV_LATCH Z_0_16_lat (zioh_0_ret[16], zioh_0[16], LENH);
  DWC_D4MV_LATCH Z_0_17_lat (zioh_0_ret[17], zioh_0[17], LENH);

  DWC_D4MV_LATCH Z_1_0_lat (zioh_1_ret[0], zioh_1[0], LENH);
  DWC_D4MV_LATCH Z_1_1_lat (zioh_1_ret[1], zioh_1[1], LENH);
  DWC_D4MV_LATCH Z_1_2_lat (zioh_1_ret[2], zioh_1[2], LENH);
  DWC_D4MV_LATCH Z_1_3_lat (zioh_1_ret[3], zioh_1[3], LENH);
  DWC_D4MV_LATCH Z_1_4_lat (zioh_1_ret[4], zioh_1[4], LENH);
  DWC_D4MV_LATCH Z_1_5_lat (zioh_1_ret[5], zioh_1[5], LENH);
  DWC_D4MV_LATCH Z_1_6_lat (zioh_1_ret[6], zioh_1[6], LENH);
  DWC_D4MV_LATCH Z_1_7_lat (zioh_1_ret[7], zioh_1[7], LENH);
  DWC_D4MV_LATCH Z_1_8_lat (zioh_1_ret[8], zioh_1[8], LENH);
  DWC_D4MV_LATCH Z_1_9_lat (zioh_1_ret[9], zioh_1[9], LENH);
  DWC_D4MV_LATCH Z_1_10_lat (zioh_1_ret[10], zioh_1[10], LENH);
  DWC_D4MV_LATCH Z_1_11_lat (zioh_1_ret[11], zioh_1[11], LENH);
  DWC_D4MV_LATCH Z_1_12_lat (zioh_1_ret[12], zioh_1[12], LENH);
  DWC_D4MV_LATCH Z_1_13_lat (zioh_1_ret[13], zioh_1[13], LENH);
  DWC_D4MV_LATCH Z_1_14_lat (zioh_1_ret[14], zioh_1[14], LENH);
  DWC_D4MV_LATCH Z_1_15_lat (zioh_1_ret[15], zioh_1[15], LENH);
  DWC_D4MV_LATCH Z_1_16_lat (zioh_1_ret[16], zioh_1[16], LENH);
  DWC_D4MV_LATCH Z_1_17_lat (zioh_1_ret[17], zioh_1[17], LENH);

  DWC_D4MV_LATCH Z_2_0_lat (zioh_2_ret[0], zioh_2[0], LENH);
  DWC_D4MV_LATCH Z_2_1_lat (zioh_2_ret[1], zioh_2[1], LENH);
  DWC_D4MV_LATCH Z_2_2_lat (zioh_2_ret[2], zioh_2[2], LENH);
  DWC_D4MV_LATCH Z_2_3_lat (zioh_2_ret[3], zioh_2[3], LENH);
  DWC_D4MV_LATCH Z_2_4_lat (zioh_2_ret[4], zioh_2[4], LENH);
  DWC_D4MV_LATCH Z_2_5_lat (zioh_2_ret[5], zioh_2[5], LENH);
  DWC_D4MV_LATCH Z_2_6_lat (zioh_2_ret[6], zioh_2[6], LENH);
  DWC_D4MV_LATCH Z_2_7_lat (zioh_2_ret[7], zioh_2[7], LENH);
  DWC_D4MV_LATCH Z_2_8_lat (zioh_2_ret[8], zioh_2[8], LENH);
  DWC_D4MV_LATCH Z_2_9_lat (zioh_2_ret[9], zioh_2[9], LENH);
  DWC_D4MV_LATCH Z_2_10_lat (zioh_2_ret[10], zioh_2[10], LENH);
  DWC_D4MV_LATCH Z_2_11_lat (zioh_2_ret[11], zioh_2[11], LENH);
  DWC_D4MV_LATCH Z_2_12_lat (zioh_2_ret[12], zioh_2[12], LENH);
  DWC_D4MV_LATCH Z_2_13_lat (zioh_2_ret[13], zioh_2[13], LENH);
  DWC_D4MV_LATCH Z_2_14_lat (zioh_2_ret[14], zioh_2[14], LENH);
  DWC_D4MV_LATCH Z_2_15_lat (zioh_2_ret[15], zioh_2[15], LENH);
  DWC_D4MV_LATCH Z_2_16_lat (zioh_2_ret[16], zioh_2[16], LENH);
  DWC_D4MV_LATCH Z_2_17_lat (zioh_2_ret[17], zioh_2[17], LENH);
  
  DWC_D4MV_LATCH Z_3_0_lat (zioh_3_ret[0], zioh_3[0], LENH);
  DWC_D4MV_LATCH Z_3_1_lat (zioh_3_ret[1], zioh_3[1], LENH);
  DWC_D4MV_LATCH Z_3_2_lat (zioh_3_ret[2], zioh_3[2], LENH);
  DWC_D4MV_LATCH Z_3_3_lat (zioh_3_ret[3], zioh_3[3], LENH);
  DWC_D4MV_LATCH Z_3_4_lat (zioh_3_ret[4], zioh_3[4], LENH);
  DWC_D4MV_LATCH Z_3_5_lat (zioh_3_ret[5], zioh_3[5], LENH);
  DWC_D4MV_LATCH Z_3_6_lat (zioh_3_ret[6], zioh_3[6], LENH);
  DWC_D4MV_LATCH Z_3_7_lat (zioh_3_ret[7], zioh_3[7], LENH);
  DWC_D4MV_LATCH Z_3_8_lat (zioh_3_ret[8], zioh_3[8], LENH);
  DWC_D4MV_LATCH Z_3_9_lat (zioh_3_ret[9], zioh_3[9], LENH);
  DWC_D4MV_LATCH Z_3_10_lat (zioh_3_ret[10], zioh_3[10], LENH);
  DWC_D4MV_LATCH Z_3_11_lat (zioh_3_ret[11], zioh_3[11], LENH);
  DWC_D4MV_LATCH Z_3_12_lat (zioh_3_ret[12], zioh_3[12], LENH);
  DWC_D4MV_LATCH Z_3_13_lat (zioh_3_ret[13], zioh_3[13], LENH);
  DWC_D4MV_LATCH Z_3_14_lat (zioh_3_ret[14], zioh_3[14], LENH);
  DWC_D4MV_LATCH Z_3_15_lat (zioh_3_ret[15], zioh_3[15], LENH);
  DWC_D4MV_LATCH Z_3_16_lat (zioh_3_ret[16], zioh_3[16], LENH);
  DWC_D4MV_LATCH Z_3_17_lat (zioh_3_ret[17], zioh_3[17], LENH);
  
  DWC_D4MV_LATCH REFEN0_lat (REFEN_ret[0], REFEN[0], LENH); 
  DWC_D4MV_LATCH REFEN1_lat (REFEN_ret[1], REFEN[1], LENH); 
  
  assign ZIOH[71]  = (POCH_internal) ? 1'b0 : zioh_3_ret[17];
  assign ZIOH[70]  = (POCH_internal) ? 1'b0 : zioh_3_ret[16];
  assign ZIOH[69]  = (POCH_internal) ? 1'b0 : zioh_3_ret[15];
  assign ZIOH[68]  = (POCH_internal) ? 1'b0 : zioh_3_ret[14];
  assign ZIOH[67]  = (POCH_internal) ? 1'b0 : zioh_3_ret[13];
  assign ZIOH[66]  = (POCH_internal) ? 1'b0 : zioh_3_ret[12];
  assign ZIOH[65]  = (POCH_internal) ? 1'b0 : zioh_3_ret[11];
  assign ZIOH[64]  = (POCH_internal) ? 1'b0 : zioh_3_ret[10];
  assign ZIOH[63]  = (POCH_internal) ? 1'b0 : zioh_3_ret[9];
  assign ZIOH[62]  = (POCH_internal) ? 1'b0 : zioh_3_ret[8];
  assign ZIOH[61]  = (POCH_internal) ? 1'b0 : zioh_3_ret[7];
  assign ZIOH[60]  = (POCH_internal) ? 1'b0 : zioh_3_ret[6];
  assign ZIOH[59]  = (POCH_internal) ? 1'b0 : zioh_3_ret[5];
  assign ZIOH[58]  = (POCH_internal) ? 1'b0 : zioh_3_ret[4];
  assign ZIOH[57]  = (POCH_internal) ? 1'b0 : zioh_3_ret[3];
  assign ZIOH[56]  = (POCH_internal) ? 1'b0 : zioh_3_ret[2];
  assign ZIOH[55]  = (POCH_internal) ? 1'b0 : zioh_3_ret[1];
  assign ZIOH[54]  = (POCH_internal) ? 1'b0 : zioh_3_ret[0];

  assign ZIOH[53]  = (POCH_internal) ? 1'b0 : zioh_2_ret[17];
  assign ZIOH[52]  = (POCH_internal) ? 1'b0 : zioh_2_ret[16];
  assign ZIOH[51]  = (POCH_internal) ? 1'b0 : zioh_2_ret[15];
  assign ZIOH[50]  = (POCH_internal) ? 1'b0 : zioh_2_ret[14];
  assign ZIOH[49]  = (POCH_internal) ? 1'b0 : zioh_2_ret[13];
  assign ZIOH[48]  = (POCH_internal) ? 1'b0 : zioh_2_ret[12];
  assign ZIOH[47]  = (POCH_internal) ? 1'b0 : zioh_2_ret[11];
  assign ZIOH[46]  = (POCH_internal) ? 1'b0 : zioh_2_ret[10];
  assign ZIOH[45]  = (POCH_internal) ? 1'b0 : zioh_2_ret[9];
  assign ZIOH[44]  = (POCH_internal) ? 1'b0 : zioh_2_ret[8];
  assign ZIOH[43]  = (POCH_internal) ? 1'b0 : zioh_2_ret[7];
  assign ZIOH[42]  = (POCH_internal) ? 1'b0 : zioh_2_ret[6];
  assign ZIOH[41]  = (POCH_internal) ? 1'b0 : zioh_2_ret[5];
  assign ZIOH[40]  = (POCH_internal) ? 1'b0 : zioh_2_ret[4];
  assign ZIOH[39]  = (POCH_internal) ? 1'b0 : zioh_2_ret[3];
  assign ZIOH[38]  = (POCH_internal) ? 1'b0 : zioh_2_ret[2];
  assign ZIOH[37]  = (POCH_internal) ? 1'b0 : zioh_2_ret[1];
  assign ZIOH[36]  = (POCH_internal) ? 1'b0 : zioh_2_ret[0];

  assign ZIOH[35]  = (POCH_internal) ? 1'b0 : zioh_1_ret[17];
  assign ZIOH[34]  = (POCH_internal) ? 1'b0 : zioh_1_ret[16];
  assign ZIOH[33]  = (POCH_internal) ? 1'b0 : zioh_1_ret[15];
  assign ZIOH[32]  = (POCH_internal) ? 1'b0 : zioh_1_ret[14];
  assign ZIOH[31]  = (POCH_internal) ? 1'b0 : zioh_1_ret[13];
  assign ZIOH[30]  = (POCH_internal) ? 1'b0 : zioh_1_ret[12];
  assign ZIOH[29]  = (POCH_internal) ? 1'b0 : zioh_1_ret[11];
  assign ZIOH[28]  = (POCH_internal) ? 1'b0 : zioh_1_ret[10];
  assign ZIOH[27]  = (POCH_internal) ? 1'b0 : zioh_1_ret[9];
  assign ZIOH[26]  = (POCH_internal) ? 1'b0 : zioh_1_ret[8];
  assign ZIOH[25]  = (POCH_internal) ? 1'b0 : zioh_1_ret[7];
  assign ZIOH[24]  = (POCH_internal) ? 1'b0 : zioh_1_ret[6];
  assign ZIOH[23]  = (POCH_internal) ? 1'b0 : zioh_1_ret[5];
  assign ZIOH[22]  = (POCH_internal) ? 1'b0 : zioh_1_ret[4];
  assign ZIOH[21]  = (POCH_internal) ? 1'b0 : zioh_1_ret[3];
  assign ZIOH[20]  = (POCH_internal) ? 1'b0 : zioh_1_ret[2];
  assign ZIOH[19]  = (POCH_internal) ? 1'b0 : zioh_1_ret[1];
  assign ZIOH[18]  = (POCH_internal) ? 1'b0 : zioh_1_ret[0];

  assign ZIOH[17]   = (POCH_internal) ? 1'b0 : zioh_0_ret[17];
  assign ZIOH[16]   = (POCH_internal) ? 1'b0 : zioh_0_ret[16];
  assign ZIOH[15]   = (POCH_internal) ? 1'b0 : zioh_0_ret[15];
  assign ZIOH[14]   = (POCH_internal) ? 1'b0 : zioh_0_ret[14];
  assign ZIOH[13]   = (POCH_internal) ? 1'b0 : zioh_0_ret[13];
  assign ZIOH[12]   = (POCH_internal) ? 1'b0 : zioh_0_ret[12];
  assign ZIOH[11]   = (POCH_internal) ? 1'b0 : zioh_0_ret[11];
  assign ZIOH[10]   = (POCH_internal) ? 1'b0 : zioh_0_ret[10];
  assign ZIOH[9]   = (POCH_internal) ? 1'b0 : zioh_0_ret[9];
  assign ZIOH[8]   = (POCH_internal) ? 1'b0 : zioh_0_ret[8];
  assign ZIOH[7]   = (POCH_internal) ? 1'b0 : zioh_0_ret[7];
  assign ZIOH[6]   = (POCH_internal) ? 1'b0 : zioh_0_ret[6];
  assign ZIOH[5]   = (POCH_internal) ? 1'b0 : zioh_0_ret[5];
  assign ZIOH[4]   = (POCH_internal) ? 1'b0 : zioh_0_ret[4];
  assign ZIOH[3]   = (POCH_internal) ? 1'b0 : zioh_0_ret[3];
  assign ZIOH[2]   = (POCH_internal) ? 1'b0 : zioh_0_ret[2];
  assign ZIOH[1]   = (POCH_internal) ? 1'b0 : zioh_0_ret[1];
  assign ZIOH[0]   = (POCH_internal) ? 1'b0 : zioh_0_ret[0];

//assign PAD 
or (REFEN_valid, REFEN_ret[0], REFEN_ret[1]);
bufif1 (PAD, 1'b1, REFEN_valid);

`ifdef DWC_DDRPHY_ATPG_MODEL
  assign zioh_3 = 18'b000000000000000_000;
  assign zioh_2 = 18'b000000000000000_000;
  assign zioh_1 = 18'b000000000111111_000;
  assign zioh_0 = 18'b000000000111111_000;
`else
  always @(ZCTRL[27:21]) begin
      case (ZCTRL[27:21])
         7'b0000_000 : zioh_3 = 18'b000000000000000_000;
         7'b0000_001 : zioh_3 = 18'b000000000000000_001;
         7'b0000_010 : zioh_3 = 18'b000000000000000_010;
         7'b0000_011 : zioh_3 = 18'b000000000000000_011;
         7'b0000_100 : zioh_3 = 18'b000000000000000_100;
         7'b0000_101 : zioh_3 = 18'b000000000000000_101;
         7'b0000_110 : zioh_3 = 18'b000000000000000_110;
         7'b0000_111 : zioh_3 = 18'b000000000000000_111;
         7'b0001_000 : zioh_3 = 18'b000000000000001_000;
         7'b0001_001 : zioh_3 = 18'b000000000000001_001;
         7'b0001_010 : zioh_3 = 18'b000000000000001_010;
         7'b0001_011 : zioh_3 = 18'b000000000000001_011;
         7'b0001_100 : zioh_3 = 18'b000000000000001_100;
         7'b0001_101 : zioh_3 = 18'b000000000000001_101;
         7'b0001_110 : zioh_3 = 18'b000000000000001_110;
         7'b0001_111 : zioh_3 = 18'b000000000000001_111;
         7'b0010_000 : zioh_3 = 18'b000000000000011_000;
         7'b0010_001 : zioh_3 = 18'b000000000000011_001;
         7'b0010_010 : zioh_3 = 18'b000000000000011_010;
         7'b0010_011 : zioh_3 = 18'b000000000000011_011;
         7'b0010_100 : zioh_3 = 18'b000000000000011_100;
         7'b0010_101 : zioh_3 = 18'b000000000000011_101;
         7'b0010_110 : zioh_3 = 18'b000000000000011_110;
         7'b0010_111 : zioh_3 = 18'b000000000000011_111;
         7'b0011_000 : zioh_3 = 18'b000000000000111_000;
         7'b0011_001 : zioh_3 = 18'b000000000000111_001;
         7'b0011_010 : zioh_3 = 18'b000000000000111_010;
         7'b0011_011 : zioh_3 = 18'b000000000000111_011;
         7'b0011_100 : zioh_3 = 18'b000000000000111_100;
         7'b0011_101 : zioh_3 = 18'b000000000000111_101;
         7'b0011_110 : zioh_3 = 18'b000000000000111_110;
         7'b0011_111 : zioh_3 = 18'b000000000000111_111;
         7'b0100_000 : zioh_3 = 18'b000000000001111_000;
         7'b0100_001 : zioh_3 = 18'b000000000001111_001;
         7'b0100_010 : zioh_3 = 18'b000000000001111_010;
         7'b0100_011 : zioh_3 = 18'b000000000001111_011;
         7'b0100_100 : zioh_3 = 18'b000000000001111_100;
         7'b0100_101 : zioh_3 = 18'b000000000001111_101;
         7'b0100_110 : zioh_3 = 18'b000000000001111_110;
         7'b0100_111 : zioh_3 = 18'b000000000001111_111;
         7'b0101_000 : zioh_3 = 18'b000000000011111_000;
         7'b0101_001 : zioh_3 = 18'b000000000011111_001;
         7'b0101_010 : zioh_3 = 18'b000000000011111_010;
         7'b0101_011 : zioh_3 = 18'b000000000011111_011;
         7'b0101_100 : zioh_3 = 18'b000000000011111_100;
         7'b0101_101 : zioh_3 = 18'b000000000011111_101;
         7'b0101_110 : zioh_3 = 18'b000000000011111_110;
         7'b0101_111 : zioh_3 = 18'b000000000011111_111;
         7'b0110_000 : zioh_3 = 18'b000000000111111_000;
         7'b0110_001 : zioh_3 = 18'b000000000111111_001;
         7'b0110_010 : zioh_3 = 18'b000000000111111_010;
         7'b0110_011 : zioh_3 = 18'b000000000111111_011;
         7'b0110_100 : zioh_3 = 18'b000000000111111_100;
         7'b0110_101 : zioh_3 = 18'b000000000111111_101;
         7'b0110_110 : zioh_3 = 18'b000000000111111_110;
         7'b0110_111 : zioh_3 = 18'b000000000111111_111;
         7'b0111_000 : zioh_3 = 18'b000000001111111_000;
         7'b0111_001 : zioh_3 = 18'b000000001111111_001;
         7'b0111_010 : zioh_3 = 18'b000000001111111_010;
         7'b0111_011 : zioh_3 = 18'b000000001111111_011;
         7'b0111_100 : zioh_3 = 18'b000000001111111_100;
         7'b0111_101 : zioh_3 = 18'b000000001111111_101;
         7'b0111_110 : zioh_3 = 18'b000000001111111_110;
         7'b0111_111 : zioh_3 = 18'b000000001111111_111;
         7'b1000_000 : zioh_3 = 18'b000000011111111_000;
         7'b1000_001 : zioh_3 = 18'b000000011111111_001;
         7'b1000_010 : zioh_3 = 18'b000000011111111_010;
         7'b1000_011 : zioh_3 = 18'b000000011111111_011;
         7'b1000_100 : zioh_3 = 18'b000000011111111_100;
         7'b1000_101 : zioh_3 = 18'b000000011111111_101;
         7'b1000_110 : zioh_3 = 18'b000000011111111_110;
         7'b1000_111 : zioh_3 = 18'b000000011111111_111;
         7'b1001_000 : zioh_3 = 18'b000000111111111_000;
         7'b1001_001 : zioh_3 = 18'b000000111111111_001;
         7'b1001_010 : zioh_3 = 18'b000000111111111_010;
         7'b1001_011 : zioh_3 = 18'b000000111111111_011;
         7'b1001_100 : zioh_3 = 18'b000000111111111_100;
         7'b1001_101 : zioh_3 = 18'b000000111111111_101;
         7'b1001_110 : zioh_3 = 18'b000000111111111_110;
         7'b1001_111 : zioh_3 = 18'b000000111111111_111;
         7'b1010_000 : zioh_3 = 18'b000001111111111_000;
         7'b1010_001 : zioh_3 = 18'b000001111111111_001;
         7'b1010_010 : zioh_3 = 18'b000001111111111_010;
         7'b1010_011 : zioh_3 = 18'b000001111111111_011;
         7'b1010_100 : zioh_3 = 18'b000001111111111_100;
         7'b1010_101 : zioh_3 = 18'b000001111111111_101;
         7'b1010_110 : zioh_3 = 18'b000001111111111_110;
         7'b1010_111 : zioh_3 = 18'b000001111111111_111;
         7'b1011_000 : zioh_3 = 18'b000011111111111_000;
         7'b1011_001 : zioh_3 = 18'b000011111111111_001;
         7'b1011_010 : zioh_3 = 18'b000011111111111_010;
         7'b1011_011 : zioh_3 = 18'b000011111111111_011;
         7'b1011_100 : zioh_3 = 18'b000011111111111_100;
         7'b1011_101 : zioh_3 = 18'b000011111111111_101;
         7'b1011_110 : zioh_3 = 18'b000011111111111_110;
         7'b1011_111 : zioh_3 = 18'b000011111111111_111;
         7'b1100_000 : zioh_3 = 18'b000111111111111_000;
         7'b1100_001 : zioh_3 = 18'b000111111111111_001;
         7'b1100_010 : zioh_3 = 18'b000111111111111_010;
         7'b1100_011 : zioh_3 = 18'b000111111111111_011;
         7'b1100_100 : zioh_3 = 18'b000111111111111_100;
         7'b1100_101 : zioh_3 = 18'b000111111111111_101;
         7'b1100_110 : zioh_3 = 18'b000111111111111_110;
         7'b1100_111 : zioh_3 = 18'b000111111111111_111;
         7'b1101_000 : zioh_3 = 18'b001111111111111_000;
         7'b1101_001 : zioh_3 = 18'b001111111111111_001;
         7'b1101_010 : zioh_3 = 18'b001111111111111_010;
         7'b1101_011 : zioh_3 = 18'b001111111111111_011;
         7'b1101_100 : zioh_3 = 18'b001111111111111_100;
         7'b1101_101 : zioh_3 = 18'b001111111111111_101;
         7'b1101_110 : zioh_3 = 18'b001111111111111_110;
         7'b1101_111 : zioh_3 = 18'b001111111111111_111;
         7'b1110_000 : zioh_3 = 18'b011111111111111_000;
         7'b1110_001 : zioh_3 = 18'b011111111111111_001;
         7'b1110_010 : zioh_3 = 18'b011111111111111_010;
         7'b1110_011 : zioh_3 = 18'b011111111111111_011;
         7'b1110_100 : zioh_3 = 18'b011111111111111_100;
         7'b1110_101 : zioh_3 = 18'b011111111111111_101;
         7'b1110_110 : zioh_3 = 18'b011111111111111_110;
         7'b1110_111 : zioh_3 = 18'b011111111111111_111;
         7'b1111_000 : zioh_3 = 18'b111111111111111_000;
         7'b1111_001 : zioh_3 = 18'b111111111111111_001;
         7'b1111_010 : zioh_3 = 18'b111111111111111_010;
         7'b1111_011 : zioh_3 = 18'b111111111111111_011;
         7'b1111_100 : zioh_3 = 18'b111111111111111_100;
         7'b1111_101 : zioh_3 = 18'b111111111111111_101;
         7'b1111_110 : zioh_3 = 18'b111111111111111_110;
         7'b1111_111 : zioh_3 = 18'b111111111111111_111;
         default     : zioh_3 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[20:14]) begin
      case (ZCTRL[20:14])
         7'b0000_000 : zioh_2 = 18'b000000000000000_000;
         7'b0000_001 : zioh_2 = 18'b000000000000000_001;
         7'b0000_010 : zioh_2 = 18'b000000000000000_010;
         7'b0000_011 : zioh_2 = 18'b000000000000000_011;
         7'b0000_100 : zioh_2 = 18'b000000000000000_100;
         7'b0000_101 : zioh_2 = 18'b000000000000000_101;
         7'b0000_110 : zioh_2 = 18'b000000000000000_110;
         7'b0000_111 : zioh_2 = 18'b000000000000000_111;
         7'b0001_000 : zioh_2 = 18'b000000000000001_000;
         7'b0001_001 : zioh_2 = 18'b000000000000001_001;
         7'b0001_010 : zioh_2 = 18'b000000000000001_010;
         7'b0001_011 : zioh_2 = 18'b000000000000001_011;
         7'b0001_100 : zioh_2 = 18'b000000000000001_100;
         7'b0001_101 : zioh_2 = 18'b000000000000001_101;
         7'b0001_110 : zioh_2 = 18'b000000000000001_110;
         7'b0001_111 : zioh_2 = 18'b000000000000001_111;
         7'b0010_000 : zioh_2 = 18'b000000000000011_000;
         7'b0010_001 : zioh_2 = 18'b000000000000011_001;
         7'b0010_010 : zioh_2 = 18'b000000000000011_010;
         7'b0010_011 : zioh_2 = 18'b000000000000011_011;
         7'b0010_100 : zioh_2 = 18'b000000000000011_100;
         7'b0010_101 : zioh_2 = 18'b000000000000011_101;
         7'b0010_110 : zioh_2 = 18'b000000000000011_110;
         7'b0010_111 : zioh_2 = 18'b000000000000011_111;
         7'b0011_000 : zioh_2 = 18'b000000000000111_000;
         7'b0011_001 : zioh_2 = 18'b000000000000111_001;
         7'b0011_010 : zioh_2 = 18'b000000000000111_010;
         7'b0011_011 : zioh_2 = 18'b000000000000111_011;
         7'b0011_100 : zioh_2 = 18'b000000000000111_100;
         7'b0011_101 : zioh_2 = 18'b000000000000111_101;
         7'b0011_110 : zioh_2 = 18'b000000000000111_110;
         7'b0011_111 : zioh_2 = 18'b000000000000111_111;
         7'b0100_000 : zioh_2 = 18'b000000000001111_000;
         7'b0100_001 : zioh_2 = 18'b000000000001111_001;
         7'b0100_010 : zioh_2 = 18'b000000000001111_010;
         7'b0100_011 : zioh_2 = 18'b000000000001111_011;
         7'b0100_100 : zioh_2 = 18'b000000000001111_100;
         7'b0100_101 : zioh_2 = 18'b000000000001111_101;
         7'b0100_110 : zioh_2 = 18'b000000000001111_110;
         7'b0100_111 : zioh_2 = 18'b000000000001111_111;
         7'b0101_000 : zioh_2 = 18'b000000000011111_000;
         7'b0101_001 : zioh_2 = 18'b000000000011111_001;
         7'b0101_010 : zioh_2 = 18'b000000000011111_010;
         7'b0101_011 : zioh_2 = 18'b000000000011111_011;
         7'b0101_100 : zioh_2 = 18'b000000000011111_100;
         7'b0101_101 : zioh_2 = 18'b000000000011111_101;
         7'b0101_110 : zioh_2 = 18'b000000000011111_110;
         7'b0101_111 : zioh_2 = 18'b000000000011111_111;
         7'b0110_000 : zioh_2 = 18'b000000000111111_000;
         7'b0110_001 : zioh_2 = 18'b000000000111111_001;
         7'b0110_010 : zioh_2 = 18'b000000000111111_010;
         7'b0110_011 : zioh_2 = 18'b000000000111111_011;
         7'b0110_100 : zioh_2 = 18'b000000000111111_100;
         7'b0110_101 : zioh_2 = 18'b000000000111111_101;
         7'b0110_110 : zioh_2 = 18'b000000000111111_110;
         7'b0110_111 : zioh_2 = 18'b000000000111111_111;
         7'b0111_000 : zioh_2 = 18'b000000001111111_000;
         7'b0111_001 : zioh_2 = 18'b000000001111111_001;
         7'b0111_010 : zioh_2 = 18'b000000001111111_010;
         7'b0111_011 : zioh_2 = 18'b000000001111111_011;
         7'b0111_100 : zioh_2 = 18'b000000001111111_100;
         7'b0111_101 : zioh_2 = 18'b000000001111111_101;
         7'b0111_110 : zioh_2 = 18'b000000001111111_110;
         7'b0111_111 : zioh_2 = 18'b000000001111111_111;
         7'b1000_000 : zioh_2 = 18'b000000011111111_000;
         7'b1000_001 : zioh_2 = 18'b000000011111111_001;
         7'b1000_010 : zioh_2 = 18'b000000011111111_010;
         7'b1000_011 : zioh_2 = 18'b000000011111111_011;
         7'b1000_100 : zioh_2 = 18'b000000011111111_100;
         7'b1000_101 : zioh_2 = 18'b000000011111111_101;
         7'b1000_110 : zioh_2 = 18'b000000011111111_110;
         7'b1000_111 : zioh_2 = 18'b000000011111111_111;
         7'b1001_000 : zioh_2 = 18'b000000111111111_000;
         7'b1001_001 : zioh_2 = 18'b000000111111111_001;
         7'b1001_010 : zioh_2 = 18'b000000111111111_010;
         7'b1001_011 : zioh_2 = 18'b000000111111111_011;
         7'b1001_100 : zioh_2 = 18'b000000111111111_100;
         7'b1001_101 : zioh_2 = 18'b000000111111111_101;
         7'b1001_110 : zioh_2 = 18'b000000111111111_110;
         7'b1001_111 : zioh_2 = 18'b000000111111111_111;
         7'b1010_000 : zioh_2 = 18'b000001111111111_000;
         7'b1010_001 : zioh_2 = 18'b000001111111111_001;
         7'b1010_010 : zioh_2 = 18'b000001111111111_010;
         7'b1010_011 : zioh_2 = 18'b000001111111111_011;
         7'b1010_100 : zioh_2 = 18'b000001111111111_100;
         7'b1010_101 : zioh_2 = 18'b000001111111111_101;
         7'b1010_110 : zioh_2 = 18'b000001111111111_110;
         7'b1010_111 : zioh_2 = 18'b000001111111111_111;
         7'b1011_000 : zioh_2 = 18'b000011111111111_000;
         7'b1011_001 : zioh_2 = 18'b000011111111111_001;
         7'b1011_010 : zioh_2 = 18'b000011111111111_010;
         7'b1011_011 : zioh_2 = 18'b000011111111111_011;
         7'b1011_100 : zioh_2 = 18'b000011111111111_100;
         7'b1011_101 : zioh_2 = 18'b000011111111111_101;
         7'b1011_110 : zioh_2 = 18'b000011111111111_110;
         7'b1011_111 : zioh_2 = 18'b000011111111111_111;
         7'b1100_000 : zioh_2 = 18'b000111111111111_000;
         7'b1100_001 : zioh_2 = 18'b000111111111111_001;
         7'b1100_010 : zioh_2 = 18'b000111111111111_010;
         7'b1100_011 : zioh_2 = 18'b000111111111111_011;
         7'b1100_100 : zioh_2 = 18'b000111111111111_100;
         7'b1100_101 : zioh_2 = 18'b000111111111111_101;
         7'b1100_110 : zioh_2 = 18'b000111111111111_110;
         7'b1100_111 : zioh_2 = 18'b000111111111111_111;
         7'b1101_000 : zioh_2 = 18'b001111111111111_000;
         7'b1101_001 : zioh_2 = 18'b001111111111111_001;
         7'b1101_010 : zioh_2 = 18'b001111111111111_010;
         7'b1101_011 : zioh_2 = 18'b001111111111111_011;
         7'b1101_100 : zioh_2 = 18'b001111111111111_100;
         7'b1101_101 : zioh_2 = 18'b001111111111111_101;
         7'b1101_110 : zioh_2 = 18'b001111111111111_110;
         7'b1101_111 : zioh_2 = 18'b001111111111111_111;
         7'b1110_000 : zioh_2 = 18'b011111111111111_000;
         7'b1110_001 : zioh_2 = 18'b011111111111111_001;
         7'b1110_010 : zioh_2 = 18'b011111111111111_010;
         7'b1110_011 : zioh_2 = 18'b011111111111111_011;
         7'b1110_100 : zioh_2 = 18'b011111111111111_100;
         7'b1110_101 : zioh_2 = 18'b011111111111111_101;
         7'b1110_110 : zioh_2 = 18'b011111111111111_110;
         7'b1110_111 : zioh_2 = 18'b011111111111111_111;
         7'b1111_000 : zioh_2 = 18'b111111111111111_000;
         7'b1111_001 : zioh_2 = 18'b111111111111111_001;
         7'b1111_010 : zioh_2 = 18'b111111111111111_010;
         7'b1111_011 : zioh_2 = 18'b111111111111111_011;
         7'b1111_100 : zioh_2 = 18'b111111111111111_100;
         7'b1111_101 : zioh_2 = 18'b111111111111111_101;
         7'b1111_110 : zioh_2 = 18'b111111111111111_110;
         7'b1111_111 : zioh_2 = 18'b111111111111111_111;
         default     : zioh_2 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[13:7]) begin
      case (ZCTRL[13:7])
         7'b0000_000 : zioh_1 = 18'b000000000000000_000;
         7'b0000_001 : zioh_1 = 18'b000000000000000_001;
         7'b0000_010 : zioh_1 = 18'b000000000000000_010;
         7'b0000_011 : zioh_1 = 18'b000000000000000_011;
         7'b0000_100 : zioh_1 = 18'b000000000000000_100;
         7'b0000_101 : zioh_1 = 18'b000000000000000_101;
         7'b0000_110 : zioh_1 = 18'b000000000000000_110;
         7'b0000_111 : zioh_1 = 18'b000000000000000_111;
         7'b0001_000 : zioh_1 = 18'b000000000000001_000;
         7'b0001_001 : zioh_1 = 18'b000000000000001_001;
         7'b0001_010 : zioh_1 = 18'b000000000000001_010;
         7'b0001_011 : zioh_1 = 18'b000000000000001_011;
         7'b0001_100 : zioh_1 = 18'b000000000000001_100;
         7'b0001_101 : zioh_1 = 18'b000000000000001_101;
         7'b0001_110 : zioh_1 = 18'b000000000000001_110;
         7'b0001_111 : zioh_1 = 18'b000000000000001_111;
         7'b0010_000 : zioh_1 = 18'b000000000000011_000;
         7'b0010_001 : zioh_1 = 18'b000000000000011_001;
         7'b0010_010 : zioh_1 = 18'b000000000000011_010;
         7'b0010_011 : zioh_1 = 18'b000000000000011_011;
         7'b0010_100 : zioh_1 = 18'b000000000000011_100;
         7'b0010_101 : zioh_1 = 18'b000000000000011_101;
         7'b0010_110 : zioh_1 = 18'b000000000000011_110;
         7'b0010_111 : zioh_1 = 18'b000000000000011_111;
         7'b0011_000 : zioh_1 = 18'b000000000000111_000;
         7'b0011_001 : zioh_1 = 18'b000000000000111_001;
         7'b0011_010 : zioh_1 = 18'b000000000000111_010;
         7'b0011_011 : zioh_1 = 18'b000000000000111_011;
         7'b0011_100 : zioh_1 = 18'b000000000000111_100;
         7'b0011_101 : zioh_1 = 18'b000000000000111_101;
         7'b0011_110 : zioh_1 = 18'b000000000000111_110;
         7'b0011_111 : zioh_1 = 18'b000000000000111_111;
         7'b0100_000 : zioh_1 = 18'b000000000001111_000;
         7'b0100_001 : zioh_1 = 18'b000000000001111_001;
         7'b0100_010 : zioh_1 = 18'b000000000001111_010;
         7'b0100_011 : zioh_1 = 18'b000000000001111_011;
         7'b0100_100 : zioh_1 = 18'b000000000001111_100;
         7'b0100_101 : zioh_1 = 18'b000000000001111_101;
         7'b0100_110 : zioh_1 = 18'b000000000001111_110;
         7'b0100_111 : zioh_1 = 18'b000000000001111_111;
         7'b0101_000 : zioh_1 = 18'b000000000011111_000;
         7'b0101_001 : zioh_1 = 18'b000000000011111_001;
         7'b0101_010 : zioh_1 = 18'b000000000011111_010;
         7'b0101_011 : zioh_1 = 18'b000000000011111_011;
         7'b0101_100 : zioh_1 = 18'b000000000011111_100;
         7'b0101_101 : zioh_1 = 18'b000000000011111_101;
         7'b0101_110 : zioh_1 = 18'b000000000011111_110;
         7'b0101_111 : zioh_1 = 18'b000000000011111_111;
         7'b0110_000 : zioh_1 = 18'b000000000111111_000;
         7'b0110_001 : zioh_1 = 18'b000000000111111_001;
         7'b0110_010 : zioh_1 = 18'b000000000111111_010;
         7'b0110_011 : zioh_1 = 18'b000000000111111_011;
         7'b0110_100 : zioh_1 = 18'b000000000111111_100;
         7'b0110_101 : zioh_1 = 18'b000000000111111_101;
         7'b0110_110 : zioh_1 = 18'b000000000111111_110;
         7'b0110_111 : zioh_1 = 18'b000000000111111_111;
         7'b0111_000 : zioh_1 = 18'b000000001111111_000;
         7'b0111_001 : zioh_1 = 18'b000000001111111_001;
         7'b0111_010 : zioh_1 = 18'b000000001111111_010;
         7'b0111_011 : zioh_1 = 18'b000000001111111_011;
         7'b0111_100 : zioh_1 = 18'b000000001111111_100;
         7'b0111_101 : zioh_1 = 18'b000000001111111_101;
         7'b0111_110 : zioh_1 = 18'b000000001111111_110;
         7'b0111_111 : zioh_1 = 18'b000000001111111_111;
         7'b1000_000 : zioh_1 = 18'b000000011111111_000;
         7'b1000_001 : zioh_1 = 18'b000000011111111_001;
         7'b1000_010 : zioh_1 = 18'b000000011111111_010;
         7'b1000_011 : zioh_1 = 18'b000000011111111_011;
         7'b1000_100 : zioh_1 = 18'b000000011111111_100;
         7'b1000_101 : zioh_1 = 18'b000000011111111_101;
         7'b1000_110 : zioh_1 = 18'b000000011111111_110;
         7'b1000_111 : zioh_1 = 18'b000000011111111_111;
         7'b1001_000 : zioh_1 = 18'b000000111111111_000;
         7'b1001_001 : zioh_1 = 18'b000000111111111_001;
         7'b1001_010 : zioh_1 = 18'b000000111111111_010;
         7'b1001_011 : zioh_1 = 18'b000000111111111_011;
         7'b1001_100 : zioh_1 = 18'b000000111111111_100;
         7'b1001_101 : zioh_1 = 18'b000000111111111_101;
         7'b1001_110 : zioh_1 = 18'b000000111111111_110;
         7'b1001_111 : zioh_1 = 18'b000000111111111_111;
         7'b1010_000 : zioh_1 = 18'b000001111111111_000;
         7'b1010_001 : zioh_1 = 18'b000001111111111_001;
         7'b1010_010 : zioh_1 = 18'b000001111111111_010;
         7'b1010_011 : zioh_1 = 18'b000001111111111_011;
         7'b1010_100 : zioh_1 = 18'b000001111111111_100;
         7'b1010_101 : zioh_1 = 18'b000001111111111_101;
         7'b1010_110 : zioh_1 = 18'b000001111111111_110;
         7'b1010_111 : zioh_1 = 18'b000001111111111_111;
         7'b1011_000 : zioh_1 = 18'b000011111111111_000;
         7'b1011_001 : zioh_1 = 18'b000011111111111_001;
         7'b1011_010 : zioh_1 = 18'b000011111111111_010;
         7'b1011_011 : zioh_1 = 18'b000011111111111_011;
         7'b1011_100 : zioh_1 = 18'b000011111111111_100;
         7'b1011_101 : zioh_1 = 18'b000011111111111_101;
         7'b1011_110 : zioh_1 = 18'b000011111111111_110;
         7'b1011_111 : zioh_1 = 18'b000011111111111_111;
         7'b1100_000 : zioh_1 = 18'b000111111111111_000;
         7'b1100_001 : zioh_1 = 18'b000111111111111_001;
         7'b1100_010 : zioh_1 = 18'b000111111111111_010;
         7'b1100_011 : zioh_1 = 18'b000111111111111_011;
         7'b1100_100 : zioh_1 = 18'b000111111111111_100;
         7'b1100_101 : zioh_1 = 18'b000111111111111_101;
         7'b1100_110 : zioh_1 = 18'b000111111111111_110;
         7'b1100_111 : zioh_1 = 18'b000111111111111_111;
         7'b1101_000 : zioh_1 = 18'b001111111111111_000;
         7'b1101_001 : zioh_1 = 18'b001111111111111_001;
         7'b1101_010 : zioh_1 = 18'b001111111111111_010;
         7'b1101_011 : zioh_1 = 18'b001111111111111_011;
         7'b1101_100 : zioh_1 = 18'b001111111111111_100;
         7'b1101_101 : zioh_1 = 18'b001111111111111_101;
         7'b1101_110 : zioh_1 = 18'b001111111111111_110;
         7'b1101_111 : zioh_1 = 18'b001111111111111_111;
         7'b1110_000 : zioh_1 = 18'b011111111111111_000;
         7'b1110_001 : zioh_1 = 18'b011111111111111_001;
         7'b1110_010 : zioh_1 = 18'b011111111111111_010;
         7'b1110_011 : zioh_1 = 18'b011111111111111_011;
         7'b1110_100 : zioh_1 = 18'b011111111111111_100;
         7'b1110_101 : zioh_1 = 18'b011111111111111_101;
         7'b1110_110 : zioh_1 = 18'b011111111111111_110;
         7'b1110_111 : zioh_1 = 18'b011111111111111_111;
         7'b1111_000 : zioh_1 = 18'b111111111111111_000;
         7'b1111_001 : zioh_1 = 18'b111111111111111_001;
         7'b1111_010 : zioh_1 = 18'b111111111111111_010;
         7'b1111_011 : zioh_1 = 18'b111111111111111_011;
         7'b1111_100 : zioh_1 = 18'b111111111111111_100;
         7'b1111_101 : zioh_1 = 18'b111111111111111_101;
         7'b1111_110 : zioh_1 = 18'b111111111111111_110;
         7'b1111_111 : zioh_1 = 18'b111111111111111_111;
         default     : zioh_1 = 18'b000000000111111_000;
      endcase
  end

  always @(ZCTRL[6:0]) begin
      case (ZCTRL[6:0])
         7'b0000_000 : zioh_0 = 18'b000000000000000_000;
         7'b0000_001 : zioh_0 = 18'b000000000000000_001;
         7'b0000_010 : zioh_0 = 18'b000000000000000_010;
         7'b0000_011 : zioh_0 = 18'b000000000000000_011;
         7'b0000_100 : zioh_0 = 18'b000000000000000_100;
         7'b0000_101 : zioh_0 = 18'b000000000000000_101;
         7'b0000_110 : zioh_0 = 18'b000000000000000_110;
         7'b0000_111 : zioh_0 = 18'b000000000000000_111;
         7'b0001_000 : zioh_0 = 18'b000000000000001_000;
         7'b0001_001 : zioh_0 = 18'b000000000000001_001;
         7'b0001_010 : zioh_0 = 18'b000000000000001_010;
         7'b0001_011 : zioh_0 = 18'b000000000000001_011;
         7'b0001_100 : zioh_0 = 18'b000000000000001_100;
         7'b0001_101 : zioh_0 = 18'b000000000000001_101;
         7'b0001_110 : zioh_0 = 18'b000000000000001_110;
         7'b0001_111 : zioh_0 = 18'b000000000000001_111;
         7'b0010_000 : zioh_0 = 18'b000000000000011_000;
         7'b0010_001 : zioh_0 = 18'b000000000000011_001;
         7'b0010_010 : zioh_0 = 18'b000000000000011_010;
         7'b0010_011 : zioh_0 = 18'b000000000000011_011;
         7'b0010_100 : zioh_0 = 18'b000000000000011_100;
         7'b0010_101 : zioh_0 = 18'b000000000000011_101;
         7'b0010_110 : zioh_0 = 18'b000000000000011_110;
         7'b0010_111 : zioh_0 = 18'b000000000000011_111;
         7'b0011_000 : zioh_0 = 18'b000000000000111_000;
         7'b0011_001 : zioh_0 = 18'b000000000000111_001;
         7'b0011_010 : zioh_0 = 18'b000000000000111_010;
         7'b0011_011 : zioh_0 = 18'b000000000000111_011;
         7'b0011_100 : zioh_0 = 18'b000000000000111_100;
         7'b0011_101 : zioh_0 = 18'b000000000000111_101;
         7'b0011_110 : zioh_0 = 18'b000000000000111_110;
         7'b0011_111 : zioh_0 = 18'b000000000000111_111;
         7'b0100_000 : zioh_0 = 18'b000000000001111_000;
         7'b0100_001 : zioh_0 = 18'b000000000001111_001;
         7'b0100_010 : zioh_0 = 18'b000000000001111_010;
         7'b0100_011 : zioh_0 = 18'b000000000001111_011;
         7'b0100_100 : zioh_0 = 18'b000000000001111_100;
         7'b0100_101 : zioh_0 = 18'b000000000001111_101;
         7'b0100_110 : zioh_0 = 18'b000000000001111_110;
         7'b0100_111 : zioh_0 = 18'b000000000001111_111;
         7'b0101_000 : zioh_0 = 18'b000000000011111_000;
         7'b0101_001 : zioh_0 = 18'b000000000011111_001;
         7'b0101_010 : zioh_0 = 18'b000000000011111_010;
         7'b0101_011 : zioh_0 = 18'b000000000011111_011;
         7'b0101_100 : zioh_0 = 18'b000000000011111_100;
         7'b0101_101 : zioh_0 = 18'b000000000011111_101;
         7'b0101_110 : zioh_0 = 18'b000000000011111_110;
         7'b0101_111 : zioh_0 = 18'b000000000011111_111;
         7'b0110_000 : zioh_0 = 18'b000000000111111_000;
         7'b0110_001 : zioh_0 = 18'b000000000111111_001;
         7'b0110_010 : zioh_0 = 18'b000000000111111_010;
         7'b0110_011 : zioh_0 = 18'b000000000111111_011;
         7'b0110_100 : zioh_0 = 18'b000000000111111_100;
         7'b0110_101 : zioh_0 = 18'b000000000111111_101;
         7'b0110_110 : zioh_0 = 18'b000000000111111_110;
         7'b0110_111 : zioh_0 = 18'b000000000111111_111;
         7'b0111_000 : zioh_0 = 18'b000000001111111_000;
         7'b0111_001 : zioh_0 = 18'b000000001111111_001;
         7'b0111_010 : zioh_0 = 18'b000000001111111_010;
         7'b0111_011 : zioh_0 = 18'b000000001111111_011;
         7'b0111_100 : zioh_0 = 18'b000000001111111_100;
         7'b0111_101 : zioh_0 = 18'b000000001111111_101;
         7'b0111_110 : zioh_0 = 18'b000000001111111_110;
         7'b0111_111 : zioh_0 = 18'b000000001111111_111;
         7'b1000_000 : zioh_0 = 18'b000000011111111_000;
         7'b1000_001 : zioh_0 = 18'b000000011111111_001;
         7'b1000_010 : zioh_0 = 18'b000000011111111_010;
         7'b1000_011 : zioh_0 = 18'b000000011111111_011;
         7'b1000_100 : zioh_0 = 18'b000000011111111_100;
         7'b1000_101 : zioh_0 = 18'b000000011111111_101;
         7'b1000_110 : zioh_0 = 18'b000000011111111_110;
         7'b1000_111 : zioh_0 = 18'b000000011111111_111;
         7'b1001_000 : zioh_0 = 18'b000000111111111_000;
         7'b1001_001 : zioh_0 = 18'b000000111111111_001;
         7'b1001_010 : zioh_0 = 18'b000000111111111_010;
         7'b1001_011 : zioh_0 = 18'b000000111111111_011;
         7'b1001_100 : zioh_0 = 18'b000000111111111_100;
         7'b1001_101 : zioh_0 = 18'b000000111111111_101;
         7'b1001_110 : zioh_0 = 18'b000000111111111_110;
         7'b1001_111 : zioh_0 = 18'b000000111111111_111;
         7'b1010_000 : zioh_0 = 18'b000001111111111_000;
         7'b1010_001 : zioh_0 = 18'b000001111111111_001;
         7'b1010_010 : zioh_0 = 18'b000001111111111_010;
         7'b1010_011 : zioh_0 = 18'b000001111111111_011;
         7'b1010_100 : zioh_0 = 18'b000001111111111_100;
         7'b1010_101 : zioh_0 = 18'b000001111111111_101;
         7'b1010_110 : zioh_0 = 18'b000001111111111_110;
         7'b1010_111 : zioh_0 = 18'b000001111111111_111;
         7'b1011_000 : zioh_0 = 18'b000011111111111_000;
         7'b1011_001 : zioh_0 = 18'b000011111111111_001;
         7'b1011_010 : zioh_0 = 18'b000011111111111_010;
         7'b1011_011 : zioh_0 = 18'b000011111111111_011;
         7'b1011_100 : zioh_0 = 18'b000011111111111_100;
         7'b1011_101 : zioh_0 = 18'b000011111111111_101;
         7'b1011_110 : zioh_0 = 18'b000011111111111_110;
         7'b1011_111 : zioh_0 = 18'b000011111111111_111;
         7'b1100_000 : zioh_0 = 18'b000111111111111_000;
         7'b1100_001 : zioh_0 = 18'b000111111111111_001;
         7'b1100_010 : zioh_0 = 18'b000111111111111_010;
         7'b1100_011 : zioh_0 = 18'b000111111111111_011;
         7'b1100_100 : zioh_0 = 18'b000111111111111_100;
         7'b1100_101 : zioh_0 = 18'b000111111111111_101;
         7'b1100_110 : zioh_0 = 18'b000111111111111_110;
         7'b1100_111 : zioh_0 = 18'b000111111111111_111;
         7'b1101_000 : zioh_0 = 18'b001111111111111_000;
         7'b1101_001 : zioh_0 = 18'b001111111111111_001;
         7'b1101_010 : zioh_0 = 18'b001111111111111_010;
         7'b1101_011 : zioh_0 = 18'b001111111111111_011;
         7'b1101_100 : zioh_0 = 18'b001111111111111_100;
         7'b1101_101 : zioh_0 = 18'b001111111111111_101;
         7'b1101_110 : zioh_0 = 18'b001111111111111_110;
         7'b1101_111 : zioh_0 = 18'b001111111111111_111;
         7'b1110_000 : zioh_0 = 18'b011111111111111_000;
         7'b1110_001 : zioh_0 = 18'b011111111111111_001;
         7'b1110_010 : zioh_0 = 18'b011111111111111_010;
         7'b1110_011 : zioh_0 = 18'b011111111111111_011;
         7'b1110_100 : zioh_0 = 18'b011111111111111_100;
         7'b1110_101 : zioh_0 = 18'b011111111111111_101;
         7'b1110_110 : zioh_0 = 18'b011111111111111_110;
         7'b1110_111 : zioh_0 = 18'b011111111111111_111;
         7'b1111_000 : zioh_0 = 18'b111111111111111_000;
         7'b1111_001 : zioh_0 = 18'b111111111111111_001;
         7'b1111_010 : zioh_0 = 18'b111111111111111_010;
         7'b1111_011 : zioh_0 = 18'b111111111111111_011;
         7'b1111_100 : zioh_0 = 18'b111111111111111_100;
         7'b1111_101 : zioh_0 = 18'b111111111111111_101;
         7'b1111_110 : zioh_0 = 18'b111111111111111_110;
         7'b1111_111 : zioh_0 = 18'b111111111111111_111;
         default     : zioh_0 = 18'b000000000111111_000;
      endcase
  end
`endif

  specify
      (ZCTRL[0] *> ZIOH[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[1] *> ZIOH[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[2] *> ZIOH[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[3] *> ZIOH[17], ZIOH[15], ZIOH[13], ZIOH[11], ZIOH[9], ZIOH[7], ZIOH[5], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[4] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[5] *> ZIOH[17], ZIOH[16], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[6] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[10], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[7] *> ZIOH[18]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[8] *> ZIOH[19]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[9] *> ZIOH[20]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[10] *> ZIOH[35], ZIOH[33], ZIOH[31], ZIOH[29], ZIOH[27], ZIOH[25], ZIOH[23], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[11] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[12] *> ZIOH[35], ZIOH[34], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[13] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[28], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[14] *> ZIOH[36]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[15] *> ZIOH[37]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[16] *> ZIOH[38]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[17] *> ZIOH[53], ZIOH[51], ZIOH[49], ZIOH[47], ZIOH[45], ZIOH[43], ZIOH[41], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[18] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[19] *> ZIOH[53], ZIOH[52], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[20] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[46], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[21] *> ZIOH[54]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[22] *> ZIOH[55]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[23] *> ZIOH[56]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[24] *> ZIOH[71], ZIOH[69], ZIOH[67], ZIOH[65], ZIOH[63], ZIOH[61], ZIOH[59], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[25] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[26] *> ZIOH[71], ZIOH[70], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[27] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[64], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (REFEN[0] => PAD)    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (REFEN[1] => PAD)    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

  endspecify

endmodule
`endcelldefine


// ------------------------------
// SSTL reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PVREFE_EW (PAD, MVREF,
`ifdef DWC_DDRPHY_PG_PINS
       MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif       
       POCH, ZCTRL, ZIOH, LENH, REFEN, REFSEL, PDRH18, MVREFSE);
  output            PAD;
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;
  input  [1:0]      REFEN;          // Enable internal VREF generator
  input  [5:0]      REFSEL;         // Select generated VREF value
  input             POCH;	          // Power-on clear high voltage
  input  [27:0]     ZCTRL;
  output [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input 	MVREFSE; // Special Vref for single ended receiver

`ifdef DWC_DDRPHY_ATPG_MODEL
  wire   [17:0]     zioh_3;
  wire   [17:0]     zioh_2;
  wire   [17:0]     zioh_1;
  wire   [17:0]     zioh_0;
`else
  reg    [17:0]     zioh_3;
  reg    [17:0]     zioh_2;
  reg    [17:0]     zioh_1;
  reg    [17:0]     zioh_0;
`endif

  wire   [17:0]     zioh_3_ret;
  wire   [17:0]     zioh_2_ret;
  wire   [17:0]     zioh_1_ret;
  wire   [17:0]     zioh_0_ret; 
  wire          POCH_internal;
  wire          LENH_b;

  wire [1:0] REFEN_ret;
  
  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  DWC_D4MV_LATCH Z_0_0_lat (zioh_0_ret[0], zioh_0[0], LENH);
  DWC_D4MV_LATCH Z_0_1_lat (zioh_0_ret[1], zioh_0[1], LENH);
  DWC_D4MV_LATCH Z_0_2_lat (zioh_0_ret[2], zioh_0[2], LENH);
  DWC_D4MV_LATCH Z_0_3_lat (zioh_0_ret[3], zioh_0[3], LENH);
  DWC_D4MV_LATCH Z_0_4_lat (zioh_0_ret[4], zioh_0[4], LENH); 
  DWC_D4MV_LATCH Z_0_5_lat (zioh_0_ret[5], zioh_0[5], LENH);
  DWC_D4MV_LATCH Z_0_6_lat (zioh_0_ret[6], zioh_0[6], LENH);
  DWC_D4MV_LATCH Z_0_7_lat (zioh_0_ret[7], zioh_0[7], LENH);
  DWC_D4MV_LATCH Z_0_8_lat (zioh_0_ret[8], zioh_0[8], LENH);
  DWC_D4MV_LATCH Z_0_9_lat (zioh_0_ret[9], zioh_0[9], LENH);
  DWC_D4MV_LATCH Z_0_10_lat (zioh_0_ret[10], zioh_0[10], LENH);
  DWC_D4MV_LATCH Z_0_11_lat (zioh_0_ret[11], zioh_0[11], LENH);
  DWC_D4MV_LATCH Z_0_12_lat (zioh_0_ret[12], zioh_0[12], LENH);
  DWC_D4MV_LATCH Z_0_13_lat (zioh_0_ret[13], zioh_0[13], LENH);
  DWC_D4MV_LATCH Z_0_14_lat (zioh_0_ret[14], zioh_0[14], LENH);
  DWC_D4MV_LATCH Z_0_15_lat (zioh_0_ret[15], zioh_0[15], LENH);
  DWC_D4MV_LATCH Z_0_16_lat (zioh_0_ret[16], zioh_0[16], LENH);
  DWC_D4MV_LATCH Z_0_17_lat (zioh_0_ret[17], zioh_0[17], LENH);

  DWC_D4MV_LATCH Z_1_0_lat (zioh_1_ret[0], zioh_1[0], LENH);
  DWC_D4MV_LATCH Z_1_1_lat (zioh_1_ret[1], zioh_1[1], LENH);
  DWC_D4MV_LATCH Z_1_2_lat (zioh_1_ret[2], zioh_1[2], LENH);
  DWC_D4MV_LATCH Z_1_3_lat (zioh_1_ret[3], zioh_1[3], LENH);
  DWC_D4MV_LATCH Z_1_4_lat (zioh_1_ret[4], zioh_1[4], LENH);
  DWC_D4MV_LATCH Z_1_5_lat (zioh_1_ret[5], zioh_1[5], LENH);
  DWC_D4MV_LATCH Z_1_6_lat (zioh_1_ret[6], zioh_1[6], LENH);
  DWC_D4MV_LATCH Z_1_7_lat (zioh_1_ret[7], zioh_1[7], LENH);
  DWC_D4MV_LATCH Z_1_8_lat (zioh_1_ret[8], zioh_1[8], LENH);
  DWC_D4MV_LATCH Z_1_9_lat (zioh_1_ret[9], zioh_1[9], LENH);
  DWC_D4MV_LATCH Z_1_10_lat (zioh_1_ret[10], zioh_1[10], LENH);
  DWC_D4MV_LATCH Z_1_11_lat (zioh_1_ret[11], zioh_1[11], LENH);
  DWC_D4MV_LATCH Z_1_12_lat (zioh_1_ret[12], zioh_1[12], LENH);
  DWC_D4MV_LATCH Z_1_13_lat (zioh_1_ret[13], zioh_1[13], LENH);
  DWC_D4MV_LATCH Z_1_14_lat (zioh_1_ret[14], zioh_1[14], LENH);
  DWC_D4MV_LATCH Z_1_15_lat (zioh_1_ret[15], zioh_1[15], LENH);
  DWC_D4MV_LATCH Z_1_16_lat (zioh_1_ret[16], zioh_1[16], LENH);
  DWC_D4MV_LATCH Z_1_17_lat (zioh_1_ret[17], zioh_1[17], LENH);

  DWC_D4MV_LATCH Z_2_0_lat (zioh_2_ret[0], zioh_2[0], LENH);
  DWC_D4MV_LATCH Z_2_1_lat (zioh_2_ret[1], zioh_2[1], LENH);
  DWC_D4MV_LATCH Z_2_2_lat (zioh_2_ret[2], zioh_2[2], LENH);
  DWC_D4MV_LATCH Z_2_3_lat (zioh_2_ret[3], zioh_2[3], LENH);
  DWC_D4MV_LATCH Z_2_4_lat (zioh_2_ret[4], zioh_2[4], LENH);
  DWC_D4MV_LATCH Z_2_5_lat (zioh_2_ret[5], zioh_2[5], LENH);
  DWC_D4MV_LATCH Z_2_6_lat (zioh_2_ret[6], zioh_2[6], LENH);
  DWC_D4MV_LATCH Z_2_7_lat (zioh_2_ret[7], zioh_2[7], LENH);
  DWC_D4MV_LATCH Z_2_8_lat (zioh_2_ret[8], zioh_2[8], LENH);
  DWC_D4MV_LATCH Z_2_9_lat (zioh_2_ret[9], zioh_2[9], LENH);
  DWC_D4MV_LATCH Z_2_10_lat (zioh_2_ret[10], zioh_2[10], LENH);
  DWC_D4MV_LATCH Z_2_11_lat (zioh_2_ret[11], zioh_2[11], LENH);
  DWC_D4MV_LATCH Z_2_12_lat (zioh_2_ret[12], zioh_2[12], LENH);
  DWC_D4MV_LATCH Z_2_13_lat (zioh_2_ret[13], zioh_2[13], LENH);
  DWC_D4MV_LATCH Z_2_14_lat (zioh_2_ret[14], zioh_2[14], LENH);
  DWC_D4MV_LATCH Z_2_15_lat (zioh_2_ret[15], zioh_2[15], LENH);
  DWC_D4MV_LATCH Z_2_16_lat (zioh_2_ret[16], zioh_2[16], LENH);
  DWC_D4MV_LATCH Z_2_17_lat (zioh_2_ret[17], zioh_2[17], LENH);
  
  DWC_D4MV_LATCH Z_3_0_lat (zioh_3_ret[0], zioh_3[0], LENH);
  DWC_D4MV_LATCH Z_3_1_lat (zioh_3_ret[1], zioh_3[1], LENH);
  DWC_D4MV_LATCH Z_3_2_lat (zioh_3_ret[2], zioh_3[2], LENH);
  DWC_D4MV_LATCH Z_3_3_lat (zioh_3_ret[3], zioh_3[3], LENH);
  DWC_D4MV_LATCH Z_3_4_lat (zioh_3_ret[4], zioh_3[4], LENH);
  DWC_D4MV_LATCH Z_3_5_lat (zioh_3_ret[5], zioh_3[5], LENH);
  DWC_D4MV_LATCH Z_3_6_lat (zioh_3_ret[6], zioh_3[6], LENH);
  DWC_D4MV_LATCH Z_3_7_lat (zioh_3_ret[7], zioh_3[7], LENH);
  DWC_D4MV_LATCH Z_3_8_lat (zioh_3_ret[8], zioh_3[8], LENH);
  DWC_D4MV_LATCH Z_3_9_lat (zioh_3_ret[9], zioh_3[9], LENH);
  DWC_D4MV_LATCH Z_3_10_lat (zioh_3_ret[10], zioh_3[10], LENH);
  DWC_D4MV_LATCH Z_3_11_lat (zioh_3_ret[11], zioh_3[11], LENH);
  DWC_D4MV_LATCH Z_3_12_lat (zioh_3_ret[12], zioh_3[12], LENH);
  DWC_D4MV_LATCH Z_3_13_lat (zioh_3_ret[13], zioh_3[13], LENH);
  DWC_D4MV_LATCH Z_3_14_lat (zioh_3_ret[14], zioh_3[14], LENH);
  DWC_D4MV_LATCH Z_3_15_lat (zioh_3_ret[15], zioh_3[15], LENH);
  DWC_D4MV_LATCH Z_3_16_lat (zioh_3_ret[16], zioh_3[16], LENH);
  DWC_D4MV_LATCH Z_3_17_lat (zioh_3_ret[17], zioh_3[17], LENH);
  
  DWC_D4MV_LATCH REFEN0_lat (REFEN_ret[0], REFEN[0], LENH); 
  DWC_D4MV_LATCH REFEN1_lat (REFEN_ret[1], REFEN[1], LENH); 
  
  assign ZIOH[71]  = (POCH_internal) ? 1'b0 : zioh_3_ret[17];
  assign ZIOH[70]  = (POCH_internal) ? 1'b0 : zioh_3_ret[16];
  assign ZIOH[69]  = (POCH_internal) ? 1'b0 : zioh_3_ret[15];
  assign ZIOH[68]  = (POCH_internal) ? 1'b0 : zioh_3_ret[14];
  assign ZIOH[67]  = (POCH_internal) ? 1'b0 : zioh_3_ret[13];
  assign ZIOH[66]  = (POCH_internal) ? 1'b0 : zioh_3_ret[12];
  assign ZIOH[65]  = (POCH_internal) ? 1'b0 : zioh_3_ret[11];
  assign ZIOH[64]  = (POCH_internal) ? 1'b0 : zioh_3_ret[10];
  assign ZIOH[63]  = (POCH_internal) ? 1'b0 : zioh_3_ret[9];
  assign ZIOH[62]  = (POCH_internal) ? 1'b0 : zioh_3_ret[8];
  assign ZIOH[61]  = (POCH_internal) ? 1'b0 : zioh_3_ret[7];
  assign ZIOH[60]  = (POCH_internal) ? 1'b0 : zioh_3_ret[6];
  assign ZIOH[59]  = (POCH_internal) ? 1'b0 : zioh_3_ret[5];
  assign ZIOH[58]  = (POCH_internal) ? 1'b0 : zioh_3_ret[4];
  assign ZIOH[57]  = (POCH_internal) ? 1'b0 : zioh_3_ret[3];
  assign ZIOH[56]  = (POCH_internal) ? 1'b0 : zioh_3_ret[2];
  assign ZIOH[55]  = (POCH_internal) ? 1'b0 : zioh_3_ret[1];
  assign ZIOH[54]  = (POCH_internal) ? 1'b0 : zioh_3_ret[0];

  assign ZIOH[53]  = (POCH_internal) ? 1'b0 : zioh_2_ret[17];
  assign ZIOH[52]  = (POCH_internal) ? 1'b0 : zioh_2_ret[16];
  assign ZIOH[51]  = (POCH_internal) ? 1'b0 : zioh_2_ret[15];
  assign ZIOH[50]  = (POCH_internal) ? 1'b0 : zioh_2_ret[14];
  assign ZIOH[49]  = (POCH_internal) ? 1'b0 : zioh_2_ret[13];
  assign ZIOH[48]  = (POCH_internal) ? 1'b0 : zioh_2_ret[12];
  assign ZIOH[47]  = (POCH_internal) ? 1'b0 : zioh_2_ret[11];
  assign ZIOH[46]  = (POCH_internal) ? 1'b0 : zioh_2_ret[10];
  assign ZIOH[45]  = (POCH_internal) ? 1'b0 : zioh_2_ret[9];
  assign ZIOH[44]  = (POCH_internal) ? 1'b0 : zioh_2_ret[8];
  assign ZIOH[43]  = (POCH_internal) ? 1'b0 : zioh_2_ret[7];
  assign ZIOH[42]  = (POCH_internal) ? 1'b0 : zioh_2_ret[6];
  assign ZIOH[41]  = (POCH_internal) ? 1'b0 : zioh_2_ret[5];
  assign ZIOH[40]  = (POCH_internal) ? 1'b0 : zioh_2_ret[4];
  assign ZIOH[39]  = (POCH_internal) ? 1'b0 : zioh_2_ret[3];
  assign ZIOH[38]  = (POCH_internal) ? 1'b0 : zioh_2_ret[2];
  assign ZIOH[37]  = (POCH_internal) ? 1'b0 : zioh_2_ret[1];
  assign ZIOH[36]  = (POCH_internal) ? 1'b0 : zioh_2_ret[0];

  assign ZIOH[35]  = (POCH_internal) ? 1'b0 : zioh_1_ret[17];
  assign ZIOH[34]  = (POCH_internal) ? 1'b0 : zioh_1_ret[16];
  assign ZIOH[33]  = (POCH_internal) ? 1'b0 : zioh_1_ret[15];
  assign ZIOH[32]  = (POCH_internal) ? 1'b0 : zioh_1_ret[14];
  assign ZIOH[31]  = (POCH_internal) ? 1'b0 : zioh_1_ret[13];
  assign ZIOH[30]  = (POCH_internal) ? 1'b0 : zioh_1_ret[12];
  assign ZIOH[29]  = (POCH_internal) ? 1'b0 : zioh_1_ret[11];
  assign ZIOH[28]  = (POCH_internal) ? 1'b0 : zioh_1_ret[10];
  assign ZIOH[27]  = (POCH_internal) ? 1'b0 : zioh_1_ret[9];
  assign ZIOH[26]  = (POCH_internal) ? 1'b0 : zioh_1_ret[8];
  assign ZIOH[25]  = (POCH_internal) ? 1'b0 : zioh_1_ret[7];
  assign ZIOH[24]  = (POCH_internal) ? 1'b0 : zioh_1_ret[6];
  assign ZIOH[23]  = (POCH_internal) ? 1'b0 : zioh_1_ret[5];
  assign ZIOH[22]  = (POCH_internal) ? 1'b0 : zioh_1_ret[4];
  assign ZIOH[21]  = (POCH_internal) ? 1'b0 : zioh_1_ret[3];
  assign ZIOH[20]  = (POCH_internal) ? 1'b0 : zioh_1_ret[2];
  assign ZIOH[19]  = (POCH_internal) ? 1'b0 : zioh_1_ret[1];
  assign ZIOH[18]  = (POCH_internal) ? 1'b0 : zioh_1_ret[0];

  assign ZIOH[17]   = (POCH_internal) ? 1'b0 : zioh_0_ret[17];
  assign ZIOH[16]   = (POCH_internal) ? 1'b0 : zioh_0_ret[16];
  assign ZIOH[15]   = (POCH_internal) ? 1'b0 : zioh_0_ret[15];
  assign ZIOH[14]   = (POCH_internal) ? 1'b0 : zioh_0_ret[14];
  assign ZIOH[13]   = (POCH_internal) ? 1'b0 : zioh_0_ret[13];
  assign ZIOH[12]   = (POCH_internal) ? 1'b0 : zioh_0_ret[12];
  assign ZIOH[11]   = (POCH_internal) ? 1'b0 : zioh_0_ret[11];
  assign ZIOH[10]   = (POCH_internal) ? 1'b0 : zioh_0_ret[10];
  assign ZIOH[9]   = (POCH_internal) ? 1'b0 : zioh_0_ret[9];
  assign ZIOH[8]   = (POCH_internal) ? 1'b0 : zioh_0_ret[8];
  assign ZIOH[7]   = (POCH_internal) ? 1'b0 : zioh_0_ret[7];
  assign ZIOH[6]   = (POCH_internal) ? 1'b0 : zioh_0_ret[6];
  assign ZIOH[5]   = (POCH_internal) ? 1'b0 : zioh_0_ret[5];
  assign ZIOH[4]   = (POCH_internal) ? 1'b0 : zioh_0_ret[4];
  assign ZIOH[3]   = (POCH_internal) ? 1'b0 : zioh_0_ret[3];
  assign ZIOH[2]   = (POCH_internal) ? 1'b0 : zioh_0_ret[2];
  assign ZIOH[1]   = (POCH_internal) ? 1'b0 : zioh_0_ret[1];
  assign ZIOH[0]   = (POCH_internal) ? 1'b0 : zioh_0_ret[0];

//assign PAD 
or (REFEN_valid, REFEN_ret[0], REFEN_ret[1]);
bufif1 (PAD, 1'b1, REFEN_valid);

`ifdef DWC_DDRPHY_ATPG_MODEL
  assign zioh_3 = 18'b000000000000000_000;
  assign zioh_2 = 18'b000000000000000_000;
  assign zioh_1 = 18'b000000000111111_000;
  assign zioh_0 = 18'b000000000111111_000;
`else
  always @(ZCTRL[27:21]) begin
      case (ZCTRL[27:21])
         7'b0000_000 : zioh_3 = 18'b000000000000000_000;
         7'b0000_001 : zioh_3 = 18'b000000000000000_001;
         7'b0000_010 : zioh_3 = 18'b000000000000000_010;
         7'b0000_011 : zioh_3 = 18'b000000000000000_011;
         7'b0000_100 : zioh_3 = 18'b000000000000000_100;
         7'b0000_101 : zioh_3 = 18'b000000000000000_101;
         7'b0000_110 : zioh_3 = 18'b000000000000000_110;
         7'b0000_111 : zioh_3 = 18'b000000000000000_111;
         7'b0001_000 : zioh_3 = 18'b000000000000001_000;
         7'b0001_001 : zioh_3 = 18'b000000000000001_001;
         7'b0001_010 : zioh_3 = 18'b000000000000001_010;
         7'b0001_011 : zioh_3 = 18'b000000000000001_011;
         7'b0001_100 : zioh_3 = 18'b000000000000001_100;
         7'b0001_101 : zioh_3 = 18'b000000000000001_101;
         7'b0001_110 : zioh_3 = 18'b000000000000001_110;
         7'b0001_111 : zioh_3 = 18'b000000000000001_111;
         7'b0010_000 : zioh_3 = 18'b000000000000011_000;
         7'b0010_001 : zioh_3 = 18'b000000000000011_001;
         7'b0010_010 : zioh_3 = 18'b000000000000011_010;
         7'b0010_011 : zioh_3 = 18'b000000000000011_011;
         7'b0010_100 : zioh_3 = 18'b000000000000011_100;
         7'b0010_101 : zioh_3 = 18'b000000000000011_101;
         7'b0010_110 : zioh_3 = 18'b000000000000011_110;
         7'b0010_111 : zioh_3 = 18'b000000000000011_111;
         7'b0011_000 : zioh_3 = 18'b000000000000111_000;
         7'b0011_001 : zioh_3 = 18'b000000000000111_001;
         7'b0011_010 : zioh_3 = 18'b000000000000111_010;
         7'b0011_011 : zioh_3 = 18'b000000000000111_011;
         7'b0011_100 : zioh_3 = 18'b000000000000111_100;
         7'b0011_101 : zioh_3 = 18'b000000000000111_101;
         7'b0011_110 : zioh_3 = 18'b000000000000111_110;
         7'b0011_111 : zioh_3 = 18'b000000000000111_111;
         7'b0100_000 : zioh_3 = 18'b000000000001111_000;
         7'b0100_001 : zioh_3 = 18'b000000000001111_001;
         7'b0100_010 : zioh_3 = 18'b000000000001111_010;
         7'b0100_011 : zioh_3 = 18'b000000000001111_011;
         7'b0100_100 : zioh_3 = 18'b000000000001111_100;
         7'b0100_101 : zioh_3 = 18'b000000000001111_101;
         7'b0100_110 : zioh_3 = 18'b000000000001111_110;
         7'b0100_111 : zioh_3 = 18'b000000000001111_111;
         7'b0101_000 : zioh_3 = 18'b000000000011111_000;
         7'b0101_001 : zioh_3 = 18'b000000000011111_001;
         7'b0101_010 : zioh_3 = 18'b000000000011111_010;
         7'b0101_011 : zioh_3 = 18'b000000000011111_011;
         7'b0101_100 : zioh_3 = 18'b000000000011111_100;
         7'b0101_101 : zioh_3 = 18'b000000000011111_101;
         7'b0101_110 : zioh_3 = 18'b000000000011111_110;
         7'b0101_111 : zioh_3 = 18'b000000000011111_111;
         7'b0110_000 : zioh_3 = 18'b000000000111111_000;
         7'b0110_001 : zioh_3 = 18'b000000000111111_001;
         7'b0110_010 : zioh_3 = 18'b000000000111111_010;
         7'b0110_011 : zioh_3 = 18'b000000000111111_011;
         7'b0110_100 : zioh_3 = 18'b000000000111111_100;
         7'b0110_101 : zioh_3 = 18'b000000000111111_101;
         7'b0110_110 : zioh_3 = 18'b000000000111111_110;
         7'b0110_111 : zioh_3 = 18'b000000000111111_111;
         7'b0111_000 : zioh_3 = 18'b000000001111111_000;
         7'b0111_001 : zioh_3 = 18'b000000001111111_001;
         7'b0111_010 : zioh_3 = 18'b000000001111111_010;
         7'b0111_011 : zioh_3 = 18'b000000001111111_011;
         7'b0111_100 : zioh_3 = 18'b000000001111111_100;
         7'b0111_101 : zioh_3 = 18'b000000001111111_101;
         7'b0111_110 : zioh_3 = 18'b000000001111111_110;
         7'b0111_111 : zioh_3 = 18'b000000001111111_111;
         7'b1000_000 : zioh_3 = 18'b000000011111111_000;
         7'b1000_001 : zioh_3 = 18'b000000011111111_001;
         7'b1000_010 : zioh_3 = 18'b000000011111111_010;
         7'b1000_011 : zioh_3 = 18'b000000011111111_011;
         7'b1000_100 : zioh_3 = 18'b000000011111111_100;
         7'b1000_101 : zioh_3 = 18'b000000011111111_101;
         7'b1000_110 : zioh_3 = 18'b000000011111111_110;
         7'b1000_111 : zioh_3 = 18'b000000011111111_111;
         7'b1001_000 : zioh_3 = 18'b000000111111111_000;
         7'b1001_001 : zioh_3 = 18'b000000111111111_001;
         7'b1001_010 : zioh_3 = 18'b000000111111111_010;
         7'b1001_011 : zioh_3 = 18'b000000111111111_011;
         7'b1001_100 : zioh_3 = 18'b000000111111111_100;
         7'b1001_101 : zioh_3 = 18'b000000111111111_101;
         7'b1001_110 : zioh_3 = 18'b000000111111111_110;
         7'b1001_111 : zioh_3 = 18'b000000111111111_111;
         7'b1010_000 : zioh_3 = 18'b000001111111111_000;
         7'b1010_001 : zioh_3 = 18'b000001111111111_001;
         7'b1010_010 : zioh_3 = 18'b000001111111111_010;
         7'b1010_011 : zioh_3 = 18'b000001111111111_011;
         7'b1010_100 : zioh_3 = 18'b000001111111111_100;
         7'b1010_101 : zioh_3 = 18'b000001111111111_101;
         7'b1010_110 : zioh_3 = 18'b000001111111111_110;
         7'b1010_111 : zioh_3 = 18'b000001111111111_111;
         7'b1011_000 : zioh_3 = 18'b000011111111111_000;
         7'b1011_001 : zioh_3 = 18'b000011111111111_001;
         7'b1011_010 : zioh_3 = 18'b000011111111111_010;
         7'b1011_011 : zioh_3 = 18'b000011111111111_011;
         7'b1011_100 : zioh_3 = 18'b000011111111111_100;
         7'b1011_101 : zioh_3 = 18'b000011111111111_101;
         7'b1011_110 : zioh_3 = 18'b000011111111111_110;
         7'b1011_111 : zioh_3 = 18'b000011111111111_111;
         7'b1100_000 : zioh_3 = 18'b000111111111111_000;
         7'b1100_001 : zioh_3 = 18'b000111111111111_001;
         7'b1100_010 : zioh_3 = 18'b000111111111111_010;
         7'b1100_011 : zioh_3 = 18'b000111111111111_011;
         7'b1100_100 : zioh_3 = 18'b000111111111111_100;
         7'b1100_101 : zioh_3 = 18'b000111111111111_101;
         7'b1100_110 : zioh_3 = 18'b000111111111111_110;
         7'b1100_111 : zioh_3 = 18'b000111111111111_111;
         7'b1101_000 : zioh_3 = 18'b001111111111111_000;
         7'b1101_001 : zioh_3 = 18'b001111111111111_001;
         7'b1101_010 : zioh_3 = 18'b001111111111111_010;
         7'b1101_011 : zioh_3 = 18'b001111111111111_011;
         7'b1101_100 : zioh_3 = 18'b001111111111111_100;
         7'b1101_101 : zioh_3 = 18'b001111111111111_101;
         7'b1101_110 : zioh_3 = 18'b001111111111111_110;
         7'b1101_111 : zioh_3 = 18'b001111111111111_111;
         7'b1110_000 : zioh_3 = 18'b011111111111111_000;
         7'b1110_001 : zioh_3 = 18'b011111111111111_001;
         7'b1110_010 : zioh_3 = 18'b011111111111111_010;
         7'b1110_011 : zioh_3 = 18'b011111111111111_011;
         7'b1110_100 : zioh_3 = 18'b011111111111111_100;
         7'b1110_101 : zioh_3 = 18'b011111111111111_101;
         7'b1110_110 : zioh_3 = 18'b011111111111111_110;
         7'b1110_111 : zioh_3 = 18'b011111111111111_111;
         7'b1111_000 : zioh_3 = 18'b111111111111111_000;
         7'b1111_001 : zioh_3 = 18'b111111111111111_001;
         7'b1111_010 : zioh_3 = 18'b111111111111111_010;
         7'b1111_011 : zioh_3 = 18'b111111111111111_011;
         7'b1111_100 : zioh_3 = 18'b111111111111111_100;
         7'b1111_101 : zioh_3 = 18'b111111111111111_101;
         7'b1111_110 : zioh_3 = 18'b111111111111111_110;
         7'b1111_111 : zioh_3 = 18'b111111111111111_111;
         default     : zioh_3 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[20:14]) begin
      case (ZCTRL[20:14])
         7'b0000_000 : zioh_2 = 18'b000000000000000_000;
         7'b0000_001 : zioh_2 = 18'b000000000000000_001;
         7'b0000_010 : zioh_2 = 18'b000000000000000_010;
         7'b0000_011 : zioh_2 = 18'b000000000000000_011;
         7'b0000_100 : zioh_2 = 18'b000000000000000_100;
         7'b0000_101 : zioh_2 = 18'b000000000000000_101;
         7'b0000_110 : zioh_2 = 18'b000000000000000_110;
         7'b0000_111 : zioh_2 = 18'b000000000000000_111;
         7'b0001_000 : zioh_2 = 18'b000000000000001_000;
         7'b0001_001 : zioh_2 = 18'b000000000000001_001;
         7'b0001_010 : zioh_2 = 18'b000000000000001_010;
         7'b0001_011 : zioh_2 = 18'b000000000000001_011;
         7'b0001_100 : zioh_2 = 18'b000000000000001_100;
         7'b0001_101 : zioh_2 = 18'b000000000000001_101;
         7'b0001_110 : zioh_2 = 18'b000000000000001_110;
         7'b0001_111 : zioh_2 = 18'b000000000000001_111;
         7'b0010_000 : zioh_2 = 18'b000000000000011_000;
         7'b0010_001 : zioh_2 = 18'b000000000000011_001;
         7'b0010_010 : zioh_2 = 18'b000000000000011_010;
         7'b0010_011 : zioh_2 = 18'b000000000000011_011;
         7'b0010_100 : zioh_2 = 18'b000000000000011_100;
         7'b0010_101 : zioh_2 = 18'b000000000000011_101;
         7'b0010_110 : zioh_2 = 18'b000000000000011_110;
         7'b0010_111 : zioh_2 = 18'b000000000000011_111;
         7'b0011_000 : zioh_2 = 18'b000000000000111_000;
         7'b0011_001 : zioh_2 = 18'b000000000000111_001;
         7'b0011_010 : zioh_2 = 18'b000000000000111_010;
         7'b0011_011 : zioh_2 = 18'b000000000000111_011;
         7'b0011_100 : zioh_2 = 18'b000000000000111_100;
         7'b0011_101 : zioh_2 = 18'b000000000000111_101;
         7'b0011_110 : zioh_2 = 18'b000000000000111_110;
         7'b0011_111 : zioh_2 = 18'b000000000000111_111;
         7'b0100_000 : zioh_2 = 18'b000000000001111_000;
         7'b0100_001 : zioh_2 = 18'b000000000001111_001;
         7'b0100_010 : zioh_2 = 18'b000000000001111_010;
         7'b0100_011 : zioh_2 = 18'b000000000001111_011;
         7'b0100_100 : zioh_2 = 18'b000000000001111_100;
         7'b0100_101 : zioh_2 = 18'b000000000001111_101;
         7'b0100_110 : zioh_2 = 18'b000000000001111_110;
         7'b0100_111 : zioh_2 = 18'b000000000001111_111;
         7'b0101_000 : zioh_2 = 18'b000000000011111_000;
         7'b0101_001 : zioh_2 = 18'b000000000011111_001;
         7'b0101_010 : zioh_2 = 18'b000000000011111_010;
         7'b0101_011 : zioh_2 = 18'b000000000011111_011;
         7'b0101_100 : zioh_2 = 18'b000000000011111_100;
         7'b0101_101 : zioh_2 = 18'b000000000011111_101;
         7'b0101_110 : zioh_2 = 18'b000000000011111_110;
         7'b0101_111 : zioh_2 = 18'b000000000011111_111;
         7'b0110_000 : zioh_2 = 18'b000000000111111_000;
         7'b0110_001 : zioh_2 = 18'b000000000111111_001;
         7'b0110_010 : zioh_2 = 18'b000000000111111_010;
         7'b0110_011 : zioh_2 = 18'b000000000111111_011;
         7'b0110_100 : zioh_2 = 18'b000000000111111_100;
         7'b0110_101 : zioh_2 = 18'b000000000111111_101;
         7'b0110_110 : zioh_2 = 18'b000000000111111_110;
         7'b0110_111 : zioh_2 = 18'b000000000111111_111;
         7'b0111_000 : zioh_2 = 18'b000000001111111_000;
         7'b0111_001 : zioh_2 = 18'b000000001111111_001;
         7'b0111_010 : zioh_2 = 18'b000000001111111_010;
         7'b0111_011 : zioh_2 = 18'b000000001111111_011;
         7'b0111_100 : zioh_2 = 18'b000000001111111_100;
         7'b0111_101 : zioh_2 = 18'b000000001111111_101;
         7'b0111_110 : zioh_2 = 18'b000000001111111_110;
         7'b0111_111 : zioh_2 = 18'b000000001111111_111;
         7'b1000_000 : zioh_2 = 18'b000000011111111_000;
         7'b1000_001 : zioh_2 = 18'b000000011111111_001;
         7'b1000_010 : zioh_2 = 18'b000000011111111_010;
         7'b1000_011 : zioh_2 = 18'b000000011111111_011;
         7'b1000_100 : zioh_2 = 18'b000000011111111_100;
         7'b1000_101 : zioh_2 = 18'b000000011111111_101;
         7'b1000_110 : zioh_2 = 18'b000000011111111_110;
         7'b1000_111 : zioh_2 = 18'b000000011111111_111;
         7'b1001_000 : zioh_2 = 18'b000000111111111_000;
         7'b1001_001 : zioh_2 = 18'b000000111111111_001;
         7'b1001_010 : zioh_2 = 18'b000000111111111_010;
         7'b1001_011 : zioh_2 = 18'b000000111111111_011;
         7'b1001_100 : zioh_2 = 18'b000000111111111_100;
         7'b1001_101 : zioh_2 = 18'b000000111111111_101;
         7'b1001_110 : zioh_2 = 18'b000000111111111_110;
         7'b1001_111 : zioh_2 = 18'b000000111111111_111;
         7'b1010_000 : zioh_2 = 18'b000001111111111_000;
         7'b1010_001 : zioh_2 = 18'b000001111111111_001;
         7'b1010_010 : zioh_2 = 18'b000001111111111_010;
         7'b1010_011 : zioh_2 = 18'b000001111111111_011;
         7'b1010_100 : zioh_2 = 18'b000001111111111_100;
         7'b1010_101 : zioh_2 = 18'b000001111111111_101;
         7'b1010_110 : zioh_2 = 18'b000001111111111_110;
         7'b1010_111 : zioh_2 = 18'b000001111111111_111;
         7'b1011_000 : zioh_2 = 18'b000011111111111_000;
         7'b1011_001 : zioh_2 = 18'b000011111111111_001;
         7'b1011_010 : zioh_2 = 18'b000011111111111_010;
         7'b1011_011 : zioh_2 = 18'b000011111111111_011;
         7'b1011_100 : zioh_2 = 18'b000011111111111_100;
         7'b1011_101 : zioh_2 = 18'b000011111111111_101;
         7'b1011_110 : zioh_2 = 18'b000011111111111_110;
         7'b1011_111 : zioh_2 = 18'b000011111111111_111;
         7'b1100_000 : zioh_2 = 18'b000111111111111_000;
         7'b1100_001 : zioh_2 = 18'b000111111111111_001;
         7'b1100_010 : zioh_2 = 18'b000111111111111_010;
         7'b1100_011 : zioh_2 = 18'b000111111111111_011;
         7'b1100_100 : zioh_2 = 18'b000111111111111_100;
         7'b1100_101 : zioh_2 = 18'b000111111111111_101;
         7'b1100_110 : zioh_2 = 18'b000111111111111_110;
         7'b1100_111 : zioh_2 = 18'b000111111111111_111;
         7'b1101_000 : zioh_2 = 18'b001111111111111_000;
         7'b1101_001 : zioh_2 = 18'b001111111111111_001;
         7'b1101_010 : zioh_2 = 18'b001111111111111_010;
         7'b1101_011 : zioh_2 = 18'b001111111111111_011;
         7'b1101_100 : zioh_2 = 18'b001111111111111_100;
         7'b1101_101 : zioh_2 = 18'b001111111111111_101;
         7'b1101_110 : zioh_2 = 18'b001111111111111_110;
         7'b1101_111 : zioh_2 = 18'b001111111111111_111;
         7'b1110_000 : zioh_2 = 18'b011111111111111_000;
         7'b1110_001 : zioh_2 = 18'b011111111111111_001;
         7'b1110_010 : zioh_2 = 18'b011111111111111_010;
         7'b1110_011 : zioh_2 = 18'b011111111111111_011;
         7'b1110_100 : zioh_2 = 18'b011111111111111_100;
         7'b1110_101 : zioh_2 = 18'b011111111111111_101;
         7'b1110_110 : zioh_2 = 18'b011111111111111_110;
         7'b1110_111 : zioh_2 = 18'b011111111111111_111;
         7'b1111_000 : zioh_2 = 18'b111111111111111_000;
         7'b1111_001 : zioh_2 = 18'b111111111111111_001;
         7'b1111_010 : zioh_2 = 18'b111111111111111_010;
         7'b1111_011 : zioh_2 = 18'b111111111111111_011;
         7'b1111_100 : zioh_2 = 18'b111111111111111_100;
         7'b1111_101 : zioh_2 = 18'b111111111111111_101;
         7'b1111_110 : zioh_2 = 18'b111111111111111_110;
         7'b1111_111 : zioh_2 = 18'b111111111111111_111;
         default     : zioh_2 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[13:7]) begin
      case (ZCTRL[13:7])
         7'b0000_000 : zioh_1 = 18'b000000000000000_000;
         7'b0000_001 : zioh_1 = 18'b000000000000000_001;
         7'b0000_010 : zioh_1 = 18'b000000000000000_010;
         7'b0000_011 : zioh_1 = 18'b000000000000000_011;
         7'b0000_100 : zioh_1 = 18'b000000000000000_100;
         7'b0000_101 : zioh_1 = 18'b000000000000000_101;
         7'b0000_110 : zioh_1 = 18'b000000000000000_110;
         7'b0000_111 : zioh_1 = 18'b000000000000000_111;
         7'b0001_000 : zioh_1 = 18'b000000000000001_000;
         7'b0001_001 : zioh_1 = 18'b000000000000001_001;
         7'b0001_010 : zioh_1 = 18'b000000000000001_010;
         7'b0001_011 : zioh_1 = 18'b000000000000001_011;
         7'b0001_100 : zioh_1 = 18'b000000000000001_100;
         7'b0001_101 : zioh_1 = 18'b000000000000001_101;
         7'b0001_110 : zioh_1 = 18'b000000000000001_110;
         7'b0001_111 : zioh_1 = 18'b000000000000001_111;
         7'b0010_000 : zioh_1 = 18'b000000000000011_000;
         7'b0010_001 : zioh_1 = 18'b000000000000011_001;
         7'b0010_010 : zioh_1 = 18'b000000000000011_010;
         7'b0010_011 : zioh_1 = 18'b000000000000011_011;
         7'b0010_100 : zioh_1 = 18'b000000000000011_100;
         7'b0010_101 : zioh_1 = 18'b000000000000011_101;
         7'b0010_110 : zioh_1 = 18'b000000000000011_110;
         7'b0010_111 : zioh_1 = 18'b000000000000011_111;
         7'b0011_000 : zioh_1 = 18'b000000000000111_000;
         7'b0011_001 : zioh_1 = 18'b000000000000111_001;
         7'b0011_010 : zioh_1 = 18'b000000000000111_010;
         7'b0011_011 : zioh_1 = 18'b000000000000111_011;
         7'b0011_100 : zioh_1 = 18'b000000000000111_100;
         7'b0011_101 : zioh_1 = 18'b000000000000111_101;
         7'b0011_110 : zioh_1 = 18'b000000000000111_110;
         7'b0011_111 : zioh_1 = 18'b000000000000111_111;
         7'b0100_000 : zioh_1 = 18'b000000000001111_000;
         7'b0100_001 : zioh_1 = 18'b000000000001111_001;
         7'b0100_010 : zioh_1 = 18'b000000000001111_010;
         7'b0100_011 : zioh_1 = 18'b000000000001111_011;
         7'b0100_100 : zioh_1 = 18'b000000000001111_100;
         7'b0100_101 : zioh_1 = 18'b000000000001111_101;
         7'b0100_110 : zioh_1 = 18'b000000000001111_110;
         7'b0100_111 : zioh_1 = 18'b000000000001111_111;
         7'b0101_000 : zioh_1 = 18'b000000000011111_000;
         7'b0101_001 : zioh_1 = 18'b000000000011111_001;
         7'b0101_010 : zioh_1 = 18'b000000000011111_010;
         7'b0101_011 : zioh_1 = 18'b000000000011111_011;
         7'b0101_100 : zioh_1 = 18'b000000000011111_100;
         7'b0101_101 : zioh_1 = 18'b000000000011111_101;
         7'b0101_110 : zioh_1 = 18'b000000000011111_110;
         7'b0101_111 : zioh_1 = 18'b000000000011111_111;
         7'b0110_000 : zioh_1 = 18'b000000000111111_000;
         7'b0110_001 : zioh_1 = 18'b000000000111111_001;
         7'b0110_010 : zioh_1 = 18'b000000000111111_010;
         7'b0110_011 : zioh_1 = 18'b000000000111111_011;
         7'b0110_100 : zioh_1 = 18'b000000000111111_100;
         7'b0110_101 : zioh_1 = 18'b000000000111111_101;
         7'b0110_110 : zioh_1 = 18'b000000000111111_110;
         7'b0110_111 : zioh_1 = 18'b000000000111111_111;
         7'b0111_000 : zioh_1 = 18'b000000001111111_000;
         7'b0111_001 : zioh_1 = 18'b000000001111111_001;
         7'b0111_010 : zioh_1 = 18'b000000001111111_010;
         7'b0111_011 : zioh_1 = 18'b000000001111111_011;
         7'b0111_100 : zioh_1 = 18'b000000001111111_100;
         7'b0111_101 : zioh_1 = 18'b000000001111111_101;
         7'b0111_110 : zioh_1 = 18'b000000001111111_110;
         7'b0111_111 : zioh_1 = 18'b000000001111111_111;
         7'b1000_000 : zioh_1 = 18'b000000011111111_000;
         7'b1000_001 : zioh_1 = 18'b000000011111111_001;
         7'b1000_010 : zioh_1 = 18'b000000011111111_010;
         7'b1000_011 : zioh_1 = 18'b000000011111111_011;
         7'b1000_100 : zioh_1 = 18'b000000011111111_100;
         7'b1000_101 : zioh_1 = 18'b000000011111111_101;
         7'b1000_110 : zioh_1 = 18'b000000011111111_110;
         7'b1000_111 : zioh_1 = 18'b000000011111111_111;
         7'b1001_000 : zioh_1 = 18'b000000111111111_000;
         7'b1001_001 : zioh_1 = 18'b000000111111111_001;
         7'b1001_010 : zioh_1 = 18'b000000111111111_010;
         7'b1001_011 : zioh_1 = 18'b000000111111111_011;
         7'b1001_100 : zioh_1 = 18'b000000111111111_100;
         7'b1001_101 : zioh_1 = 18'b000000111111111_101;
         7'b1001_110 : zioh_1 = 18'b000000111111111_110;
         7'b1001_111 : zioh_1 = 18'b000000111111111_111;
         7'b1010_000 : zioh_1 = 18'b000001111111111_000;
         7'b1010_001 : zioh_1 = 18'b000001111111111_001;
         7'b1010_010 : zioh_1 = 18'b000001111111111_010;
         7'b1010_011 : zioh_1 = 18'b000001111111111_011;
         7'b1010_100 : zioh_1 = 18'b000001111111111_100;
         7'b1010_101 : zioh_1 = 18'b000001111111111_101;
         7'b1010_110 : zioh_1 = 18'b000001111111111_110;
         7'b1010_111 : zioh_1 = 18'b000001111111111_111;
         7'b1011_000 : zioh_1 = 18'b000011111111111_000;
         7'b1011_001 : zioh_1 = 18'b000011111111111_001;
         7'b1011_010 : zioh_1 = 18'b000011111111111_010;
         7'b1011_011 : zioh_1 = 18'b000011111111111_011;
         7'b1011_100 : zioh_1 = 18'b000011111111111_100;
         7'b1011_101 : zioh_1 = 18'b000011111111111_101;
         7'b1011_110 : zioh_1 = 18'b000011111111111_110;
         7'b1011_111 : zioh_1 = 18'b000011111111111_111;
         7'b1100_000 : zioh_1 = 18'b000111111111111_000;
         7'b1100_001 : zioh_1 = 18'b000111111111111_001;
         7'b1100_010 : zioh_1 = 18'b000111111111111_010;
         7'b1100_011 : zioh_1 = 18'b000111111111111_011;
         7'b1100_100 : zioh_1 = 18'b000111111111111_100;
         7'b1100_101 : zioh_1 = 18'b000111111111111_101;
         7'b1100_110 : zioh_1 = 18'b000111111111111_110;
         7'b1100_111 : zioh_1 = 18'b000111111111111_111;
         7'b1101_000 : zioh_1 = 18'b001111111111111_000;
         7'b1101_001 : zioh_1 = 18'b001111111111111_001;
         7'b1101_010 : zioh_1 = 18'b001111111111111_010;
         7'b1101_011 : zioh_1 = 18'b001111111111111_011;
         7'b1101_100 : zioh_1 = 18'b001111111111111_100;
         7'b1101_101 : zioh_1 = 18'b001111111111111_101;
         7'b1101_110 : zioh_1 = 18'b001111111111111_110;
         7'b1101_111 : zioh_1 = 18'b001111111111111_111;
         7'b1110_000 : zioh_1 = 18'b011111111111111_000;
         7'b1110_001 : zioh_1 = 18'b011111111111111_001;
         7'b1110_010 : zioh_1 = 18'b011111111111111_010;
         7'b1110_011 : zioh_1 = 18'b011111111111111_011;
         7'b1110_100 : zioh_1 = 18'b011111111111111_100;
         7'b1110_101 : zioh_1 = 18'b011111111111111_101;
         7'b1110_110 : zioh_1 = 18'b011111111111111_110;
         7'b1110_111 : zioh_1 = 18'b011111111111111_111;
         7'b1111_000 : zioh_1 = 18'b111111111111111_000;
         7'b1111_001 : zioh_1 = 18'b111111111111111_001;
         7'b1111_010 : zioh_1 = 18'b111111111111111_010;
         7'b1111_011 : zioh_1 = 18'b111111111111111_011;
         7'b1111_100 : zioh_1 = 18'b111111111111111_100;
         7'b1111_101 : zioh_1 = 18'b111111111111111_101;
         7'b1111_110 : zioh_1 = 18'b111111111111111_110;
         7'b1111_111 : zioh_1 = 18'b111111111111111_111;
         default     : zioh_1 = 18'b000000000111111_000;
      endcase
  end

  always @(ZCTRL[6:0]) begin
      case (ZCTRL[6:0])
         7'b0000_000 : zioh_0 = 18'b000000000000000_000;
         7'b0000_001 : zioh_0 = 18'b000000000000000_001;
         7'b0000_010 : zioh_0 = 18'b000000000000000_010;
         7'b0000_011 : zioh_0 = 18'b000000000000000_011;
         7'b0000_100 : zioh_0 = 18'b000000000000000_100;
         7'b0000_101 : zioh_0 = 18'b000000000000000_101;
         7'b0000_110 : zioh_0 = 18'b000000000000000_110;
         7'b0000_111 : zioh_0 = 18'b000000000000000_111;
         7'b0001_000 : zioh_0 = 18'b000000000000001_000;
         7'b0001_001 : zioh_0 = 18'b000000000000001_001;
         7'b0001_010 : zioh_0 = 18'b000000000000001_010;
         7'b0001_011 : zioh_0 = 18'b000000000000001_011;
         7'b0001_100 : zioh_0 = 18'b000000000000001_100;
         7'b0001_101 : zioh_0 = 18'b000000000000001_101;
         7'b0001_110 : zioh_0 = 18'b000000000000001_110;
         7'b0001_111 : zioh_0 = 18'b000000000000001_111;
         7'b0010_000 : zioh_0 = 18'b000000000000011_000;
         7'b0010_001 : zioh_0 = 18'b000000000000011_001;
         7'b0010_010 : zioh_0 = 18'b000000000000011_010;
         7'b0010_011 : zioh_0 = 18'b000000000000011_011;
         7'b0010_100 : zioh_0 = 18'b000000000000011_100;
         7'b0010_101 : zioh_0 = 18'b000000000000011_101;
         7'b0010_110 : zioh_0 = 18'b000000000000011_110;
         7'b0010_111 : zioh_0 = 18'b000000000000011_111;
         7'b0011_000 : zioh_0 = 18'b000000000000111_000;
         7'b0011_001 : zioh_0 = 18'b000000000000111_001;
         7'b0011_010 : zioh_0 = 18'b000000000000111_010;
         7'b0011_011 : zioh_0 = 18'b000000000000111_011;
         7'b0011_100 : zioh_0 = 18'b000000000000111_100;
         7'b0011_101 : zioh_0 = 18'b000000000000111_101;
         7'b0011_110 : zioh_0 = 18'b000000000000111_110;
         7'b0011_111 : zioh_0 = 18'b000000000000111_111;
         7'b0100_000 : zioh_0 = 18'b000000000001111_000;
         7'b0100_001 : zioh_0 = 18'b000000000001111_001;
         7'b0100_010 : zioh_0 = 18'b000000000001111_010;
         7'b0100_011 : zioh_0 = 18'b000000000001111_011;
         7'b0100_100 : zioh_0 = 18'b000000000001111_100;
         7'b0100_101 : zioh_0 = 18'b000000000001111_101;
         7'b0100_110 : zioh_0 = 18'b000000000001111_110;
         7'b0100_111 : zioh_0 = 18'b000000000001111_111;
         7'b0101_000 : zioh_0 = 18'b000000000011111_000;
         7'b0101_001 : zioh_0 = 18'b000000000011111_001;
         7'b0101_010 : zioh_0 = 18'b000000000011111_010;
         7'b0101_011 : zioh_0 = 18'b000000000011111_011;
         7'b0101_100 : zioh_0 = 18'b000000000011111_100;
         7'b0101_101 : zioh_0 = 18'b000000000011111_101;
         7'b0101_110 : zioh_0 = 18'b000000000011111_110;
         7'b0101_111 : zioh_0 = 18'b000000000011111_111;
         7'b0110_000 : zioh_0 = 18'b000000000111111_000;
         7'b0110_001 : zioh_0 = 18'b000000000111111_001;
         7'b0110_010 : zioh_0 = 18'b000000000111111_010;
         7'b0110_011 : zioh_0 = 18'b000000000111111_011;
         7'b0110_100 : zioh_0 = 18'b000000000111111_100;
         7'b0110_101 : zioh_0 = 18'b000000000111111_101;
         7'b0110_110 : zioh_0 = 18'b000000000111111_110;
         7'b0110_111 : zioh_0 = 18'b000000000111111_111;
         7'b0111_000 : zioh_0 = 18'b000000001111111_000;
         7'b0111_001 : zioh_0 = 18'b000000001111111_001;
         7'b0111_010 : zioh_0 = 18'b000000001111111_010;
         7'b0111_011 : zioh_0 = 18'b000000001111111_011;
         7'b0111_100 : zioh_0 = 18'b000000001111111_100;
         7'b0111_101 : zioh_0 = 18'b000000001111111_101;
         7'b0111_110 : zioh_0 = 18'b000000001111111_110;
         7'b0111_111 : zioh_0 = 18'b000000001111111_111;
         7'b1000_000 : zioh_0 = 18'b000000011111111_000;
         7'b1000_001 : zioh_0 = 18'b000000011111111_001;
         7'b1000_010 : zioh_0 = 18'b000000011111111_010;
         7'b1000_011 : zioh_0 = 18'b000000011111111_011;
         7'b1000_100 : zioh_0 = 18'b000000011111111_100;
         7'b1000_101 : zioh_0 = 18'b000000011111111_101;
         7'b1000_110 : zioh_0 = 18'b000000011111111_110;
         7'b1000_111 : zioh_0 = 18'b000000011111111_111;
         7'b1001_000 : zioh_0 = 18'b000000111111111_000;
         7'b1001_001 : zioh_0 = 18'b000000111111111_001;
         7'b1001_010 : zioh_0 = 18'b000000111111111_010;
         7'b1001_011 : zioh_0 = 18'b000000111111111_011;
         7'b1001_100 : zioh_0 = 18'b000000111111111_100;
         7'b1001_101 : zioh_0 = 18'b000000111111111_101;
         7'b1001_110 : zioh_0 = 18'b000000111111111_110;
         7'b1001_111 : zioh_0 = 18'b000000111111111_111;
         7'b1010_000 : zioh_0 = 18'b000001111111111_000;
         7'b1010_001 : zioh_0 = 18'b000001111111111_001;
         7'b1010_010 : zioh_0 = 18'b000001111111111_010;
         7'b1010_011 : zioh_0 = 18'b000001111111111_011;
         7'b1010_100 : zioh_0 = 18'b000001111111111_100;
         7'b1010_101 : zioh_0 = 18'b000001111111111_101;
         7'b1010_110 : zioh_0 = 18'b000001111111111_110;
         7'b1010_111 : zioh_0 = 18'b000001111111111_111;
         7'b1011_000 : zioh_0 = 18'b000011111111111_000;
         7'b1011_001 : zioh_0 = 18'b000011111111111_001;
         7'b1011_010 : zioh_0 = 18'b000011111111111_010;
         7'b1011_011 : zioh_0 = 18'b000011111111111_011;
         7'b1011_100 : zioh_0 = 18'b000011111111111_100;
         7'b1011_101 : zioh_0 = 18'b000011111111111_101;
         7'b1011_110 : zioh_0 = 18'b000011111111111_110;
         7'b1011_111 : zioh_0 = 18'b000011111111111_111;
         7'b1100_000 : zioh_0 = 18'b000111111111111_000;
         7'b1100_001 : zioh_0 = 18'b000111111111111_001;
         7'b1100_010 : zioh_0 = 18'b000111111111111_010;
         7'b1100_011 : zioh_0 = 18'b000111111111111_011;
         7'b1100_100 : zioh_0 = 18'b000111111111111_100;
         7'b1100_101 : zioh_0 = 18'b000111111111111_101;
         7'b1100_110 : zioh_0 = 18'b000111111111111_110;
         7'b1100_111 : zioh_0 = 18'b000111111111111_111;
         7'b1101_000 : zioh_0 = 18'b001111111111111_000;
         7'b1101_001 : zioh_0 = 18'b001111111111111_001;
         7'b1101_010 : zioh_0 = 18'b001111111111111_010;
         7'b1101_011 : zioh_0 = 18'b001111111111111_011;
         7'b1101_100 : zioh_0 = 18'b001111111111111_100;
         7'b1101_101 : zioh_0 = 18'b001111111111111_101;
         7'b1101_110 : zioh_0 = 18'b001111111111111_110;
         7'b1101_111 : zioh_0 = 18'b001111111111111_111;
         7'b1110_000 : zioh_0 = 18'b011111111111111_000;
         7'b1110_001 : zioh_0 = 18'b011111111111111_001;
         7'b1110_010 : zioh_0 = 18'b011111111111111_010;
         7'b1110_011 : zioh_0 = 18'b011111111111111_011;
         7'b1110_100 : zioh_0 = 18'b011111111111111_100;
         7'b1110_101 : zioh_0 = 18'b011111111111111_101;
         7'b1110_110 : zioh_0 = 18'b011111111111111_110;
         7'b1110_111 : zioh_0 = 18'b011111111111111_111;
         7'b1111_000 : zioh_0 = 18'b111111111111111_000;
         7'b1111_001 : zioh_0 = 18'b111111111111111_001;
         7'b1111_010 : zioh_0 = 18'b111111111111111_010;
         7'b1111_011 : zioh_0 = 18'b111111111111111_011;
         7'b1111_100 : zioh_0 = 18'b111111111111111_100;
         7'b1111_101 : zioh_0 = 18'b111111111111111_101;
         7'b1111_110 : zioh_0 = 18'b111111111111111_110;
         7'b1111_111 : zioh_0 = 18'b111111111111111_111;
         default     : zioh_0 = 18'b000000000111111_000;
      endcase
  end
`endif

  specify
      (ZCTRL[0] *> ZIOH[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[1] *> ZIOH[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[2] *> ZIOH[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[3] *> ZIOH[17], ZIOH[15], ZIOH[13], ZIOH[11], ZIOH[9], ZIOH[7], ZIOH[5], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[4] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[5] *> ZIOH[17], ZIOH[16], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[6] *> ZIOH[17], ZIOH[16], ZIOH[15], ZIOH[14], ZIOH[13], ZIOH[12], ZIOH[11], ZIOH[10], ZIOH[9], ZIOH[8], ZIOH[7], ZIOH[6], ZIOH[5], ZIOH[4], ZIOH[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[7] *> ZIOH[18]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[8] *> ZIOH[19]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[9] *> ZIOH[20]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[10] *> ZIOH[35], ZIOH[33], ZIOH[31], ZIOH[29], ZIOH[27], ZIOH[25], ZIOH[23], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[11] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[12] *> ZIOH[35], ZIOH[34], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[13] *> ZIOH[35], ZIOH[34], ZIOH[33], ZIOH[32], ZIOH[31], ZIOH[30], ZIOH[29], ZIOH[28], ZIOH[27], ZIOH[26], ZIOH[25], ZIOH[24], ZIOH[23], ZIOH[22], ZIOH[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[14] *> ZIOH[36]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[15] *> ZIOH[37]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[16] *> ZIOH[38]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[17] *> ZIOH[53], ZIOH[51], ZIOH[49], ZIOH[47], ZIOH[45], ZIOH[43], ZIOH[41], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[18] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[19] *> ZIOH[53], ZIOH[52], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[20] *> ZIOH[53], ZIOH[52], ZIOH[51], ZIOH[50], ZIOH[49], ZIOH[48], ZIOH[47], ZIOH[46], ZIOH[45], ZIOH[44], ZIOH[43], ZIOH[42], ZIOH[41], ZIOH[40], ZIOH[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[21] *> ZIOH[54]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[22] *> ZIOH[55]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[23] *> ZIOH[56]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[24] *> ZIOH[71], ZIOH[69], ZIOH[67], ZIOH[65], ZIOH[63], ZIOH[61], ZIOH[59], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[25] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[26] *> ZIOH[71], ZIOH[70], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[27] *> ZIOH[71], ZIOH[70], ZIOH[69], ZIOH[68], ZIOH[67], ZIOH[66], ZIOH[65], ZIOH[64], ZIOH[63], ZIOH[62], ZIOH[61], ZIOH[60], ZIOH[59], ZIOH[58], ZIOH[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (REFEN[0] => PAD)    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (REFEN[1] => PAD)    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

  endspecify

endmodule
`endcelldefine
   
//Jing: add DWC_D4MV_PVREF_DAC_NS
// ------------------------------
// SSTL reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PVREF_DAC_NS ( MVREF,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif
      REFEN, REFSEL, POCH, ZIOH, LENH, PDRH18, MVREFSE); 
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  inout  [3:0]      MVREF; 	    // Vref, MVREF[2:0] is generated by DAC1,2,3, MVREF[0] is feedthrough
  input  [2:0]      REFEN;          // Enable DAC1,2,3
  input  [17:0]     REFSEL;         // Select generated VREF value
  input             POCH;	    // Power-on clear high voltage
  input [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input	    PDRH18;
  input	    MVREFSE; // Special Vref for single ended receiver
  
  wire [2:0] REFEN_ret;
  
  reg refen_valid;

  initial
  begin
  	refen_valid = 1'b1;
  end
  
  parameter PREVENT_REFEN_ERR_AT_START = 0.001;  // disable REFEN errors for first picosecond

//  generate the signal to gate off REFEN errors for the first picosecond of simulation

  reg gate_refen_error;

  initial 
  begin
	gate_refen_error = 1'b0;
  end

always@(REFEN) begin

   if (gate_refen_error == 1'b0) begin

      gate_refen_error <= #( PREVENT_REFEN_ERR_AT_START)  1'b1;

   end

end

 
 // check if REFEN[2:0] is being driven to a valid state
  always @(REFEN) begin
      case (REFEN[2:0])
        3'b000 	: refen_valid = 1'b1;
	3'b001 	: refen_valid = 1'b1;
	3'b010 	: refen_valid = 1'b1;
	3'b011 	: refen_valid = 1'b1;
	3'b100 	: refen_valid = 1'b1;
	3'b101 	: refen_valid = 1'b1;
	3'b110 	: refen_valid = 1'b1;
	3'b111 	: refen_valid = 1'b1;
	default : refen_valid = 1'b0;
      endcase
  end  

 

//Check for errors on REFEN[2:0] if error checks are not gated/discabled

always @(refen_valid)

   begin

      if (gate_refen_error == 1'b1) begin

         if (refen_valid === 1'b0)  $display("ERROR: Incorrect value on REFEN[2:0] - %b", REFEN[2:0]);

      end

   end

    
  DWC_D4MV_LATCH REFEN0_lat (REFEN_ret[0], REFEN[0], LENH); 
  DWC_D4MV_LATCH REFEN1_lat (REFEN_ret[1], REFEN[1], LENH);  
  DWC_D4MV_LATCH REFEN2_lat (REFEN_ret[2], REFEN[2], LENH);        
         bufif1 (MVREF[1], 1'b1, REFEN_ret[0]);
         bufif1 (MVREF[2], 1'b1, REFEN_ret[1]);
         bufif1 (MVREF[3], 1'b1, REFEN_ret[2]);  
        
reg dac1refsel_valid;
reg dac2refsel_valid;
reg dac3refsel_valid;

  initial
  begin
    dac1refsel_valid = 1'b1;
    dac2refsel_valid = 1'b1;
    dac3refsel_valid = 1'b1;
  end

 // check if REFSEL[5:0] is being driven to a valid state
    always @(REFSEL[5:0]) begin
      case (REFSEL[5:0])
        6'b000000 	: dac1refsel_valid = 1'b1;
	6'b000001 	: dac1refsel_valid = 1'b1;
	6'b000010 	: dac1refsel_valid = 1'b1;
	6'b000011 	: dac1refsel_valid = 1'b1;
	6'b000100 	: dac1refsel_valid = 1'b1;
	6'b000101 	: dac1refsel_valid = 1'b1;
	6'b000110 	: dac1refsel_valid = 1'b1;
	6'b000111 	: dac1refsel_valid = 1'b1;
	6'b001000 	: dac1refsel_valid = 1'b1;
	6'b001001 	: dac1refsel_valid = 1'b1;
	6'b001010 	: dac1refsel_valid = 1'b1;
	6'b001011 	: dac1refsel_valid = 1'b1;
	6'b001100 	: dac1refsel_valid = 1'b1;
	6'b001101 	: dac1refsel_valid = 1'b1;
	6'b001110 	: dac1refsel_valid = 1'b1;
	6'b001111 	: dac1refsel_valid = 1'b1;
	6'b010000 	: dac1refsel_valid = 1'b1;
	6'b010001 	: dac1refsel_valid = 1'b1;
	6'b010010 	: dac1refsel_valid = 1'b1;
	6'b010011 	: dac1refsel_valid = 1'b1;
	6'b010100 	: dac1refsel_valid = 1'b1;
	6'b010101 	: dac1refsel_valid = 1'b1;
	6'b010110 	: dac1refsel_valid = 1'b1;
	6'b010111 	: dac1refsel_valid = 1'b1;
	6'b011000 	: dac1refsel_valid = 1'b1;
	6'b011001 	: dac1refsel_valid = 1'b1;
	6'b011010 	: dac1refsel_valid = 1'b1;
	6'b011011 	: dac1refsel_valid = 1'b1;
	6'b011100 	: dac1refsel_valid = 1'b1;
	6'b011101 	: dac1refsel_valid = 1'b1;
	6'b011110 	: dac1refsel_valid = 1'b1;
	6'b011111 	: dac1refsel_valid = 1'b1;
	6'b100000 	: dac1refsel_valid = 1'b1;
	6'b100001 	: dac1refsel_valid = 1'b1;
	6'b100010 	: dac1refsel_valid = 1'b1;
	6'b100011 	: dac1refsel_valid = 1'b1;
	6'b100100 	: dac1refsel_valid = 1'b1;
	6'b100101 	: dac1refsel_valid = 1'b1;
	6'b100110 	: dac1refsel_valid = 1'b1;
	6'b100111 	: dac1refsel_valid = 1'b1;
	6'b101000 	: dac1refsel_valid = 1'b1;
	6'b101001 	: dac1refsel_valid = 1'b1;
	6'b101010 	: dac1refsel_valid = 1'b1;
	6'b101011 	: dac1refsel_valid = 1'b1;
	6'b101100 	: dac1refsel_valid = 1'b1;
	6'b101101 	: dac1refsel_valid = 1'b1;
	6'b101110 	: dac1refsel_valid = 1'b1;
	6'b101111 	: dac1refsel_valid = 1'b1;
	6'b110000 	: dac1refsel_valid = 1'b1;
	6'b110001 	: dac1refsel_valid = 1'b1;
	6'b110010 	: dac1refsel_valid = 1'b1;
	6'b110011 	: dac1refsel_valid = 1'b1;
	6'b110100 	: dac1refsel_valid = 1'b1;
	6'b110101 	: dac1refsel_valid = 1'b1;
	6'b110110 	: dac1refsel_valid = 1'b1;
	6'b110111 	: dac1refsel_valid = 1'b1;
	6'b111000 	: dac1refsel_valid = 1'b1;
	6'b111001 	: dac1refsel_valid = 1'b1;
	6'b111010 	: dac1refsel_valid = 1'b1;
	6'b111011 	: dac1refsel_valid = 1'b1;
	6'b111100 	: dac1refsel_valid = 1'b1;
	6'b111101 	: dac1refsel_valid = 1'b1;
	6'b111110 	: dac1refsel_valid = 1'b1;
	6'b111111 	: dac1refsel_valid = 1'b1;
	default 	: dac1refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_5_0_ERR_AT_START = 0.001;  // disable REFSEL[5:0] errors for first picosecond

//  generate the signal to gate off REFSEL[5:0] errors for the first picosecond of simulation

  reg gate_refsel_5_0_error;

  initial 
  begin
	gate_refsel_5_0_error = 1'b0;
  end

always@(REFSEL[5:0]) begin

   if (gate_refsel_5_0_error == 1'b0) begin

      gate_refsel_5_0_error <= #( PREVENT_REFSEL_5_0_ERR_AT_START)  1'b1;

   end

end

 
  always @(dac1refsel_valid)

   begin

      if (gate_refsel_5_0_error == 1'b1) begin

      	if (dac1refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[5:0] -  %b", REFSEL[5:0]);
      
      end
   end 

// check if REFSEL[11:6] is being driven to a valid state
  always @(REFSEL[11:6]) begin
      case (REFSEL[11:6])
        6'b000000 	: dac2refsel_valid = 1'b1;
	6'b000001 	: dac2refsel_valid = 1'b1;
	6'b000010 	: dac2refsel_valid = 1'b1;
	6'b000011 	: dac2refsel_valid = 1'b1;
	6'b000100 	: dac2refsel_valid = 1'b1;
	6'b000101 	: dac2refsel_valid = 1'b1;
	6'b000110 	: dac2refsel_valid = 1'b1;
	6'b000111 	: dac2refsel_valid = 1'b1;
	6'b001000 	: dac2refsel_valid = 1'b1;
	6'b001001 	: dac2refsel_valid = 1'b1;
	6'b001010 	: dac2refsel_valid = 1'b1;
	6'b001011 	: dac2refsel_valid = 1'b1;
	6'b001100 	: dac2refsel_valid = 1'b1;
	6'b001101 	: dac2refsel_valid = 1'b1;
	6'b001110 	: dac2refsel_valid = 1'b1;
	6'b001111 	: dac2refsel_valid = 1'b1;
	6'b010000 	: dac2refsel_valid = 1'b1;
	6'b010001 	: dac2refsel_valid = 1'b1;
	6'b010010 	: dac2refsel_valid = 1'b1;
	6'b010011 	: dac2refsel_valid = 1'b1;
	6'b010100 	: dac2refsel_valid = 1'b1;
	6'b010101 	: dac2refsel_valid = 1'b1;
	6'b010110 	: dac2refsel_valid = 1'b1;
	6'b010111 	: dac2refsel_valid = 1'b1;
	6'b011000 	: dac2refsel_valid = 1'b1;
	6'b011001 	: dac2refsel_valid = 1'b1;
	6'b011010 	: dac2refsel_valid = 1'b1;
	6'b011011 	: dac2refsel_valid = 1'b1;
	6'b011100 	: dac2refsel_valid = 1'b1;
	6'b011101 	: dac2refsel_valid = 1'b1;
	6'b011110 	: dac2refsel_valid = 1'b1;
	6'b011111 	: dac2refsel_valid = 1'b1;
	6'b100000 	: dac2refsel_valid = 1'b1;
	6'b100001 	: dac2refsel_valid = 1'b1;
	6'b100010 	: dac2refsel_valid = 1'b1;
	6'b100011 	: dac2refsel_valid = 1'b1;
	6'b100100 	: dac2refsel_valid = 1'b1;
	6'b100101 	: dac2refsel_valid = 1'b1;
	6'b100110 	: dac2refsel_valid = 1'b1;
	6'b100111 	: dac2refsel_valid = 1'b1;
	6'b101000 	: dac2refsel_valid = 1'b1;
	6'b101001 	: dac2refsel_valid = 1'b1;
	6'b101010 	: dac2refsel_valid = 1'b1;
	6'b101011 	: dac2refsel_valid = 1'b1;
	6'b101100 	: dac2refsel_valid = 1'b1;
	6'b101101 	: dac2refsel_valid = 1'b1;
	6'b101110 	: dac2refsel_valid = 1'b1;
	6'b101111 	: dac2refsel_valid = 1'b1;
	6'b110000 	: dac2refsel_valid = 1'b1;
	6'b110001 	: dac2refsel_valid = 1'b1;
	6'b110010 	: dac2refsel_valid = 1'b1;
	6'b110011 	: dac2refsel_valid = 1'b1;
	6'b110100 	: dac2refsel_valid = 1'b1;
	6'b110101 	: dac2refsel_valid = 1'b1;
	6'b110110 	: dac2refsel_valid = 1'b1;
	6'b110111 	: dac2refsel_valid = 1'b1;
	6'b111000 	: dac2refsel_valid = 1'b1;
	6'b111001 	: dac2refsel_valid = 1'b1;
	6'b111010 	: dac2refsel_valid = 1'b1;
	6'b111011 	: dac2refsel_valid = 1'b1;
	6'b111100 	: dac2refsel_valid = 1'b1;
	6'b111101 	: dac2refsel_valid = 1'b1;
	6'b111110 	: dac2refsel_valid = 1'b1;
	6'b111111 	: dac2refsel_valid = 1'b1;
	default 	: dac2refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_11_6_ERR_AT_START = 0.001;  // disable REFSEL[11:6] errors for first picosecond

//  generate the signal to gate off REFSEL[11:6] errors for the first picosecond of simulation

  reg gate_refsel_11_6_error;

  initial 
  begin
	gate_refsel_11_6_error = 1'b0;
  end

always@(REFSEL[11:6]) begin

   if (gate_refsel_11_6_error == 1'b0) begin

      gate_refsel_11_6_error <= #( PREVENT_REFSEL_11_6_ERR_AT_START)  1'b1;

   end

end

 
  always @(dac2refsel_valid)

   begin

      if (gate_refsel_11_6_error == 1'b1) begin

      	if (dac2refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[11:6] -  %b", REFSEL[11:6]);
      
      end
   end 

// check if REFSEL[17:12] is being driven to a valid state
  always @(REFSEL[17:12]) begin
      case (REFSEL[17:12])
        6'b000000 	: dac3refsel_valid = 1'b1;
	6'b000001 	: dac3refsel_valid = 1'b1;
	6'b000010 	: dac3refsel_valid = 1'b1;
	6'b000011 	: dac3refsel_valid = 1'b1;
	6'b000100 	: dac3refsel_valid = 1'b1;
	6'b000101 	: dac3refsel_valid = 1'b1;
	6'b000110 	: dac3refsel_valid = 1'b1;
	6'b000111 	: dac3refsel_valid = 1'b1;
	6'b001000 	: dac3refsel_valid = 1'b1;
	6'b001001 	: dac3refsel_valid = 1'b1;
	6'b001010 	: dac3refsel_valid = 1'b1;
	6'b001011 	: dac3refsel_valid = 1'b1;
	6'b001100 	: dac3refsel_valid = 1'b1;
	6'b001101 	: dac3refsel_valid = 1'b1;
	6'b001110 	: dac3refsel_valid = 1'b1;
	6'b001111 	: dac3refsel_valid = 1'b1;
	6'b010000 	: dac3refsel_valid = 1'b1;
	6'b010001 	: dac3refsel_valid = 1'b1;
	6'b010010 	: dac3refsel_valid = 1'b1;
	6'b010011 	: dac3refsel_valid = 1'b1;
	6'b010100 	: dac3refsel_valid = 1'b1;
	6'b010101 	: dac3refsel_valid = 1'b1;
	6'b010110 	: dac3refsel_valid = 1'b1;
	6'b010111 	: dac3refsel_valid = 1'b1;
	6'b011000 	: dac3refsel_valid = 1'b1;
	6'b011001 	: dac3refsel_valid = 1'b1;
	6'b011010 	: dac3refsel_valid = 1'b1;
	6'b011011 	: dac3refsel_valid = 1'b1;
	6'b011100 	: dac3refsel_valid = 1'b1;
	6'b011101 	: dac3refsel_valid = 1'b1;
	6'b011110 	: dac3refsel_valid = 1'b1;
	6'b011111 	: dac3refsel_valid = 1'b1;
	6'b100000 	: dac3refsel_valid = 1'b1;
	6'b100001 	: dac3refsel_valid = 1'b1;
	6'b100010 	: dac3refsel_valid = 1'b1;
	6'b100011 	: dac3refsel_valid = 1'b1;
	6'b100100 	: dac3refsel_valid = 1'b1;
	6'b100101 	: dac3refsel_valid = 1'b1;
	6'b100110 	: dac3refsel_valid = 1'b1;
	6'b100111 	: dac3refsel_valid = 1'b1;
	6'b101000 	: dac3refsel_valid = 1'b1;
	6'b101001 	: dac3refsel_valid = 1'b1;
	6'b101010 	: dac3refsel_valid = 1'b1;
	6'b101011 	: dac3refsel_valid = 1'b1;
	6'b101100 	: dac3refsel_valid = 1'b1;
	6'b101101 	: dac3refsel_valid = 1'b1;
	6'b101110 	: dac3refsel_valid = 1'b1;
	6'b101111 	: dac3refsel_valid = 1'b1;
	6'b110000 	: dac3refsel_valid = 1'b1;
	6'b110001 	: dac3refsel_valid = 1'b1;
	6'b110010 	: dac3refsel_valid = 1'b1;
	6'b110011 	: dac3refsel_valid = 1'b1;
	6'b110100 	: dac3refsel_valid = 1'b1;
	6'b110101 	: dac3refsel_valid = 1'b1;
	6'b110110 	: dac3refsel_valid = 1'b1;
	6'b110111 	: dac3refsel_valid = 1'b1;
	6'b111000 	: dac3refsel_valid = 1'b1;
	6'b111001 	: dac3refsel_valid = 1'b1;
	6'b111010 	: dac3refsel_valid = 1'b1;
	6'b111011 	: dac3refsel_valid = 1'b1;
	6'b111100 	: dac3refsel_valid = 1'b1;
	6'b111101 	: dac3refsel_valid = 1'b1;
	6'b111110 	: dac3refsel_valid = 1'b1;
	6'b111111 	: dac3refsel_valid = 1'b1;
	default 	: dac3refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_17_12_ERR_AT_START = 0.001;  // disable REFSEL[17:12] errors for first picosecond

//  generate the signal to gate off REFSEL[17:12] errors for the first picosecond of simulation

  reg gate_refsel_17_12_error;

  initial 
  begin
	gate_refsel_17_12_error = 1'b0;
  end

always@(REFSEL[17:12]) begin

   if (gate_refsel_17_12_error == 1'b0) begin

      gate_refsel_17_12_error <= #( PREVENT_REFSEL_17_12_ERR_AT_START)  1'b1;

   end

end

 
  always @(dac3refsel_valid)

   begin

      if (gate_refsel_17_12_error == 1'b1) begin

      	if (dac3refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[17:12] -  %b", REFSEL[17:12]);
      
      end
   end 

endmodule
`endcelldefine


//Jing: add DWC_D4MV_PVREF_DAC_EW
// ------------------------------
// SSTL reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PVREF_DAC_EW ( MVREF,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif
      REFEN, REFSEL, POCH, ZIOH, LENH, PDRH18, MVREFSE); 
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  inout  [3:0]      MVREF; 	    // Vref, MVREF[2:0] is generated by DAC1,2,3, MVREF[0] is feedthrough
  input  [2:0]      REFEN;          // Enable DAC1,2,3
  input  [17:0]     REFSEL;         // Select generated VREF value
  input             POCH;	    // Power-on clear high voltage
  input [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input	    PDRH18;
  input	    MVREFSE; // Special Vref for single ended receiver
  
  wire [2:0] REFEN_ret;
  
  reg refen_valid;

  initial
  begin
  	refen_valid = 1'b1;
  end
  
  parameter PREVENT_REFEN_ERR_AT_START = 0.001;  // disable REFEN errors for first picosecond

//  generate the signal to gate off REFEN errors for the first picosecond of simulation

  reg gate_refen_error;

  initial 
  begin
	gate_refen_error = 1'b0;
  end

always@(REFEN) begin

   if (gate_refen_error == 1'b0) begin

      gate_refen_error <= #( PREVENT_REFEN_ERR_AT_START)  1'b1;

   end

end

 
 // check if REFEN[2:0] is being driven to a valid state
  always @(REFEN) begin
      case (REFEN[2:0])
        3'b000 	: refen_valid = 1'b1;
	3'b001 	: refen_valid = 1'b1;
	3'b010 	: refen_valid = 1'b1;
	3'b011 	: refen_valid = 1'b1;
	3'b100 	: refen_valid = 1'b1;
	3'b101 	: refen_valid = 1'b1;
	3'b110 	: refen_valid = 1'b1;
	3'b111 	: refen_valid = 1'b1;
	default : refen_valid = 1'b0;
      endcase
  end  

 

//Check for errors on REFEN[2:0] if error checks are not gated/discabled

always @(refen_valid)

   begin

      if (gate_refen_error == 1'b1) begin

         if (refen_valid === 1'b0)  $display("ERROR: Incorrect value on REFEN[2:0] - %b", REFEN[2:0]);

      end

   end

    
  DWC_D4MV_LATCH REFEN0_lat (REFEN_ret[0], REFEN[0], LENH); 
  DWC_D4MV_LATCH REFEN1_lat (REFEN_ret[1], REFEN[1], LENH);  
  DWC_D4MV_LATCH REFEN2_lat (REFEN_ret[2], REFEN[2], LENH);        
         bufif1 (MVREF[1], 1'b1, REFEN_ret[0]);
         bufif1 (MVREF[2], 1'b1, REFEN_ret[1]);
         bufif1 (MVREF[3], 1'b1, REFEN_ret[2]);  
        
reg dac1refsel_valid;
reg dac2refsel_valid;
reg dac3refsel_valid;

  initial
  begin
    dac1refsel_valid = 1'b1;
    dac2refsel_valid = 1'b1;
    dac3refsel_valid = 1'b1;
  end

 // check if REFSEL[5:0] is being driven to a valid state
    always @(REFSEL[5:0]) begin
      case (REFSEL[5:0])
        6'b000000 	: dac1refsel_valid = 1'b1;
	6'b000001 	: dac1refsel_valid = 1'b1;
	6'b000010 	: dac1refsel_valid = 1'b1;
	6'b000011 	: dac1refsel_valid = 1'b1;
	6'b000100 	: dac1refsel_valid = 1'b1;
	6'b000101 	: dac1refsel_valid = 1'b1;
	6'b000110 	: dac1refsel_valid = 1'b1;
	6'b000111 	: dac1refsel_valid = 1'b1;
	6'b001000 	: dac1refsel_valid = 1'b1;
	6'b001001 	: dac1refsel_valid = 1'b1;
	6'b001010 	: dac1refsel_valid = 1'b1;
	6'b001011 	: dac1refsel_valid = 1'b1;
	6'b001100 	: dac1refsel_valid = 1'b1;
	6'b001101 	: dac1refsel_valid = 1'b1;
	6'b001110 	: dac1refsel_valid = 1'b1;
	6'b001111 	: dac1refsel_valid = 1'b1;
	6'b010000 	: dac1refsel_valid = 1'b1;
	6'b010001 	: dac1refsel_valid = 1'b1;
	6'b010010 	: dac1refsel_valid = 1'b1;
	6'b010011 	: dac1refsel_valid = 1'b1;
	6'b010100 	: dac1refsel_valid = 1'b1;
	6'b010101 	: dac1refsel_valid = 1'b1;
	6'b010110 	: dac1refsel_valid = 1'b1;
	6'b010111 	: dac1refsel_valid = 1'b1;
	6'b011000 	: dac1refsel_valid = 1'b1;
	6'b011001 	: dac1refsel_valid = 1'b1;
	6'b011010 	: dac1refsel_valid = 1'b1;
	6'b011011 	: dac1refsel_valid = 1'b1;
	6'b011100 	: dac1refsel_valid = 1'b1;
	6'b011101 	: dac1refsel_valid = 1'b1;
	6'b011110 	: dac1refsel_valid = 1'b1;
	6'b011111 	: dac1refsel_valid = 1'b1;
	6'b100000 	: dac1refsel_valid = 1'b1;
	6'b100001 	: dac1refsel_valid = 1'b1;
	6'b100010 	: dac1refsel_valid = 1'b1;
	6'b100011 	: dac1refsel_valid = 1'b1;
	6'b100100 	: dac1refsel_valid = 1'b1;
	6'b100101 	: dac1refsel_valid = 1'b1;
	6'b100110 	: dac1refsel_valid = 1'b1;
	6'b100111 	: dac1refsel_valid = 1'b1;
	6'b101000 	: dac1refsel_valid = 1'b1;
	6'b101001 	: dac1refsel_valid = 1'b1;
	6'b101010 	: dac1refsel_valid = 1'b1;
	6'b101011 	: dac1refsel_valid = 1'b1;
	6'b101100 	: dac1refsel_valid = 1'b1;
	6'b101101 	: dac1refsel_valid = 1'b1;
	6'b101110 	: dac1refsel_valid = 1'b1;
	6'b101111 	: dac1refsel_valid = 1'b1;
	6'b110000 	: dac1refsel_valid = 1'b1;
	6'b110001 	: dac1refsel_valid = 1'b1;
	6'b110010 	: dac1refsel_valid = 1'b1;
	6'b110011 	: dac1refsel_valid = 1'b1;
	6'b110100 	: dac1refsel_valid = 1'b1;
	6'b110101 	: dac1refsel_valid = 1'b1;
	6'b110110 	: dac1refsel_valid = 1'b1;
	6'b110111 	: dac1refsel_valid = 1'b1;
	6'b111000 	: dac1refsel_valid = 1'b1;
	6'b111001 	: dac1refsel_valid = 1'b1;
	6'b111010 	: dac1refsel_valid = 1'b1;
	6'b111011 	: dac1refsel_valid = 1'b1;
	6'b111100 	: dac1refsel_valid = 1'b1;
	6'b111101 	: dac1refsel_valid = 1'b1;
	6'b111110 	: dac1refsel_valid = 1'b1;
	6'b111111 	: dac1refsel_valid = 1'b1;
	default 	: dac1refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_5_0_ERR_AT_START = 0.001;  // disable REFSEL[5:0] errors for first picosecond

//  generate the signal to gate off REFSEL[5:0] errors for the first picosecond of simulation

  reg gate_refsel_5_0_error;

  initial 
  begin
	gate_refsel_5_0_error = 1'b0;
  end

always@(REFSEL[5:0]) begin

   if (gate_refsel_5_0_error == 1'b0) begin

      gate_refsel_5_0_error <= #( PREVENT_REFSEL_5_0_ERR_AT_START)  1'b1;

   end

end

 
  always @(dac1refsel_valid)

   begin

      if (gate_refsel_5_0_error == 1'b1) begin

      	if (dac1refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[5:0] -  %b", REFSEL[5:0]);
      
      end
   end 

// check if REFSEL[11:6] is being driven to a valid state
  always @(REFSEL[11:6]) begin
      case (REFSEL[11:6])
        6'b000000 	: dac2refsel_valid = 1'b1;
	6'b000001 	: dac2refsel_valid = 1'b1;
	6'b000010 	: dac2refsel_valid = 1'b1;
	6'b000011 	: dac2refsel_valid = 1'b1;
	6'b000100 	: dac2refsel_valid = 1'b1;
	6'b000101 	: dac2refsel_valid = 1'b1;
	6'b000110 	: dac2refsel_valid = 1'b1;
	6'b000111 	: dac2refsel_valid = 1'b1;
	6'b001000 	: dac2refsel_valid = 1'b1;
	6'b001001 	: dac2refsel_valid = 1'b1;
	6'b001010 	: dac2refsel_valid = 1'b1;
	6'b001011 	: dac2refsel_valid = 1'b1;
	6'b001100 	: dac2refsel_valid = 1'b1;
	6'b001101 	: dac2refsel_valid = 1'b1;
	6'b001110 	: dac2refsel_valid = 1'b1;
	6'b001111 	: dac2refsel_valid = 1'b1;
	6'b010000 	: dac2refsel_valid = 1'b1;
	6'b010001 	: dac2refsel_valid = 1'b1;
	6'b010010 	: dac2refsel_valid = 1'b1;
	6'b010011 	: dac2refsel_valid = 1'b1;
	6'b010100 	: dac2refsel_valid = 1'b1;
	6'b010101 	: dac2refsel_valid = 1'b1;
	6'b010110 	: dac2refsel_valid = 1'b1;
	6'b010111 	: dac2refsel_valid = 1'b1;
	6'b011000 	: dac2refsel_valid = 1'b1;
	6'b011001 	: dac2refsel_valid = 1'b1;
	6'b011010 	: dac2refsel_valid = 1'b1;
	6'b011011 	: dac2refsel_valid = 1'b1;
	6'b011100 	: dac2refsel_valid = 1'b1;
	6'b011101 	: dac2refsel_valid = 1'b1;
	6'b011110 	: dac2refsel_valid = 1'b1;
	6'b011111 	: dac2refsel_valid = 1'b1;
	6'b100000 	: dac2refsel_valid = 1'b1;
	6'b100001 	: dac2refsel_valid = 1'b1;
	6'b100010 	: dac2refsel_valid = 1'b1;
	6'b100011 	: dac2refsel_valid = 1'b1;
	6'b100100 	: dac2refsel_valid = 1'b1;
	6'b100101 	: dac2refsel_valid = 1'b1;
	6'b100110 	: dac2refsel_valid = 1'b1;
	6'b100111 	: dac2refsel_valid = 1'b1;
	6'b101000 	: dac2refsel_valid = 1'b1;
	6'b101001 	: dac2refsel_valid = 1'b1;
	6'b101010 	: dac2refsel_valid = 1'b1;
	6'b101011 	: dac2refsel_valid = 1'b1;
	6'b101100 	: dac2refsel_valid = 1'b1;
	6'b101101 	: dac2refsel_valid = 1'b1;
	6'b101110 	: dac2refsel_valid = 1'b1;
	6'b101111 	: dac2refsel_valid = 1'b1;
	6'b110000 	: dac2refsel_valid = 1'b1;
	6'b110001 	: dac2refsel_valid = 1'b1;
	6'b110010 	: dac2refsel_valid = 1'b1;
	6'b110011 	: dac2refsel_valid = 1'b1;
	6'b110100 	: dac2refsel_valid = 1'b1;
	6'b110101 	: dac2refsel_valid = 1'b1;
	6'b110110 	: dac2refsel_valid = 1'b1;
	6'b110111 	: dac2refsel_valid = 1'b1;
	6'b111000 	: dac2refsel_valid = 1'b1;
	6'b111001 	: dac2refsel_valid = 1'b1;
	6'b111010 	: dac2refsel_valid = 1'b1;
	6'b111011 	: dac2refsel_valid = 1'b1;
	6'b111100 	: dac2refsel_valid = 1'b1;
	6'b111101 	: dac2refsel_valid = 1'b1;
	6'b111110 	: dac2refsel_valid = 1'b1;
	6'b111111 	: dac2refsel_valid = 1'b1;
	default 	: dac2refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_11_6_ERR_AT_START = 0.001;  // disable REFSEL[11:6] errors for first picosecond

//  generate the signal to gate off REFSEL[11:6] errors for the first picosecond of simulation

  reg gate_refsel_11_6_error;

  initial 
  begin
	gate_refsel_11_6_error = 1'b0;
  end

always@(REFSEL[11:6]) begin

   if (gate_refsel_11_6_error == 1'b0) begin

      gate_refsel_11_6_error <= #( PREVENT_REFSEL_11_6_ERR_AT_START)  1'b1;

   end

end

 
  always @(dac2refsel_valid)

   begin

      if (gate_refsel_11_6_error == 1'b1) begin

      	if (dac2refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[11:6] -  %b", REFSEL[11:6]);
      
      end
   end 

// check if REFSEL[17:12] is being driven to a valid state
  always @(REFSEL[17:12]) begin
      case (REFSEL[17:12])
        6'b000000 	: dac3refsel_valid = 1'b1;
	6'b000001 	: dac3refsel_valid = 1'b1;
	6'b000010 	: dac3refsel_valid = 1'b1;
	6'b000011 	: dac3refsel_valid = 1'b1;
	6'b000100 	: dac3refsel_valid = 1'b1;
	6'b000101 	: dac3refsel_valid = 1'b1;
	6'b000110 	: dac3refsel_valid = 1'b1;
	6'b000111 	: dac3refsel_valid = 1'b1;
	6'b001000 	: dac3refsel_valid = 1'b1;
	6'b001001 	: dac3refsel_valid = 1'b1;
	6'b001010 	: dac3refsel_valid = 1'b1;
	6'b001011 	: dac3refsel_valid = 1'b1;
	6'b001100 	: dac3refsel_valid = 1'b1;
	6'b001101 	: dac3refsel_valid = 1'b1;
	6'b001110 	: dac3refsel_valid = 1'b1;
	6'b001111 	: dac3refsel_valid = 1'b1;
	6'b010000 	: dac3refsel_valid = 1'b1;
	6'b010001 	: dac3refsel_valid = 1'b1;
	6'b010010 	: dac3refsel_valid = 1'b1;
	6'b010011 	: dac3refsel_valid = 1'b1;
	6'b010100 	: dac3refsel_valid = 1'b1;
	6'b010101 	: dac3refsel_valid = 1'b1;
	6'b010110 	: dac3refsel_valid = 1'b1;
	6'b010111 	: dac3refsel_valid = 1'b1;
	6'b011000 	: dac3refsel_valid = 1'b1;
	6'b011001 	: dac3refsel_valid = 1'b1;
	6'b011010 	: dac3refsel_valid = 1'b1;
	6'b011011 	: dac3refsel_valid = 1'b1;
	6'b011100 	: dac3refsel_valid = 1'b1;
	6'b011101 	: dac3refsel_valid = 1'b1;
	6'b011110 	: dac3refsel_valid = 1'b1;
	6'b011111 	: dac3refsel_valid = 1'b1;
	6'b100000 	: dac3refsel_valid = 1'b1;
	6'b100001 	: dac3refsel_valid = 1'b1;
	6'b100010 	: dac3refsel_valid = 1'b1;
	6'b100011 	: dac3refsel_valid = 1'b1;
	6'b100100 	: dac3refsel_valid = 1'b1;
	6'b100101 	: dac3refsel_valid = 1'b1;
	6'b100110 	: dac3refsel_valid = 1'b1;
	6'b100111 	: dac3refsel_valid = 1'b1;
	6'b101000 	: dac3refsel_valid = 1'b1;
	6'b101001 	: dac3refsel_valid = 1'b1;
	6'b101010 	: dac3refsel_valid = 1'b1;
	6'b101011 	: dac3refsel_valid = 1'b1;
	6'b101100 	: dac3refsel_valid = 1'b1;
	6'b101101 	: dac3refsel_valid = 1'b1;
	6'b101110 	: dac3refsel_valid = 1'b1;
	6'b101111 	: dac3refsel_valid = 1'b1;
	6'b110000 	: dac3refsel_valid = 1'b1;
	6'b110001 	: dac3refsel_valid = 1'b1;
	6'b110010 	: dac3refsel_valid = 1'b1;
	6'b110011 	: dac3refsel_valid = 1'b1;
	6'b110100 	: dac3refsel_valid = 1'b1;
	6'b110101 	: dac3refsel_valid = 1'b1;
	6'b110110 	: dac3refsel_valid = 1'b1;
	6'b110111 	: dac3refsel_valid = 1'b1;
	6'b111000 	: dac3refsel_valid = 1'b1;
	6'b111001 	: dac3refsel_valid = 1'b1;
	6'b111010 	: dac3refsel_valid = 1'b1;
	6'b111011 	: dac3refsel_valid = 1'b1;
	6'b111100 	: dac3refsel_valid = 1'b1;
	6'b111101 	: dac3refsel_valid = 1'b1;
	6'b111110 	: dac3refsel_valid = 1'b1;
	6'b111111 	: dac3refsel_valid = 1'b1;
	default 	: dac3refsel_valid = 1'b0;
      endcase
  end  
  
   parameter PREVENT_REFSEL_17_12_ERR_AT_START = 0.001;  // disable REFSEL[17:12] errors for first picosecond

//  generate the signal to gate off REFSEL[17:12] errors for the first picosecond of simulation

  reg gate_refsel_17_12_error;

  initial 
  begin
	gate_refsel_17_12_error = 1'b0;
  end

always@(REFSEL[17:12]) begin

   if (gate_refsel_17_12_error == 1'b0) begin

      gate_refsel_17_12_error <= #( PREVENT_REFSEL_17_12_ERR_AT_START)  1'b1;

   end

end

 
  always @(dac3refsel_valid)

   begin

      if (gate_refsel_17_12_error == 1'b1) begin

      	if (dac3refsel_valid === 1'b0) $display("ERROR: Incorrect value on REFSEL[17:12] -  %b", REFSEL[17:12]);
      
      end
   end 

endmodule
`endcelldefine


// ------------------------------
// SSTL PZQ reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PZCTRL_NS (PAD, MVREF_ZQ,
`ifdef DWC_DDRPHY_PG_PINS
       MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif
       POCH, ZCTRL, ZIOH_ZQ, LENH, REFEN, REFSEL, PDRH18, ENPAD, MVREFSE_ZQ);
  inout             PAD;
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  output  [3:0]      MVREF_ZQ;
  input             REFEN;          // Enable internal VREF generator
  input  [5:0]      REFSEL;         // Select generated VREF value
  input             POCH;	          // Power-on clear high voltage
  input  [27:0]     ZCTRL;
  output [71:0]     ZIOH_ZQ;        // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		    PDRH18;
  input		    ENPAD; // Enable pass gate between MVREF and PAD
  output 	MVREFSE_ZQ;

`ifdef DWC_DDRPHY_ATPG_MODEL
  wire   [17:0]     zioh_3;
  wire   [17:0]     zioh_2;
  wire   [17:0]     zioh_1;
  wire   [17:0]     zioh_0;
`else
  reg    [17:0]     zioh_3;
  reg    [17:0]     zioh_2;
  reg    [17:0]     zioh_1;
  reg    [17:0]     zioh_0;
`endif

  wire   [17:0]     zioh_3_ret;
  wire   [17:0]     zioh_2_ret;
  wire   [17:0]     zioh_1_ret;
  wire   [17:0]     zioh_0_ret; 
  wire          POCH_internal;
  wire          LENH_b;

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  DWC_D4MV_LATCH Z_0_0_lat (zioh_0_ret[0], zioh_0[0], LENH);
  DWC_D4MV_LATCH Z_0_1_lat (zioh_0_ret[1], zioh_0[1], LENH);
  DWC_D4MV_LATCH Z_0_2_lat (zioh_0_ret[2], zioh_0[2], LENH);
  DWC_D4MV_LATCH Z_0_3_lat (zioh_0_ret[3], zioh_0[3], LENH);
  DWC_D4MV_LATCH Z_0_4_lat (zioh_0_ret[4], zioh_0[4], LENH);
  DWC_D4MV_LATCH Z_0_5_lat (zioh_0_ret[5], zioh_0[5], LENH);
  DWC_D4MV_LATCH Z_0_6_lat (zioh_0_ret[6], zioh_0[6], LENH);
  DWC_D4MV_LATCH Z_0_7_lat (zioh_0_ret[7], zioh_0[7], LENH);
  DWC_D4MV_LATCH Z_0_8_lat (zioh_0_ret[8], zioh_0[8], LENH);
  DWC_D4MV_LATCH Z_0_9_lat (zioh_0_ret[9], zioh_0[9], LENH);
  DWC_D4MV_LATCH Z_0_10_lat (zioh_0_ret[10], zioh_0[10], LENH);
  DWC_D4MV_LATCH Z_0_11_lat (zioh_0_ret[11], zioh_0[11], LENH);
  DWC_D4MV_LATCH Z_0_12_lat (zioh_0_ret[12], zioh_0[12], LENH);
  DWC_D4MV_LATCH Z_0_13_lat (zioh_0_ret[13], zioh_0[13], LENH);
  DWC_D4MV_LATCH Z_0_14_lat (zioh_0_ret[14], zioh_0[14], LENH);
  DWC_D4MV_LATCH Z_0_15_lat (zioh_0_ret[15], zioh_0[15], LENH);
  DWC_D4MV_LATCH Z_0_16_lat (zioh_0_ret[16], zioh_0[16], LENH);
  DWC_D4MV_LATCH Z_0_17_lat (zioh_0_ret[17], zioh_0[17], LENH);

  DWC_D4MV_LATCH Z_1_0_lat (zioh_1_ret[0], zioh_1[0], LENH);
  DWC_D4MV_LATCH Z_1_1_lat (zioh_1_ret[1], zioh_1[1], LENH);
  DWC_D4MV_LATCH Z_1_2_lat (zioh_1_ret[2], zioh_1[2], LENH);
  DWC_D4MV_LATCH Z_1_3_lat (zioh_1_ret[3], zioh_1[3], LENH);
  DWC_D4MV_LATCH Z_1_4_lat (zioh_1_ret[4], zioh_1[4], LENH);
  DWC_D4MV_LATCH Z_1_5_lat (zioh_1_ret[5], zioh_1[5], LENH);
  DWC_D4MV_LATCH Z_1_6_lat (zioh_1_ret[6], zioh_1[6], LENH);
  DWC_D4MV_LATCH Z_1_7_lat (zioh_1_ret[7], zioh_1[7], LENH);
  DWC_D4MV_LATCH Z_1_8_lat (zioh_1_ret[8], zioh_1[8], LENH);
  DWC_D4MV_LATCH Z_1_9_lat (zioh_1_ret[9], zioh_1[9], LENH);
  DWC_D4MV_LATCH Z_1_10_lat (zioh_1_ret[10], zioh_1[10], LENH);
  DWC_D4MV_LATCH Z_1_11_lat (zioh_1_ret[11], zioh_1[11], LENH);
  DWC_D4MV_LATCH Z_1_12_lat (zioh_1_ret[12], zioh_1[12], LENH);
  DWC_D4MV_LATCH Z_1_13_lat (zioh_1_ret[13], zioh_1[13], LENH);
  DWC_D4MV_LATCH Z_1_14_lat (zioh_1_ret[14], zioh_1[14], LENH);
  DWC_D4MV_LATCH Z_1_15_lat (zioh_1_ret[15], zioh_1[15], LENH);
  DWC_D4MV_LATCH Z_1_16_lat (zioh_1_ret[16], zioh_1[16], LENH);
  DWC_D4MV_LATCH Z_1_17_lat (zioh_1_ret[17], zioh_1[17], LENH);

  DWC_D4MV_LATCH Z_2_0_lat (zioh_2_ret[0], zioh_2[0], LENH);
  DWC_D4MV_LATCH Z_2_1_lat (zioh_2_ret[1], zioh_2[1], LENH);
  DWC_D4MV_LATCH Z_2_2_lat (zioh_2_ret[2], zioh_2[2], LENH);
  DWC_D4MV_LATCH Z_2_3_lat (zioh_2_ret[3], zioh_2[3], LENH);
  DWC_D4MV_LATCH Z_2_4_lat (zioh_2_ret[4], zioh_2[4], LENH);
  DWC_D4MV_LATCH Z_2_5_lat (zioh_2_ret[5], zioh_2[5], LENH);
  DWC_D4MV_LATCH Z_2_6_lat (zioh_2_ret[6], zioh_2[6], LENH);
  DWC_D4MV_LATCH Z_2_7_lat (zioh_2_ret[7], zioh_2[7], LENH);
  DWC_D4MV_LATCH Z_2_8_lat (zioh_2_ret[8], zioh_2[8], LENH);
  DWC_D4MV_LATCH Z_2_9_lat (zioh_2_ret[9], zioh_2[9], LENH);
  DWC_D4MV_LATCH Z_2_10_lat (zioh_2_ret[10], zioh_2[10], LENH);
  DWC_D4MV_LATCH Z_2_11_lat (zioh_2_ret[11], zioh_2[11], LENH);
  DWC_D4MV_LATCH Z_2_12_lat (zioh_2_ret[12], zioh_2[12], LENH);
  DWC_D4MV_LATCH Z_2_13_lat (zioh_2_ret[13], zioh_2[13], LENH);
  DWC_D4MV_LATCH Z_2_14_lat (zioh_2_ret[14], zioh_2[14], LENH);
  DWC_D4MV_LATCH Z_2_15_lat (zioh_2_ret[15], zioh_2[15], LENH);
  DWC_D4MV_LATCH Z_2_16_lat (zioh_2_ret[16], zioh_2[16], LENH);
  DWC_D4MV_LATCH Z_2_17_lat (zioh_2_ret[17], zioh_2[17], LENH);
  
  DWC_D4MV_LATCH Z_3_0_lat (zioh_3_ret[0], zioh_3[0], LENH);
  DWC_D4MV_LATCH Z_3_1_lat (zioh_3_ret[1], zioh_3[1], LENH);
  DWC_D4MV_LATCH Z_3_2_lat (zioh_3_ret[2], zioh_3[2], LENH);
  DWC_D4MV_LATCH Z_3_3_lat (zioh_3_ret[3], zioh_3[3], LENH);
  DWC_D4MV_LATCH Z_3_4_lat (zioh_3_ret[4], zioh_3[4], LENH);
  DWC_D4MV_LATCH Z_3_5_lat (zioh_3_ret[5], zioh_3[5], LENH);
  DWC_D4MV_LATCH Z_3_6_lat (zioh_3_ret[6], zioh_3[6], LENH);
  DWC_D4MV_LATCH Z_3_7_lat (zioh_3_ret[7], zioh_3[7], LENH);
  DWC_D4MV_LATCH Z_3_8_lat (zioh_3_ret[8], zioh_3[8], LENH);
  DWC_D4MV_LATCH Z_3_9_lat (zioh_3_ret[9], zioh_3[9], LENH);
  DWC_D4MV_LATCH Z_3_10_lat (zioh_3_ret[10], zioh_3[10], LENH);
  DWC_D4MV_LATCH Z_3_11_lat (zioh_3_ret[11], zioh_3[11], LENH);
  DWC_D4MV_LATCH Z_3_12_lat (zioh_3_ret[12], zioh_3[12], LENH);
  DWC_D4MV_LATCH Z_3_13_lat (zioh_3_ret[13], zioh_3[13], LENH);
  DWC_D4MV_LATCH Z_3_14_lat (zioh_3_ret[14], zioh_3[14], LENH);
  DWC_D4MV_LATCH Z_3_15_lat (zioh_3_ret[15], zioh_3[15], LENH);
  DWC_D4MV_LATCH Z_3_16_lat (zioh_3_ret[16], zioh_3[16], LENH);
  DWC_D4MV_LATCH Z_3_17_lat (zioh_3_ret[17], zioh_3[17], LENH);

  DWC_D4MV_LATCH ENPAD_lat (ENPAD_ret, ENPAD, LENH);
  DWC_D4MV_LATCH REFEN_lat (REFEN_ret, REFEN, LENH);

  assign ZIOH_ZQ[71:54]  = (POCH_internal) ? 18'b0 : zioh_3_ret;
  assign ZIOH_ZQ[53:36]  = (POCH_internal) ? 18'b0 : zioh_2_ret;
  assign ZIOH_ZQ[35:18]  = (POCH_internal) ? 18'b0 : zioh_1_ret;
  assign ZIOH_ZQ[17:0]   = (POCH_internal) ? 18'b0 : zioh_0_ret;
  assign MVREFSE_ZQ = 1'b0;

  // Output MVREF_ZQ as a buffered version of PAD
 // buf (MVREF_ZQ, PAD);
 
      assign PAD_internal = ENPAD_ret ? MVREF_ZQ[0] : 1'bz ;
      bufif1 (MVREF_ZQ[0],1'b1,REFEN_ret);  
       
 `ifdef DWC_DDRPHY_ATPG_MODEL
    //bufif1 (MVREF_ZQ[0],1'b1,REFEN_ret);
    buf (PAD,PAD_internal);
 `else 
    //assign MVREF_ZQ[0]=(!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1;
    assign PAD = (REFEN_ret) ? PAD_internal:1'bz; 
`endif

`ifdef DWC_DDRPHY_ATPG_MODEL
  assign zioh_3 = 18'b000000000000000_000;
  assign zioh_2 = 18'b000000000000000_000;
  assign zioh_1 = 18'b000000000111111_000;
  assign zioh_0 = 18'b000000000111111_000;
`else
  always @(ZCTRL[27:21]) begin
      case (ZCTRL[27:21])
         7'b0000_000 : zioh_3 = 18'b000000000000000_000;
         7'b0000_001 : zioh_3 = 18'b000000000000000_001;
         7'b0000_010 : zioh_3 = 18'b000000000000000_010;
         7'b0000_011 : zioh_3 = 18'b000000000000000_011;
         7'b0000_100 : zioh_3 = 18'b000000000000000_100;
         7'b0000_101 : zioh_3 = 18'b000000000000000_101;
         7'b0000_110 : zioh_3 = 18'b000000000000000_110;
         7'b0000_111 : zioh_3 = 18'b000000000000000_111;
         7'b0001_000 : zioh_3 = 18'b000000000000001_000;
         7'b0001_001 : zioh_3 = 18'b000000000000001_001;
         7'b0001_010 : zioh_3 = 18'b000000000000001_010;
         7'b0001_011 : zioh_3 = 18'b000000000000001_011;
         7'b0001_100 : zioh_3 = 18'b000000000000001_100;
         7'b0001_101 : zioh_3 = 18'b000000000000001_101;
         7'b0001_110 : zioh_3 = 18'b000000000000001_110;
         7'b0001_111 : zioh_3 = 18'b000000000000001_111;
         7'b0010_000 : zioh_3 = 18'b000000000000011_000;
         7'b0010_001 : zioh_3 = 18'b000000000000011_001;
         7'b0010_010 : zioh_3 = 18'b000000000000011_010;
         7'b0010_011 : zioh_3 = 18'b000000000000011_011;
         7'b0010_100 : zioh_3 = 18'b000000000000011_100;
         7'b0010_101 : zioh_3 = 18'b000000000000011_101;
         7'b0010_110 : zioh_3 = 18'b000000000000011_110;
         7'b0010_111 : zioh_3 = 18'b000000000000011_111;
         7'b0011_000 : zioh_3 = 18'b000000000000111_000;
         7'b0011_001 : zioh_3 = 18'b000000000000111_001;
         7'b0011_010 : zioh_3 = 18'b000000000000111_010;
         7'b0011_011 : zioh_3 = 18'b000000000000111_011;
         7'b0011_100 : zioh_3 = 18'b000000000000111_100;
         7'b0011_101 : zioh_3 = 18'b000000000000111_101;
         7'b0011_110 : zioh_3 = 18'b000000000000111_110;
         7'b0011_111 : zioh_3 = 18'b000000000000111_111;
         7'b0100_000 : zioh_3 = 18'b000000000001111_000;
         7'b0100_001 : zioh_3 = 18'b000000000001111_001;
         7'b0100_010 : zioh_3 = 18'b000000000001111_010;
         7'b0100_011 : zioh_3 = 18'b000000000001111_011;
         7'b0100_100 : zioh_3 = 18'b000000000001111_100;
         7'b0100_101 : zioh_3 = 18'b000000000001111_101;
         7'b0100_110 : zioh_3 = 18'b000000000001111_110;
         7'b0100_111 : zioh_3 = 18'b000000000001111_111;
         7'b0101_000 : zioh_3 = 18'b000000000011111_000;
         7'b0101_001 : zioh_3 = 18'b000000000011111_001;
         7'b0101_010 : zioh_3 = 18'b000000000011111_010;
         7'b0101_011 : zioh_3 = 18'b000000000011111_011;
         7'b0101_100 : zioh_3 = 18'b000000000011111_100;
         7'b0101_101 : zioh_3 = 18'b000000000011111_101;
         7'b0101_110 : zioh_3 = 18'b000000000011111_110;
         7'b0101_111 : zioh_3 = 18'b000000000011111_111;
         7'b0110_000 : zioh_3 = 18'b000000000111111_000;
         7'b0110_001 : zioh_3 = 18'b000000000111111_001;
         7'b0110_010 : zioh_3 = 18'b000000000111111_010;
         7'b0110_011 : zioh_3 = 18'b000000000111111_011;
         7'b0110_100 : zioh_3 = 18'b000000000111111_100;
         7'b0110_101 : zioh_3 = 18'b000000000111111_101;
         7'b0110_110 : zioh_3 = 18'b000000000111111_110;
         7'b0110_111 : zioh_3 = 18'b000000000111111_111;
         7'b0111_000 : zioh_3 = 18'b000000001111111_000;
         7'b0111_001 : zioh_3 = 18'b000000001111111_001;
         7'b0111_010 : zioh_3 = 18'b000000001111111_010;
         7'b0111_011 : zioh_3 = 18'b000000001111111_011;
         7'b0111_100 : zioh_3 = 18'b000000001111111_100;
         7'b0111_101 : zioh_3 = 18'b000000001111111_101;
         7'b0111_110 : zioh_3 = 18'b000000001111111_110;
         7'b0111_111 : zioh_3 = 18'b000000001111111_111;
         7'b1000_000 : zioh_3 = 18'b000000011111111_000;
         7'b1000_001 : zioh_3 = 18'b000000011111111_001;
         7'b1000_010 : zioh_3 = 18'b000000011111111_010;
         7'b1000_011 : zioh_3 = 18'b000000011111111_011;
         7'b1000_100 : zioh_3 = 18'b000000011111111_100;
         7'b1000_101 : zioh_3 = 18'b000000011111111_101;
         7'b1000_110 : zioh_3 = 18'b000000011111111_110;
         7'b1000_111 : zioh_3 = 18'b000000011111111_111;
         7'b1001_000 : zioh_3 = 18'b000000111111111_000;
         7'b1001_001 : zioh_3 = 18'b000000111111111_001;
         7'b1001_010 : zioh_3 = 18'b000000111111111_010;
         7'b1001_011 : zioh_3 = 18'b000000111111111_011;
         7'b1001_100 : zioh_3 = 18'b000000111111111_100;
         7'b1001_101 : zioh_3 = 18'b000000111111111_101;
         7'b1001_110 : zioh_3 = 18'b000000111111111_110;
         7'b1001_111 : zioh_3 = 18'b000000111111111_111;
         7'b1010_000 : zioh_3 = 18'b000001111111111_000;
         7'b1010_001 : zioh_3 = 18'b000001111111111_001;
         7'b1010_010 : zioh_3 = 18'b000001111111111_010;
         7'b1010_011 : zioh_3 = 18'b000001111111111_011;
         7'b1010_100 : zioh_3 = 18'b000001111111111_100;
         7'b1010_101 : zioh_3 = 18'b000001111111111_101;
         7'b1010_110 : zioh_3 = 18'b000001111111111_110;
         7'b1010_111 : zioh_3 = 18'b000001111111111_111;
         7'b1011_000 : zioh_3 = 18'b000011111111111_000;
         7'b1011_001 : zioh_3 = 18'b000011111111111_001;
         7'b1011_010 : zioh_3 = 18'b000011111111111_010;
         7'b1011_011 : zioh_3 = 18'b000011111111111_011;
         7'b1011_100 : zioh_3 = 18'b000011111111111_100;
         7'b1011_101 : zioh_3 = 18'b000011111111111_101;
         7'b1011_110 : zioh_3 = 18'b000011111111111_110;
         7'b1011_111 : zioh_3 = 18'b000011111111111_111;
         7'b1100_000 : zioh_3 = 18'b000111111111111_000;
         7'b1100_001 : zioh_3 = 18'b000111111111111_001;
         7'b1100_010 : zioh_3 = 18'b000111111111111_010;
         7'b1100_011 : zioh_3 = 18'b000111111111111_011;
         7'b1100_100 : zioh_3 = 18'b000111111111111_100;
         7'b1100_101 : zioh_3 = 18'b000111111111111_101;
         7'b1100_110 : zioh_3 = 18'b000111111111111_110;
         7'b1100_111 : zioh_3 = 18'b000111111111111_111;
         7'b1101_000 : zioh_3 = 18'b001111111111111_000;
         7'b1101_001 : zioh_3 = 18'b001111111111111_001;
         7'b1101_010 : zioh_3 = 18'b001111111111111_010;
         7'b1101_011 : zioh_3 = 18'b001111111111111_011;
         7'b1101_100 : zioh_3 = 18'b001111111111111_100;
         7'b1101_101 : zioh_3 = 18'b001111111111111_101;
         7'b1101_110 : zioh_3 = 18'b001111111111111_110;
         7'b1101_111 : zioh_3 = 18'b001111111111111_111;
         7'b1110_000 : zioh_3 = 18'b011111111111111_000;
         7'b1110_001 : zioh_3 = 18'b011111111111111_001;
         7'b1110_010 : zioh_3 = 18'b011111111111111_010;
         7'b1110_011 : zioh_3 = 18'b011111111111111_011;
         7'b1110_100 : zioh_3 = 18'b011111111111111_100;
         7'b1110_101 : zioh_3 = 18'b011111111111111_101;
         7'b1110_110 : zioh_3 = 18'b011111111111111_110;
         7'b1110_111 : zioh_3 = 18'b011111111111111_111;
         7'b1111_000 : zioh_3 = 18'b111111111111111_000;
         7'b1111_001 : zioh_3 = 18'b111111111111111_001;
         7'b1111_010 : zioh_3 = 18'b111111111111111_010;
         7'b1111_011 : zioh_3 = 18'b111111111111111_011;
         7'b1111_100 : zioh_3 = 18'b111111111111111_100;
         7'b1111_101 : zioh_3 = 18'b111111111111111_101;
         7'b1111_110 : zioh_3 = 18'b111111111111111_110;
         7'b1111_111 : zioh_3 = 18'b111111111111111_111;
         default     : zioh_3 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[20:14]) begin
      case (ZCTRL[20:14])
         7'b0000_000 : zioh_2 = 18'b000000000000000_000;
         7'b0000_001 : zioh_2 = 18'b000000000000000_001;
         7'b0000_010 : zioh_2 = 18'b000000000000000_010;
         7'b0000_011 : zioh_2 = 18'b000000000000000_011;
         7'b0000_100 : zioh_2 = 18'b000000000000000_100;
         7'b0000_101 : zioh_2 = 18'b000000000000000_101;
         7'b0000_110 : zioh_2 = 18'b000000000000000_110;
         7'b0000_111 : zioh_2 = 18'b000000000000000_111;
         7'b0001_000 : zioh_2 = 18'b000000000000001_000;
         7'b0001_001 : zioh_2 = 18'b000000000000001_001;
         7'b0001_010 : zioh_2 = 18'b000000000000001_010;
         7'b0001_011 : zioh_2 = 18'b000000000000001_011;
         7'b0001_100 : zioh_2 = 18'b000000000000001_100;
         7'b0001_101 : zioh_2 = 18'b000000000000001_101;
         7'b0001_110 : zioh_2 = 18'b000000000000001_110;
         7'b0001_111 : zioh_2 = 18'b000000000000001_111;
         7'b0010_000 : zioh_2 = 18'b000000000000011_000;
         7'b0010_001 : zioh_2 = 18'b000000000000011_001;
         7'b0010_010 : zioh_2 = 18'b000000000000011_010;
         7'b0010_011 : zioh_2 = 18'b000000000000011_011;
         7'b0010_100 : zioh_2 = 18'b000000000000011_100;
         7'b0010_101 : zioh_2 = 18'b000000000000011_101;
         7'b0010_110 : zioh_2 = 18'b000000000000011_110;
         7'b0010_111 : zioh_2 = 18'b000000000000011_111;
         7'b0011_000 : zioh_2 = 18'b000000000000111_000;
         7'b0011_001 : zioh_2 = 18'b000000000000111_001;
         7'b0011_010 : zioh_2 = 18'b000000000000111_010;
         7'b0011_011 : zioh_2 = 18'b000000000000111_011;
         7'b0011_100 : zioh_2 = 18'b000000000000111_100;
         7'b0011_101 : zioh_2 = 18'b000000000000111_101;
         7'b0011_110 : zioh_2 = 18'b000000000000111_110;
         7'b0011_111 : zioh_2 = 18'b000000000000111_111;
         7'b0100_000 : zioh_2 = 18'b000000000001111_000;
         7'b0100_001 : zioh_2 = 18'b000000000001111_001;
         7'b0100_010 : zioh_2 = 18'b000000000001111_010;
         7'b0100_011 : zioh_2 = 18'b000000000001111_011;
         7'b0100_100 : zioh_2 = 18'b000000000001111_100;
         7'b0100_101 : zioh_2 = 18'b000000000001111_101;
         7'b0100_110 : zioh_2 = 18'b000000000001111_110;
         7'b0100_111 : zioh_2 = 18'b000000000001111_111;
         7'b0101_000 : zioh_2 = 18'b000000000011111_000;
         7'b0101_001 : zioh_2 = 18'b000000000011111_001;
         7'b0101_010 : zioh_2 = 18'b000000000011111_010;
         7'b0101_011 : zioh_2 = 18'b000000000011111_011;
         7'b0101_100 : zioh_2 = 18'b000000000011111_100;
         7'b0101_101 : zioh_2 = 18'b000000000011111_101;
         7'b0101_110 : zioh_2 = 18'b000000000011111_110;
         7'b0101_111 : zioh_2 = 18'b000000000011111_111;
         7'b0110_000 : zioh_2 = 18'b000000000111111_000;
         7'b0110_001 : zioh_2 = 18'b000000000111111_001;
         7'b0110_010 : zioh_2 = 18'b000000000111111_010;
         7'b0110_011 : zioh_2 = 18'b000000000111111_011;
         7'b0110_100 : zioh_2 = 18'b000000000111111_100;
         7'b0110_101 : zioh_2 = 18'b000000000111111_101;
         7'b0110_110 : zioh_2 = 18'b000000000111111_110;
         7'b0110_111 : zioh_2 = 18'b000000000111111_111;
         7'b0111_000 : zioh_2 = 18'b000000001111111_000;
         7'b0111_001 : zioh_2 = 18'b000000001111111_001;
         7'b0111_010 : zioh_2 = 18'b000000001111111_010;
         7'b0111_011 : zioh_2 = 18'b000000001111111_011;
         7'b0111_100 : zioh_2 = 18'b000000001111111_100;
         7'b0111_101 : zioh_2 = 18'b000000001111111_101;
         7'b0111_110 : zioh_2 = 18'b000000001111111_110;
         7'b0111_111 : zioh_2 = 18'b000000001111111_111;
         7'b1000_000 : zioh_2 = 18'b000000011111111_000;
         7'b1000_001 : zioh_2 = 18'b000000011111111_001;
         7'b1000_010 : zioh_2 = 18'b000000011111111_010;
         7'b1000_011 : zioh_2 = 18'b000000011111111_011;
         7'b1000_100 : zioh_2 = 18'b000000011111111_100;
         7'b1000_101 : zioh_2 = 18'b000000011111111_101;
         7'b1000_110 : zioh_2 = 18'b000000011111111_110;
         7'b1000_111 : zioh_2 = 18'b000000011111111_111;
         7'b1001_000 : zioh_2 = 18'b000000111111111_000;
         7'b1001_001 : zioh_2 = 18'b000000111111111_001;
         7'b1001_010 : zioh_2 = 18'b000000111111111_010;
         7'b1001_011 : zioh_2 = 18'b000000111111111_011;
         7'b1001_100 : zioh_2 = 18'b000000111111111_100;
         7'b1001_101 : zioh_2 = 18'b000000111111111_101;
         7'b1001_110 : zioh_2 = 18'b000000111111111_110;
         7'b1001_111 : zioh_2 = 18'b000000111111111_111;
         7'b1010_000 : zioh_2 = 18'b000001111111111_000;
         7'b1010_001 : zioh_2 = 18'b000001111111111_001;
         7'b1010_010 : zioh_2 = 18'b000001111111111_010;
         7'b1010_011 : zioh_2 = 18'b000001111111111_011;
         7'b1010_100 : zioh_2 = 18'b000001111111111_100;
         7'b1010_101 : zioh_2 = 18'b000001111111111_101;
         7'b1010_110 : zioh_2 = 18'b000001111111111_110;
         7'b1010_111 : zioh_2 = 18'b000001111111111_111;
         7'b1011_000 : zioh_2 = 18'b000011111111111_000;
         7'b1011_001 : zioh_2 = 18'b000011111111111_001;
         7'b1011_010 : zioh_2 = 18'b000011111111111_010;
         7'b1011_011 : zioh_2 = 18'b000011111111111_011;
         7'b1011_100 : zioh_2 = 18'b000011111111111_100;
         7'b1011_101 : zioh_2 = 18'b000011111111111_101;
         7'b1011_110 : zioh_2 = 18'b000011111111111_110;
         7'b1011_111 : zioh_2 = 18'b000011111111111_111;
         7'b1100_000 : zioh_2 = 18'b000111111111111_000;
         7'b1100_001 : zioh_2 = 18'b000111111111111_001;
         7'b1100_010 : zioh_2 = 18'b000111111111111_010;
         7'b1100_011 : zioh_2 = 18'b000111111111111_011;
         7'b1100_100 : zioh_2 = 18'b000111111111111_100;
         7'b1100_101 : zioh_2 = 18'b000111111111111_101;
         7'b1100_110 : zioh_2 = 18'b000111111111111_110;
         7'b1100_111 : zioh_2 = 18'b000111111111111_111;
         7'b1101_000 : zioh_2 = 18'b001111111111111_000;
         7'b1101_001 : zioh_2 = 18'b001111111111111_001;
         7'b1101_010 : zioh_2 = 18'b001111111111111_010;
         7'b1101_011 : zioh_2 = 18'b001111111111111_011;
         7'b1101_100 : zioh_2 = 18'b001111111111111_100;
         7'b1101_101 : zioh_2 = 18'b001111111111111_101;
         7'b1101_110 : zioh_2 = 18'b001111111111111_110;
         7'b1101_111 : zioh_2 = 18'b001111111111111_111;
         7'b1110_000 : zioh_2 = 18'b011111111111111_000;
         7'b1110_001 : zioh_2 = 18'b011111111111111_001;
         7'b1110_010 : zioh_2 = 18'b011111111111111_010;
         7'b1110_011 : zioh_2 = 18'b011111111111111_011;
         7'b1110_100 : zioh_2 = 18'b011111111111111_100;
         7'b1110_101 : zioh_2 = 18'b011111111111111_101;
         7'b1110_110 : zioh_2 = 18'b011111111111111_110;
         7'b1110_111 : zioh_2 = 18'b011111111111111_111;
         7'b1111_000 : zioh_2 = 18'b111111111111111_000;
         7'b1111_001 : zioh_2 = 18'b111111111111111_001;
         7'b1111_010 : zioh_2 = 18'b111111111111111_010;
         7'b1111_011 : zioh_2 = 18'b111111111111111_011;
         7'b1111_100 : zioh_2 = 18'b111111111111111_100;
         7'b1111_101 : zioh_2 = 18'b111111111111111_101;
         7'b1111_110 : zioh_2 = 18'b111111111111111_110;
         7'b1111_111 : zioh_2 = 18'b111111111111111_111;
         default     : zioh_2 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[13:7]) begin
      case (ZCTRL[13:7])
         7'b0000_000 : zioh_1 = 18'b000000000000000_000;
         7'b0000_001 : zioh_1 = 18'b000000000000000_001;
         7'b0000_010 : zioh_1 = 18'b000000000000000_010;
         7'b0000_011 : zioh_1 = 18'b000000000000000_011;
         7'b0000_100 : zioh_1 = 18'b000000000000000_100;
         7'b0000_101 : zioh_1 = 18'b000000000000000_101;
         7'b0000_110 : zioh_1 = 18'b000000000000000_110;
         7'b0000_111 : zioh_1 = 18'b000000000000000_111;
         7'b0001_000 : zioh_1 = 18'b000000000000001_000;
         7'b0001_001 : zioh_1 = 18'b000000000000001_001;
         7'b0001_010 : zioh_1 = 18'b000000000000001_010;
         7'b0001_011 : zioh_1 = 18'b000000000000001_011;
         7'b0001_100 : zioh_1 = 18'b000000000000001_100;
         7'b0001_101 : zioh_1 = 18'b000000000000001_101;
         7'b0001_110 : zioh_1 = 18'b000000000000001_110;
         7'b0001_111 : zioh_1 = 18'b000000000000001_111;
         7'b0010_000 : zioh_1 = 18'b000000000000011_000;
         7'b0010_001 : zioh_1 = 18'b000000000000011_001;
         7'b0010_010 : zioh_1 = 18'b000000000000011_010;
         7'b0010_011 : zioh_1 = 18'b000000000000011_011;
         7'b0010_100 : zioh_1 = 18'b000000000000011_100;
         7'b0010_101 : zioh_1 = 18'b000000000000011_101;
         7'b0010_110 : zioh_1 = 18'b000000000000011_110;
         7'b0010_111 : zioh_1 = 18'b000000000000011_111;
         7'b0011_000 : zioh_1 = 18'b000000000000111_000;
         7'b0011_001 : zioh_1 = 18'b000000000000111_001;
         7'b0011_010 : zioh_1 = 18'b000000000000111_010;
         7'b0011_011 : zioh_1 = 18'b000000000000111_011;
         7'b0011_100 : zioh_1 = 18'b000000000000111_100;
         7'b0011_101 : zioh_1 = 18'b000000000000111_101;
         7'b0011_110 : zioh_1 = 18'b000000000000111_110;
         7'b0011_111 : zioh_1 = 18'b000000000000111_111;
         7'b0100_000 : zioh_1 = 18'b000000000001111_000;
         7'b0100_001 : zioh_1 = 18'b000000000001111_001;
         7'b0100_010 : zioh_1 = 18'b000000000001111_010;
         7'b0100_011 : zioh_1 = 18'b000000000001111_011;
         7'b0100_100 : zioh_1 = 18'b000000000001111_100;
         7'b0100_101 : zioh_1 = 18'b000000000001111_101;
         7'b0100_110 : zioh_1 = 18'b000000000001111_110;
         7'b0100_111 : zioh_1 = 18'b000000000001111_111;
         7'b0101_000 : zioh_1 = 18'b000000000011111_000;
         7'b0101_001 : zioh_1 = 18'b000000000011111_001;
         7'b0101_010 : zioh_1 = 18'b000000000011111_010;
         7'b0101_011 : zioh_1 = 18'b000000000011111_011;
         7'b0101_100 : zioh_1 = 18'b000000000011111_100;
         7'b0101_101 : zioh_1 = 18'b000000000011111_101;
         7'b0101_110 : zioh_1 = 18'b000000000011111_110;
         7'b0101_111 : zioh_1 = 18'b000000000011111_111;
         7'b0110_000 : zioh_1 = 18'b000000000111111_000;
         7'b0110_001 : zioh_1 = 18'b000000000111111_001;
         7'b0110_010 : zioh_1 = 18'b000000000111111_010;
         7'b0110_011 : zioh_1 = 18'b000000000111111_011;
         7'b0110_100 : zioh_1 = 18'b000000000111111_100;
         7'b0110_101 : zioh_1 = 18'b000000000111111_101;
         7'b0110_110 : zioh_1 = 18'b000000000111111_110;
         7'b0110_111 : zioh_1 = 18'b000000000111111_111;
         7'b0111_000 : zioh_1 = 18'b000000001111111_000;
         7'b0111_001 : zioh_1 = 18'b000000001111111_001;
         7'b0111_010 : zioh_1 = 18'b000000001111111_010;
         7'b0111_011 : zioh_1 = 18'b000000001111111_011;
         7'b0111_100 : zioh_1 = 18'b000000001111111_100;
         7'b0111_101 : zioh_1 = 18'b000000001111111_101;
         7'b0111_110 : zioh_1 = 18'b000000001111111_110;
         7'b0111_111 : zioh_1 = 18'b000000001111111_111;
         7'b1000_000 : zioh_1 = 18'b000000011111111_000;
         7'b1000_001 : zioh_1 = 18'b000000011111111_001;
         7'b1000_010 : zioh_1 = 18'b000000011111111_010;
         7'b1000_011 : zioh_1 = 18'b000000011111111_011;
         7'b1000_100 : zioh_1 = 18'b000000011111111_100;
         7'b1000_101 : zioh_1 = 18'b000000011111111_101;
         7'b1000_110 : zioh_1 = 18'b000000011111111_110;
         7'b1000_111 : zioh_1 = 18'b000000011111111_111;
         7'b1001_000 : zioh_1 = 18'b000000111111111_000;
         7'b1001_001 : zioh_1 = 18'b000000111111111_001;
         7'b1001_010 : zioh_1 = 18'b000000111111111_010;
         7'b1001_011 : zioh_1 = 18'b000000111111111_011;
         7'b1001_100 : zioh_1 = 18'b000000111111111_100;
         7'b1001_101 : zioh_1 = 18'b000000111111111_101;
         7'b1001_110 : zioh_1 = 18'b000000111111111_110;
         7'b1001_111 : zioh_1 = 18'b000000111111111_111;
         7'b1010_000 : zioh_1 = 18'b000001111111111_000;
         7'b1010_001 : zioh_1 = 18'b000001111111111_001;
         7'b1010_010 : zioh_1 = 18'b000001111111111_010;
         7'b1010_011 : zioh_1 = 18'b000001111111111_011;
         7'b1010_100 : zioh_1 = 18'b000001111111111_100;
         7'b1010_101 : zioh_1 = 18'b000001111111111_101;
         7'b1010_110 : zioh_1 = 18'b000001111111111_110;
         7'b1010_111 : zioh_1 = 18'b000001111111111_111;
         7'b1011_000 : zioh_1 = 18'b000011111111111_000;
         7'b1011_001 : zioh_1 = 18'b000011111111111_001;
         7'b1011_010 : zioh_1 = 18'b000011111111111_010;
         7'b1011_011 : zioh_1 = 18'b000011111111111_011;
         7'b1011_100 : zioh_1 = 18'b000011111111111_100;
         7'b1011_101 : zioh_1 = 18'b000011111111111_101;
         7'b1011_110 : zioh_1 = 18'b000011111111111_110;
         7'b1011_111 : zioh_1 = 18'b000011111111111_111;
         7'b1100_000 : zioh_1 = 18'b000111111111111_000;
         7'b1100_001 : zioh_1 = 18'b000111111111111_001;
         7'b1100_010 : zioh_1 = 18'b000111111111111_010;
         7'b1100_011 : zioh_1 = 18'b000111111111111_011;
         7'b1100_100 : zioh_1 = 18'b000111111111111_100;
         7'b1100_101 : zioh_1 = 18'b000111111111111_101;
         7'b1100_110 : zioh_1 = 18'b000111111111111_110;
         7'b1100_111 : zioh_1 = 18'b000111111111111_111;
         7'b1101_000 : zioh_1 = 18'b001111111111111_000;
         7'b1101_001 : zioh_1 = 18'b001111111111111_001;
         7'b1101_010 : zioh_1 = 18'b001111111111111_010;
         7'b1101_011 : zioh_1 = 18'b001111111111111_011;
         7'b1101_100 : zioh_1 = 18'b001111111111111_100;
         7'b1101_101 : zioh_1 = 18'b001111111111111_101;
         7'b1101_110 : zioh_1 = 18'b001111111111111_110;
         7'b1101_111 : zioh_1 = 18'b001111111111111_111;
         7'b1110_000 : zioh_1 = 18'b011111111111111_000;
         7'b1110_001 : zioh_1 = 18'b011111111111111_001;
         7'b1110_010 : zioh_1 = 18'b011111111111111_010;
         7'b1110_011 : zioh_1 = 18'b011111111111111_011;
         7'b1110_100 : zioh_1 = 18'b011111111111111_100;
         7'b1110_101 : zioh_1 = 18'b011111111111111_101;
         7'b1110_110 : zioh_1 = 18'b011111111111111_110;
         7'b1110_111 : zioh_1 = 18'b011111111111111_111;
         7'b1111_000 : zioh_1 = 18'b111111111111111_000;
         7'b1111_001 : zioh_1 = 18'b111111111111111_001;
         7'b1111_010 : zioh_1 = 18'b111111111111111_010;
         7'b1111_011 : zioh_1 = 18'b111111111111111_011;
         7'b1111_100 : zioh_1 = 18'b111111111111111_100;
         7'b1111_101 : zioh_1 = 18'b111111111111111_101;
         7'b1111_110 : zioh_1 = 18'b111111111111111_110;
         7'b1111_111 : zioh_1 = 18'b111111111111111_111;
         default     : zioh_1 = 18'b000000000111111_000;
      endcase
  end

  always @(ZCTRL[6:0]) begin
      case (ZCTRL[6:0])
         7'b0000_000 : zioh_0 = 18'b000000000000000_000;
         7'b0000_001 : zioh_0 = 18'b000000000000000_001;
         7'b0000_010 : zioh_0 = 18'b000000000000000_010;
         7'b0000_011 : zioh_0 = 18'b000000000000000_011;
         7'b0000_100 : zioh_0 = 18'b000000000000000_100;
         7'b0000_101 : zioh_0 = 18'b000000000000000_101;
         7'b0000_110 : zioh_0 = 18'b000000000000000_110;
         7'b0000_111 : zioh_0 = 18'b000000000000000_111;
         7'b0001_000 : zioh_0 = 18'b000000000000001_000;
         7'b0001_001 : zioh_0 = 18'b000000000000001_001;
         7'b0001_010 : zioh_0 = 18'b000000000000001_010;
         7'b0001_011 : zioh_0 = 18'b000000000000001_011;
         7'b0001_100 : zioh_0 = 18'b000000000000001_100;
         7'b0001_101 : zioh_0 = 18'b000000000000001_101;
         7'b0001_110 : zioh_0 = 18'b000000000000001_110;
         7'b0001_111 : zioh_0 = 18'b000000000000001_111;
         7'b0010_000 : zioh_0 = 18'b000000000000011_000;
         7'b0010_001 : zioh_0 = 18'b000000000000011_001;
         7'b0010_010 : zioh_0 = 18'b000000000000011_010;
         7'b0010_011 : zioh_0 = 18'b000000000000011_011;
         7'b0010_100 : zioh_0 = 18'b000000000000011_100;
         7'b0010_101 : zioh_0 = 18'b000000000000011_101;
         7'b0010_110 : zioh_0 = 18'b000000000000011_110;
         7'b0010_111 : zioh_0 = 18'b000000000000011_111;
         7'b0011_000 : zioh_0 = 18'b000000000000111_000;
         7'b0011_001 : zioh_0 = 18'b000000000000111_001;
         7'b0011_010 : zioh_0 = 18'b000000000000111_010;
         7'b0011_011 : zioh_0 = 18'b000000000000111_011;
         7'b0011_100 : zioh_0 = 18'b000000000000111_100;
         7'b0011_101 : zioh_0 = 18'b000000000000111_101;
         7'b0011_110 : zioh_0 = 18'b000000000000111_110;
         7'b0011_111 : zioh_0 = 18'b000000000000111_111;
         7'b0100_000 : zioh_0 = 18'b000000000001111_000;
         7'b0100_001 : zioh_0 = 18'b000000000001111_001;
         7'b0100_010 : zioh_0 = 18'b000000000001111_010;
         7'b0100_011 : zioh_0 = 18'b000000000001111_011;
         7'b0100_100 : zioh_0 = 18'b000000000001111_100;
         7'b0100_101 : zioh_0 = 18'b000000000001111_101;
         7'b0100_110 : zioh_0 = 18'b000000000001111_110;
         7'b0100_111 : zioh_0 = 18'b000000000001111_111;
         7'b0101_000 : zioh_0 = 18'b000000000011111_000;
         7'b0101_001 : zioh_0 = 18'b000000000011111_001;
         7'b0101_010 : zioh_0 = 18'b000000000011111_010;
         7'b0101_011 : zioh_0 = 18'b000000000011111_011;
         7'b0101_100 : zioh_0 = 18'b000000000011111_100;
         7'b0101_101 : zioh_0 = 18'b000000000011111_101;
         7'b0101_110 : zioh_0 = 18'b000000000011111_110;
         7'b0101_111 : zioh_0 = 18'b000000000011111_111;
         7'b0110_000 : zioh_0 = 18'b000000000111111_000;
         7'b0110_001 : zioh_0 = 18'b000000000111111_001;
         7'b0110_010 : zioh_0 = 18'b000000000111111_010;
         7'b0110_011 : zioh_0 = 18'b000000000111111_011;
         7'b0110_100 : zioh_0 = 18'b000000000111111_100;
         7'b0110_101 : zioh_0 = 18'b000000000111111_101;
         7'b0110_110 : zioh_0 = 18'b000000000111111_110;
         7'b0110_111 : zioh_0 = 18'b000000000111111_111;
         7'b0111_000 : zioh_0 = 18'b000000001111111_000;
         7'b0111_001 : zioh_0 = 18'b000000001111111_001;
         7'b0111_010 : zioh_0 = 18'b000000001111111_010;
         7'b0111_011 : zioh_0 = 18'b000000001111111_011;
         7'b0111_100 : zioh_0 = 18'b000000001111111_100;
         7'b0111_101 : zioh_0 = 18'b000000001111111_101;
         7'b0111_110 : zioh_0 = 18'b000000001111111_110;
         7'b0111_111 : zioh_0 = 18'b000000001111111_111;
         7'b1000_000 : zioh_0 = 18'b000000011111111_000;
         7'b1000_001 : zioh_0 = 18'b000000011111111_001;
         7'b1000_010 : zioh_0 = 18'b000000011111111_010;
         7'b1000_011 : zioh_0 = 18'b000000011111111_011;
         7'b1000_100 : zioh_0 = 18'b000000011111111_100;
         7'b1000_101 : zioh_0 = 18'b000000011111111_101;
         7'b1000_110 : zioh_0 = 18'b000000011111111_110;
         7'b1000_111 : zioh_0 = 18'b000000011111111_111;
         7'b1001_000 : zioh_0 = 18'b000000111111111_000;
         7'b1001_001 : zioh_0 = 18'b000000111111111_001;
         7'b1001_010 : zioh_0 = 18'b000000111111111_010;
         7'b1001_011 : zioh_0 = 18'b000000111111111_011;
         7'b1001_100 : zioh_0 = 18'b000000111111111_100;
         7'b1001_101 : zioh_0 = 18'b000000111111111_101;
         7'b1001_110 : zioh_0 = 18'b000000111111111_110;
         7'b1001_111 : zioh_0 = 18'b000000111111111_111;
         7'b1010_000 : zioh_0 = 18'b000001111111111_000;
         7'b1010_001 : zioh_0 = 18'b000001111111111_001;
         7'b1010_010 : zioh_0 = 18'b000001111111111_010;
         7'b1010_011 : zioh_0 = 18'b000001111111111_011;
         7'b1010_100 : zioh_0 = 18'b000001111111111_100;
         7'b1010_101 : zioh_0 = 18'b000001111111111_101;
         7'b1010_110 : zioh_0 = 18'b000001111111111_110;
         7'b1010_111 : zioh_0 = 18'b000001111111111_111;
         7'b1011_000 : zioh_0 = 18'b000011111111111_000;
         7'b1011_001 : zioh_0 = 18'b000011111111111_001;
         7'b1011_010 : zioh_0 = 18'b000011111111111_010;
         7'b1011_011 : zioh_0 = 18'b000011111111111_011;
         7'b1011_100 : zioh_0 = 18'b000011111111111_100;
         7'b1011_101 : zioh_0 = 18'b000011111111111_101;
         7'b1011_110 : zioh_0 = 18'b000011111111111_110;
         7'b1011_111 : zioh_0 = 18'b000011111111111_111;
         7'b1100_000 : zioh_0 = 18'b000111111111111_000;
         7'b1100_001 : zioh_0 = 18'b000111111111111_001;
         7'b1100_010 : zioh_0 = 18'b000111111111111_010;
         7'b1100_011 : zioh_0 = 18'b000111111111111_011;
         7'b1100_100 : zioh_0 = 18'b000111111111111_100;
         7'b1100_101 : zioh_0 = 18'b000111111111111_101;
         7'b1100_110 : zioh_0 = 18'b000111111111111_110;
         7'b1100_111 : zioh_0 = 18'b000111111111111_111;
         7'b1101_000 : zioh_0 = 18'b001111111111111_000;
         7'b1101_001 : zioh_0 = 18'b001111111111111_001;
         7'b1101_010 : zioh_0 = 18'b001111111111111_010;
         7'b1101_011 : zioh_0 = 18'b001111111111111_011;
         7'b1101_100 : zioh_0 = 18'b001111111111111_100;
         7'b1101_101 : zioh_0 = 18'b001111111111111_101;
         7'b1101_110 : zioh_0 = 18'b001111111111111_110;
         7'b1101_111 : zioh_0 = 18'b001111111111111_111;
         7'b1110_000 : zioh_0 = 18'b011111111111111_000;
         7'b1110_001 : zioh_0 = 18'b011111111111111_001;
         7'b1110_010 : zioh_0 = 18'b011111111111111_010;
         7'b1110_011 : zioh_0 = 18'b011111111111111_011;
         7'b1110_100 : zioh_0 = 18'b011111111111111_100;
         7'b1110_101 : zioh_0 = 18'b011111111111111_101;
         7'b1110_110 : zioh_0 = 18'b011111111111111_110;
         7'b1110_111 : zioh_0 = 18'b011111111111111_111;
         7'b1111_000 : zioh_0 = 18'b111111111111111_000;
         7'b1111_001 : zioh_0 = 18'b111111111111111_001;
         7'b1111_010 : zioh_0 = 18'b111111111111111_010;
         7'b1111_011 : zioh_0 = 18'b111111111111111_011;
         7'b1111_100 : zioh_0 = 18'b111111111111111_100;
         7'b1111_101 : zioh_0 = 18'b111111111111111_101;
         7'b1111_110 : zioh_0 = 18'b111111111111111_110;
         7'b1111_111 : zioh_0 = 18'b111111111111111_111;
         default     : zioh_0 = 18'b000000000111111_000;
      endcase
  end
`endif

  specify
      (ZCTRL[0] *> ZIOH_ZQ[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[1] *> ZIOH_ZQ[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[2] *> ZIOH_ZQ[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[3] *> ZIOH_ZQ[17], ZIOH_ZQ[15], ZIOH_ZQ[13], ZIOH_ZQ[11], ZIOH_ZQ[9], ZIOH_ZQ[7], ZIOH_ZQ[5], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[4] *> ZIOH_ZQ[17], ZIOH_ZQ[16], ZIOH_ZQ[15], ZIOH_ZQ[13], ZIOH_ZQ[12], ZIOH_ZQ[11], ZIOH_ZQ[9], ZIOH_ZQ[8], ZIOH_ZQ[7], ZIOH_ZQ[5], ZIOH_ZQ[4], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[5] *> ZIOH_ZQ[17], ZIOH_ZQ[16], ZIOH_ZQ[14], ZIOH_ZQ[13], ZIOH_ZQ[12], ZIOH_ZQ[11], ZIOH_ZQ[9], ZIOH_ZQ[8], ZIOH_ZQ[7], ZIOH_ZQ[6], ZIOH_ZQ[5], ZIOH_ZQ[4], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[6] *> ZIOH_ZQ[17], ZIOH_ZQ[16], ZIOH_ZQ[15], ZIOH_ZQ[14], ZIOH_ZQ[13], ZIOH_ZQ[12], ZIOH_ZQ[11], ZIOH_ZQ[10], ZIOH_ZQ[9], ZIOH_ZQ[8], ZIOH_ZQ[7], ZIOH_ZQ[6], ZIOH_ZQ[5], ZIOH_ZQ[4], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[7] *> ZIOH_ZQ[18]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[8] *> ZIOH_ZQ[19]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[9] *> ZIOH_ZQ[20]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[10] *> ZIOH_ZQ[35], ZIOH_ZQ[33], ZIOH_ZQ[31], ZIOH_ZQ[29], ZIOH_ZQ[27], ZIOH_ZQ[25], ZIOH_ZQ[23], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[11] *> ZIOH_ZQ[35], ZIOH_ZQ[34], ZIOH_ZQ[33], ZIOH_ZQ[31], ZIOH_ZQ[30], ZIOH_ZQ[29], ZIOH_ZQ[27], ZIOH_ZQ[26], ZIOH_ZQ[25], ZIOH_ZQ[23], ZIOH_ZQ[22], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[12] *> ZIOH_ZQ[35], ZIOH_ZQ[34], ZIOH_ZQ[32], ZIOH_ZQ[31], ZIOH_ZQ[30], ZIOH_ZQ[29], ZIOH_ZQ[27], ZIOH_ZQ[26], ZIOH_ZQ[25], ZIOH_ZQ[24], ZIOH_ZQ[23], ZIOH_ZQ[22], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[13] *> ZIOH_ZQ[35], ZIOH_ZQ[34], ZIOH_ZQ[33], ZIOH_ZQ[32], ZIOH_ZQ[31], ZIOH_ZQ[30], ZIOH_ZQ[29], ZIOH_ZQ[28], ZIOH_ZQ[27], ZIOH_ZQ[26], ZIOH_ZQ[25], ZIOH_ZQ[24], ZIOH_ZQ[23], ZIOH_ZQ[22], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[14] *> ZIOH_ZQ[36]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[15] *> ZIOH_ZQ[37]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[16] *> ZIOH_ZQ[38]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[17] *> ZIOH_ZQ[53], ZIOH_ZQ[51], ZIOH_ZQ[49], ZIOH_ZQ[47], ZIOH_ZQ[45], ZIOH_ZQ[43], ZIOH_ZQ[41], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[18] *> ZIOH_ZQ[53], ZIOH_ZQ[52], ZIOH_ZQ[51], ZIOH_ZQ[49], ZIOH_ZQ[48], ZIOH_ZQ[47], ZIOH_ZQ[45], ZIOH_ZQ[44], ZIOH_ZQ[43], ZIOH_ZQ[41], ZIOH_ZQ[40], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[19] *> ZIOH_ZQ[53], ZIOH_ZQ[52], ZIOH_ZQ[50], ZIOH_ZQ[49], ZIOH_ZQ[48], ZIOH_ZQ[47], ZIOH_ZQ[45], ZIOH_ZQ[44], ZIOH_ZQ[43], ZIOH_ZQ[42], ZIOH_ZQ[41], ZIOH_ZQ[40], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[20] *> ZIOH_ZQ[53], ZIOH_ZQ[52], ZIOH_ZQ[51], ZIOH_ZQ[50], ZIOH_ZQ[49], ZIOH_ZQ[48], ZIOH_ZQ[47], ZIOH_ZQ[46], ZIOH_ZQ[45], ZIOH_ZQ[44], ZIOH_ZQ[43], ZIOH_ZQ[42], ZIOH_ZQ[41], ZIOH_ZQ[40], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[21] *> ZIOH_ZQ[54]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[22] *> ZIOH_ZQ[55]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[23] *> ZIOH_ZQ[56]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[24] *> ZIOH_ZQ[71], ZIOH_ZQ[69], ZIOH_ZQ[67], ZIOH_ZQ[65], ZIOH_ZQ[63], ZIOH_ZQ[61], ZIOH_ZQ[59], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[25] *> ZIOH_ZQ[71], ZIOH_ZQ[70], ZIOH_ZQ[69], ZIOH_ZQ[67], ZIOH_ZQ[66], ZIOH_ZQ[65], ZIOH_ZQ[63], ZIOH_ZQ[62], ZIOH_ZQ[61], ZIOH_ZQ[59], ZIOH_ZQ[58], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[26] *> ZIOH_ZQ[71], ZIOH_ZQ[70], ZIOH_ZQ[68], ZIOH_ZQ[67], ZIOH_ZQ[66], ZIOH_ZQ[65], ZIOH_ZQ[63], ZIOH_ZQ[62], ZIOH_ZQ[61], ZIOH_ZQ[60], ZIOH_ZQ[59], ZIOH_ZQ[58], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[27] *> ZIOH_ZQ[71], ZIOH_ZQ[70], ZIOH_ZQ[69], ZIOH_ZQ[68], ZIOH_ZQ[67], ZIOH_ZQ[66], ZIOH_ZQ[65], ZIOH_ZQ[64], ZIOH_ZQ[63], ZIOH_ZQ[62], ZIOH_ZQ[61], ZIOH_ZQ[60], ZIOH_ZQ[59], ZIOH_ZQ[58], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => MVREF_ZQ[0])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF_ZQ[1])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF_ZQ[2])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF_ZQ[3])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine

// ------------------------------
// SSTL PZQ reference supply
// ------------------------------
`celldefine
module DWC_D4MV_PZCTRL_EW (PAD, MVREF_ZQ,
`ifdef DWC_DDRPHY_PG_PINS
       MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif
       POCH, ZCTRL, ZIOH_ZQ, LENH, REFEN, REFSEL, PDRH18, ENPAD, MVREFSE_ZQ);
  inout             PAD;
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  output  [3:0]      MVREF_ZQ;
  input             REFEN;          // Enable internal VREF generator
  input  [5:0]      REFSEL;         // Select generated VREF value
  input             POCH;	          // Power-on clear high voltage
  input  [27:0]     ZCTRL;
  output [71:0]     ZIOH_ZQ;        // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		    PDRH18;
  input		    ENPAD; // Enable pass gate between MVREF and PAD
  output 	MVREFSE_ZQ;

`ifdef DWC_DDRPHY_ATPG_MODEL
  wire   [17:0]     zioh_3;
  wire   [17:0]     zioh_2;
  wire   [17:0]     zioh_1;
  wire   [17:0]     zioh_0;
`else
  reg    [17:0]     zioh_3;
  reg    [17:0]     zioh_2;
  reg    [17:0]     zioh_1;
  reg    [17:0]     zioh_0;
`endif

  wire   [17:0]     zioh_3_ret;
  wire   [17:0]     zioh_2_ret;
  wire   [17:0]     zioh_1_ret;
  wire   [17:0]     zioh_0_ret; 
  wire          POCH_internal;
  wire          LENH_b;

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

  DWC_D4MV_LATCH Z_0_0_lat (zioh_0_ret[0], zioh_0[0], LENH);
  DWC_D4MV_LATCH Z_0_1_lat (zioh_0_ret[1], zioh_0[1], LENH);
  DWC_D4MV_LATCH Z_0_2_lat (zioh_0_ret[2], zioh_0[2], LENH);
  DWC_D4MV_LATCH Z_0_3_lat (zioh_0_ret[3], zioh_0[3], LENH);
  DWC_D4MV_LATCH Z_0_4_lat (zioh_0_ret[4], zioh_0[4], LENH);
  DWC_D4MV_LATCH Z_0_5_lat (zioh_0_ret[5], zioh_0[5], LENH);
  DWC_D4MV_LATCH Z_0_6_lat (zioh_0_ret[6], zioh_0[6], LENH);
  DWC_D4MV_LATCH Z_0_7_lat (zioh_0_ret[7], zioh_0[7], LENH);
  DWC_D4MV_LATCH Z_0_8_lat (zioh_0_ret[8], zioh_0[8], LENH);
  DWC_D4MV_LATCH Z_0_9_lat (zioh_0_ret[9], zioh_0[9], LENH);
  DWC_D4MV_LATCH Z_0_10_lat (zioh_0_ret[10], zioh_0[10], LENH);
  DWC_D4MV_LATCH Z_0_11_lat (zioh_0_ret[11], zioh_0[11], LENH);
  DWC_D4MV_LATCH Z_0_12_lat (zioh_0_ret[12], zioh_0[12], LENH);
  DWC_D4MV_LATCH Z_0_13_lat (zioh_0_ret[13], zioh_0[13], LENH);
  DWC_D4MV_LATCH Z_0_14_lat (zioh_0_ret[14], zioh_0[14], LENH);
  DWC_D4MV_LATCH Z_0_15_lat (zioh_0_ret[15], zioh_0[15], LENH);
  DWC_D4MV_LATCH Z_0_16_lat (zioh_0_ret[16], zioh_0[16], LENH);
  DWC_D4MV_LATCH Z_0_17_lat (zioh_0_ret[17], zioh_0[17], LENH);

  DWC_D4MV_LATCH Z_1_0_lat (zioh_1_ret[0], zioh_1[0], LENH);
  DWC_D4MV_LATCH Z_1_1_lat (zioh_1_ret[1], zioh_1[1], LENH);
  DWC_D4MV_LATCH Z_1_2_lat (zioh_1_ret[2], zioh_1[2], LENH);
  DWC_D4MV_LATCH Z_1_3_lat (zioh_1_ret[3], zioh_1[3], LENH);
  DWC_D4MV_LATCH Z_1_4_lat (zioh_1_ret[4], zioh_1[4], LENH);
  DWC_D4MV_LATCH Z_1_5_lat (zioh_1_ret[5], zioh_1[5], LENH);
  DWC_D4MV_LATCH Z_1_6_lat (zioh_1_ret[6], zioh_1[6], LENH);
  DWC_D4MV_LATCH Z_1_7_lat (zioh_1_ret[7], zioh_1[7], LENH);
  DWC_D4MV_LATCH Z_1_8_lat (zioh_1_ret[8], zioh_1[8], LENH);
  DWC_D4MV_LATCH Z_1_9_lat (zioh_1_ret[9], zioh_1[9], LENH);
  DWC_D4MV_LATCH Z_1_10_lat (zioh_1_ret[10], zioh_1[10], LENH);
  DWC_D4MV_LATCH Z_1_11_lat (zioh_1_ret[11], zioh_1[11], LENH);
  DWC_D4MV_LATCH Z_1_12_lat (zioh_1_ret[12], zioh_1[12], LENH);
  DWC_D4MV_LATCH Z_1_13_lat (zioh_1_ret[13], zioh_1[13], LENH);
  DWC_D4MV_LATCH Z_1_14_lat (zioh_1_ret[14], zioh_1[14], LENH);
  DWC_D4MV_LATCH Z_1_15_lat (zioh_1_ret[15], zioh_1[15], LENH);
  DWC_D4MV_LATCH Z_1_16_lat (zioh_1_ret[16], zioh_1[16], LENH);
  DWC_D4MV_LATCH Z_1_17_lat (zioh_1_ret[17], zioh_1[17], LENH);

  DWC_D4MV_LATCH Z_2_0_lat (zioh_2_ret[0], zioh_2[0], LENH);
  DWC_D4MV_LATCH Z_2_1_lat (zioh_2_ret[1], zioh_2[1], LENH);
  DWC_D4MV_LATCH Z_2_2_lat (zioh_2_ret[2], zioh_2[2], LENH);
  DWC_D4MV_LATCH Z_2_3_lat (zioh_2_ret[3], zioh_2[3], LENH);
  DWC_D4MV_LATCH Z_2_4_lat (zioh_2_ret[4], zioh_2[4], LENH);
  DWC_D4MV_LATCH Z_2_5_lat (zioh_2_ret[5], zioh_2[5], LENH);
  DWC_D4MV_LATCH Z_2_6_lat (zioh_2_ret[6], zioh_2[6], LENH);
  DWC_D4MV_LATCH Z_2_7_lat (zioh_2_ret[7], zioh_2[7], LENH);
  DWC_D4MV_LATCH Z_2_8_lat (zioh_2_ret[8], zioh_2[8], LENH);
  DWC_D4MV_LATCH Z_2_9_lat (zioh_2_ret[9], zioh_2[9], LENH);
  DWC_D4MV_LATCH Z_2_10_lat (zioh_2_ret[10], zioh_2[10], LENH);
  DWC_D4MV_LATCH Z_2_11_lat (zioh_2_ret[11], zioh_2[11], LENH);
  DWC_D4MV_LATCH Z_2_12_lat (zioh_2_ret[12], zioh_2[12], LENH);
  DWC_D4MV_LATCH Z_2_13_lat (zioh_2_ret[13], zioh_2[13], LENH);
  DWC_D4MV_LATCH Z_2_14_lat (zioh_2_ret[14], zioh_2[14], LENH);
  DWC_D4MV_LATCH Z_2_15_lat (zioh_2_ret[15], zioh_2[15], LENH);
  DWC_D4MV_LATCH Z_2_16_lat (zioh_2_ret[16], zioh_2[16], LENH);
  DWC_D4MV_LATCH Z_2_17_lat (zioh_2_ret[17], zioh_2[17], LENH);
  
  DWC_D4MV_LATCH Z_3_0_lat (zioh_3_ret[0], zioh_3[0], LENH);
  DWC_D4MV_LATCH Z_3_1_lat (zioh_3_ret[1], zioh_3[1], LENH);
  DWC_D4MV_LATCH Z_3_2_lat (zioh_3_ret[2], zioh_3[2], LENH);
  DWC_D4MV_LATCH Z_3_3_lat (zioh_3_ret[3], zioh_3[3], LENH);
  DWC_D4MV_LATCH Z_3_4_lat (zioh_3_ret[4], zioh_3[4], LENH);
  DWC_D4MV_LATCH Z_3_5_lat (zioh_3_ret[5], zioh_3[5], LENH);
  DWC_D4MV_LATCH Z_3_6_lat (zioh_3_ret[6], zioh_3[6], LENH);
  DWC_D4MV_LATCH Z_3_7_lat (zioh_3_ret[7], zioh_3[7], LENH);
  DWC_D4MV_LATCH Z_3_8_lat (zioh_3_ret[8], zioh_3[8], LENH);
  DWC_D4MV_LATCH Z_3_9_lat (zioh_3_ret[9], zioh_3[9], LENH);
  DWC_D4MV_LATCH Z_3_10_lat (zioh_3_ret[10], zioh_3[10], LENH);
  DWC_D4MV_LATCH Z_3_11_lat (zioh_3_ret[11], zioh_3[11], LENH);
  DWC_D4MV_LATCH Z_3_12_lat (zioh_3_ret[12], zioh_3[12], LENH);
  DWC_D4MV_LATCH Z_3_13_lat (zioh_3_ret[13], zioh_3[13], LENH);
  DWC_D4MV_LATCH Z_3_14_lat (zioh_3_ret[14], zioh_3[14], LENH);
  DWC_D4MV_LATCH Z_3_15_lat (zioh_3_ret[15], zioh_3[15], LENH);
  DWC_D4MV_LATCH Z_3_16_lat (zioh_3_ret[16], zioh_3[16], LENH);
  DWC_D4MV_LATCH Z_3_17_lat (zioh_3_ret[17], zioh_3[17], LENH);

  DWC_D4MV_LATCH ENPAD_lat (ENPAD_ret, ENPAD, LENH);
  DWC_D4MV_LATCH REFEN_lat (REFEN_ret, REFEN, LENH);

  assign ZIOH_ZQ[71:54]  = (POCH_internal) ? 18'b0 : zioh_3_ret;
  assign ZIOH_ZQ[53:36]  = (POCH_internal) ? 18'b0 : zioh_2_ret;
  assign ZIOH_ZQ[35:18]  = (POCH_internal) ? 18'b0 : zioh_1_ret;
  assign ZIOH_ZQ[17:0]   = (POCH_internal) ? 18'b0 : zioh_0_ret;
  assign MVREFSE_ZQ = 1'b0;

  // Output MVREF_ZQ as a buffered version of PAD
 // buf (MVREF_ZQ, PAD);
 
      assign PAD_internal = ENPAD_ret ? MVREF_ZQ[0] : 1'bz ;
      bufif1 (MVREF_ZQ[0],1'b1,REFEN_ret);  
       
 `ifdef DWC_DDRPHY_ATPG_MODEL
    //bufif1 (MVREF_ZQ[0],1'b1,REFEN_ret);
    buf (PAD,PAD_internal);
 `else 
    //assign MVREF_ZQ[0]=(!REFEN_ret && !ENPAD_ret)? 1'bz:(!REFEN_ret && ENPAD_ret)? PAD:1'b1;
    assign PAD = (REFEN_ret) ? PAD_internal:1'bz; 
`endif

`ifdef DWC_DDRPHY_ATPG_MODEL
  assign zioh_3 = 18'b000000000000000_000;
  assign zioh_2 = 18'b000000000000000_000;
  assign zioh_1 = 18'b000000000111111_000;
  assign zioh_0 = 18'b000000000111111_000;
`else
  always @(ZCTRL[27:21]) begin
      case (ZCTRL[27:21])
         7'b0000_000 : zioh_3 = 18'b000000000000000_000;
         7'b0000_001 : zioh_3 = 18'b000000000000000_001;
         7'b0000_010 : zioh_3 = 18'b000000000000000_010;
         7'b0000_011 : zioh_3 = 18'b000000000000000_011;
         7'b0000_100 : zioh_3 = 18'b000000000000000_100;
         7'b0000_101 : zioh_3 = 18'b000000000000000_101;
         7'b0000_110 : zioh_3 = 18'b000000000000000_110;
         7'b0000_111 : zioh_3 = 18'b000000000000000_111;
         7'b0001_000 : zioh_3 = 18'b000000000000001_000;
         7'b0001_001 : zioh_3 = 18'b000000000000001_001;
         7'b0001_010 : zioh_3 = 18'b000000000000001_010;
         7'b0001_011 : zioh_3 = 18'b000000000000001_011;
         7'b0001_100 : zioh_3 = 18'b000000000000001_100;
         7'b0001_101 : zioh_3 = 18'b000000000000001_101;
         7'b0001_110 : zioh_3 = 18'b000000000000001_110;
         7'b0001_111 : zioh_3 = 18'b000000000000001_111;
         7'b0010_000 : zioh_3 = 18'b000000000000011_000;
         7'b0010_001 : zioh_3 = 18'b000000000000011_001;
         7'b0010_010 : zioh_3 = 18'b000000000000011_010;
         7'b0010_011 : zioh_3 = 18'b000000000000011_011;
         7'b0010_100 : zioh_3 = 18'b000000000000011_100;
         7'b0010_101 : zioh_3 = 18'b000000000000011_101;
         7'b0010_110 : zioh_3 = 18'b000000000000011_110;
         7'b0010_111 : zioh_3 = 18'b000000000000011_111;
         7'b0011_000 : zioh_3 = 18'b000000000000111_000;
         7'b0011_001 : zioh_3 = 18'b000000000000111_001;
         7'b0011_010 : zioh_3 = 18'b000000000000111_010;
         7'b0011_011 : zioh_3 = 18'b000000000000111_011;
         7'b0011_100 : zioh_3 = 18'b000000000000111_100;
         7'b0011_101 : zioh_3 = 18'b000000000000111_101;
         7'b0011_110 : zioh_3 = 18'b000000000000111_110;
         7'b0011_111 : zioh_3 = 18'b000000000000111_111;
         7'b0100_000 : zioh_3 = 18'b000000000001111_000;
         7'b0100_001 : zioh_3 = 18'b000000000001111_001;
         7'b0100_010 : zioh_3 = 18'b000000000001111_010;
         7'b0100_011 : zioh_3 = 18'b000000000001111_011;
         7'b0100_100 : zioh_3 = 18'b000000000001111_100;
         7'b0100_101 : zioh_3 = 18'b000000000001111_101;
         7'b0100_110 : zioh_3 = 18'b000000000001111_110;
         7'b0100_111 : zioh_3 = 18'b000000000001111_111;
         7'b0101_000 : zioh_3 = 18'b000000000011111_000;
         7'b0101_001 : zioh_3 = 18'b000000000011111_001;
         7'b0101_010 : zioh_3 = 18'b000000000011111_010;
         7'b0101_011 : zioh_3 = 18'b000000000011111_011;
         7'b0101_100 : zioh_3 = 18'b000000000011111_100;
         7'b0101_101 : zioh_3 = 18'b000000000011111_101;
         7'b0101_110 : zioh_3 = 18'b000000000011111_110;
         7'b0101_111 : zioh_3 = 18'b000000000011111_111;
         7'b0110_000 : zioh_3 = 18'b000000000111111_000;
         7'b0110_001 : zioh_3 = 18'b000000000111111_001;
         7'b0110_010 : zioh_3 = 18'b000000000111111_010;
         7'b0110_011 : zioh_3 = 18'b000000000111111_011;
         7'b0110_100 : zioh_3 = 18'b000000000111111_100;
         7'b0110_101 : zioh_3 = 18'b000000000111111_101;
         7'b0110_110 : zioh_3 = 18'b000000000111111_110;
         7'b0110_111 : zioh_3 = 18'b000000000111111_111;
         7'b0111_000 : zioh_3 = 18'b000000001111111_000;
         7'b0111_001 : zioh_3 = 18'b000000001111111_001;
         7'b0111_010 : zioh_3 = 18'b000000001111111_010;
         7'b0111_011 : zioh_3 = 18'b000000001111111_011;
         7'b0111_100 : zioh_3 = 18'b000000001111111_100;
         7'b0111_101 : zioh_3 = 18'b000000001111111_101;
         7'b0111_110 : zioh_3 = 18'b000000001111111_110;
         7'b0111_111 : zioh_3 = 18'b000000001111111_111;
         7'b1000_000 : zioh_3 = 18'b000000011111111_000;
         7'b1000_001 : zioh_3 = 18'b000000011111111_001;
         7'b1000_010 : zioh_3 = 18'b000000011111111_010;
         7'b1000_011 : zioh_3 = 18'b000000011111111_011;
         7'b1000_100 : zioh_3 = 18'b000000011111111_100;
         7'b1000_101 : zioh_3 = 18'b000000011111111_101;
         7'b1000_110 : zioh_3 = 18'b000000011111111_110;
         7'b1000_111 : zioh_3 = 18'b000000011111111_111;
         7'b1001_000 : zioh_3 = 18'b000000111111111_000;
         7'b1001_001 : zioh_3 = 18'b000000111111111_001;
         7'b1001_010 : zioh_3 = 18'b000000111111111_010;
         7'b1001_011 : zioh_3 = 18'b000000111111111_011;
         7'b1001_100 : zioh_3 = 18'b000000111111111_100;
         7'b1001_101 : zioh_3 = 18'b000000111111111_101;
         7'b1001_110 : zioh_3 = 18'b000000111111111_110;
         7'b1001_111 : zioh_3 = 18'b000000111111111_111;
         7'b1010_000 : zioh_3 = 18'b000001111111111_000;
         7'b1010_001 : zioh_3 = 18'b000001111111111_001;
         7'b1010_010 : zioh_3 = 18'b000001111111111_010;
         7'b1010_011 : zioh_3 = 18'b000001111111111_011;
         7'b1010_100 : zioh_3 = 18'b000001111111111_100;
         7'b1010_101 : zioh_3 = 18'b000001111111111_101;
         7'b1010_110 : zioh_3 = 18'b000001111111111_110;
         7'b1010_111 : zioh_3 = 18'b000001111111111_111;
         7'b1011_000 : zioh_3 = 18'b000011111111111_000;
         7'b1011_001 : zioh_3 = 18'b000011111111111_001;
         7'b1011_010 : zioh_3 = 18'b000011111111111_010;
         7'b1011_011 : zioh_3 = 18'b000011111111111_011;
         7'b1011_100 : zioh_3 = 18'b000011111111111_100;
         7'b1011_101 : zioh_3 = 18'b000011111111111_101;
         7'b1011_110 : zioh_3 = 18'b000011111111111_110;
         7'b1011_111 : zioh_3 = 18'b000011111111111_111;
         7'b1100_000 : zioh_3 = 18'b000111111111111_000;
         7'b1100_001 : zioh_3 = 18'b000111111111111_001;
         7'b1100_010 : zioh_3 = 18'b000111111111111_010;
         7'b1100_011 : zioh_3 = 18'b000111111111111_011;
         7'b1100_100 : zioh_3 = 18'b000111111111111_100;
         7'b1100_101 : zioh_3 = 18'b000111111111111_101;
         7'b1100_110 : zioh_3 = 18'b000111111111111_110;
         7'b1100_111 : zioh_3 = 18'b000111111111111_111;
         7'b1101_000 : zioh_3 = 18'b001111111111111_000;
         7'b1101_001 : zioh_3 = 18'b001111111111111_001;
         7'b1101_010 : zioh_3 = 18'b001111111111111_010;
         7'b1101_011 : zioh_3 = 18'b001111111111111_011;
         7'b1101_100 : zioh_3 = 18'b001111111111111_100;
         7'b1101_101 : zioh_3 = 18'b001111111111111_101;
         7'b1101_110 : zioh_3 = 18'b001111111111111_110;
         7'b1101_111 : zioh_3 = 18'b001111111111111_111;
         7'b1110_000 : zioh_3 = 18'b011111111111111_000;
         7'b1110_001 : zioh_3 = 18'b011111111111111_001;
         7'b1110_010 : zioh_3 = 18'b011111111111111_010;
         7'b1110_011 : zioh_3 = 18'b011111111111111_011;
         7'b1110_100 : zioh_3 = 18'b011111111111111_100;
         7'b1110_101 : zioh_3 = 18'b011111111111111_101;
         7'b1110_110 : zioh_3 = 18'b011111111111111_110;
         7'b1110_111 : zioh_3 = 18'b011111111111111_111;
         7'b1111_000 : zioh_3 = 18'b111111111111111_000;
         7'b1111_001 : zioh_3 = 18'b111111111111111_001;
         7'b1111_010 : zioh_3 = 18'b111111111111111_010;
         7'b1111_011 : zioh_3 = 18'b111111111111111_011;
         7'b1111_100 : zioh_3 = 18'b111111111111111_100;
         7'b1111_101 : zioh_3 = 18'b111111111111111_101;
         7'b1111_110 : zioh_3 = 18'b111111111111111_110;
         7'b1111_111 : zioh_3 = 18'b111111111111111_111;
         default     : zioh_3 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[20:14]) begin
      case (ZCTRL[20:14])
         7'b0000_000 : zioh_2 = 18'b000000000000000_000;
         7'b0000_001 : zioh_2 = 18'b000000000000000_001;
         7'b0000_010 : zioh_2 = 18'b000000000000000_010;
         7'b0000_011 : zioh_2 = 18'b000000000000000_011;
         7'b0000_100 : zioh_2 = 18'b000000000000000_100;
         7'b0000_101 : zioh_2 = 18'b000000000000000_101;
         7'b0000_110 : zioh_2 = 18'b000000000000000_110;
         7'b0000_111 : zioh_2 = 18'b000000000000000_111;
         7'b0001_000 : zioh_2 = 18'b000000000000001_000;
         7'b0001_001 : zioh_2 = 18'b000000000000001_001;
         7'b0001_010 : zioh_2 = 18'b000000000000001_010;
         7'b0001_011 : zioh_2 = 18'b000000000000001_011;
         7'b0001_100 : zioh_2 = 18'b000000000000001_100;
         7'b0001_101 : zioh_2 = 18'b000000000000001_101;
         7'b0001_110 : zioh_2 = 18'b000000000000001_110;
         7'b0001_111 : zioh_2 = 18'b000000000000001_111;
         7'b0010_000 : zioh_2 = 18'b000000000000011_000;
         7'b0010_001 : zioh_2 = 18'b000000000000011_001;
         7'b0010_010 : zioh_2 = 18'b000000000000011_010;
         7'b0010_011 : zioh_2 = 18'b000000000000011_011;
         7'b0010_100 : zioh_2 = 18'b000000000000011_100;
         7'b0010_101 : zioh_2 = 18'b000000000000011_101;
         7'b0010_110 : zioh_2 = 18'b000000000000011_110;
         7'b0010_111 : zioh_2 = 18'b000000000000011_111;
         7'b0011_000 : zioh_2 = 18'b000000000000111_000;
         7'b0011_001 : zioh_2 = 18'b000000000000111_001;
         7'b0011_010 : zioh_2 = 18'b000000000000111_010;
         7'b0011_011 : zioh_2 = 18'b000000000000111_011;
         7'b0011_100 : zioh_2 = 18'b000000000000111_100;
         7'b0011_101 : zioh_2 = 18'b000000000000111_101;
         7'b0011_110 : zioh_2 = 18'b000000000000111_110;
         7'b0011_111 : zioh_2 = 18'b000000000000111_111;
         7'b0100_000 : zioh_2 = 18'b000000000001111_000;
         7'b0100_001 : zioh_2 = 18'b000000000001111_001;
         7'b0100_010 : zioh_2 = 18'b000000000001111_010;
         7'b0100_011 : zioh_2 = 18'b000000000001111_011;
         7'b0100_100 : zioh_2 = 18'b000000000001111_100;
         7'b0100_101 : zioh_2 = 18'b000000000001111_101;
         7'b0100_110 : zioh_2 = 18'b000000000001111_110;
         7'b0100_111 : zioh_2 = 18'b000000000001111_111;
         7'b0101_000 : zioh_2 = 18'b000000000011111_000;
         7'b0101_001 : zioh_2 = 18'b000000000011111_001;
         7'b0101_010 : zioh_2 = 18'b000000000011111_010;
         7'b0101_011 : zioh_2 = 18'b000000000011111_011;
         7'b0101_100 : zioh_2 = 18'b000000000011111_100;
         7'b0101_101 : zioh_2 = 18'b000000000011111_101;
         7'b0101_110 : zioh_2 = 18'b000000000011111_110;
         7'b0101_111 : zioh_2 = 18'b000000000011111_111;
         7'b0110_000 : zioh_2 = 18'b000000000111111_000;
         7'b0110_001 : zioh_2 = 18'b000000000111111_001;
         7'b0110_010 : zioh_2 = 18'b000000000111111_010;
         7'b0110_011 : zioh_2 = 18'b000000000111111_011;
         7'b0110_100 : zioh_2 = 18'b000000000111111_100;
         7'b0110_101 : zioh_2 = 18'b000000000111111_101;
         7'b0110_110 : zioh_2 = 18'b000000000111111_110;
         7'b0110_111 : zioh_2 = 18'b000000000111111_111;
         7'b0111_000 : zioh_2 = 18'b000000001111111_000;
         7'b0111_001 : zioh_2 = 18'b000000001111111_001;
         7'b0111_010 : zioh_2 = 18'b000000001111111_010;
         7'b0111_011 : zioh_2 = 18'b000000001111111_011;
         7'b0111_100 : zioh_2 = 18'b000000001111111_100;
         7'b0111_101 : zioh_2 = 18'b000000001111111_101;
         7'b0111_110 : zioh_2 = 18'b000000001111111_110;
         7'b0111_111 : zioh_2 = 18'b000000001111111_111;
         7'b1000_000 : zioh_2 = 18'b000000011111111_000;
         7'b1000_001 : zioh_2 = 18'b000000011111111_001;
         7'b1000_010 : zioh_2 = 18'b000000011111111_010;
         7'b1000_011 : zioh_2 = 18'b000000011111111_011;
         7'b1000_100 : zioh_2 = 18'b000000011111111_100;
         7'b1000_101 : zioh_2 = 18'b000000011111111_101;
         7'b1000_110 : zioh_2 = 18'b000000011111111_110;
         7'b1000_111 : zioh_2 = 18'b000000011111111_111;
         7'b1001_000 : zioh_2 = 18'b000000111111111_000;
         7'b1001_001 : zioh_2 = 18'b000000111111111_001;
         7'b1001_010 : zioh_2 = 18'b000000111111111_010;
         7'b1001_011 : zioh_2 = 18'b000000111111111_011;
         7'b1001_100 : zioh_2 = 18'b000000111111111_100;
         7'b1001_101 : zioh_2 = 18'b000000111111111_101;
         7'b1001_110 : zioh_2 = 18'b000000111111111_110;
         7'b1001_111 : zioh_2 = 18'b000000111111111_111;
         7'b1010_000 : zioh_2 = 18'b000001111111111_000;
         7'b1010_001 : zioh_2 = 18'b000001111111111_001;
         7'b1010_010 : zioh_2 = 18'b000001111111111_010;
         7'b1010_011 : zioh_2 = 18'b000001111111111_011;
         7'b1010_100 : zioh_2 = 18'b000001111111111_100;
         7'b1010_101 : zioh_2 = 18'b000001111111111_101;
         7'b1010_110 : zioh_2 = 18'b000001111111111_110;
         7'b1010_111 : zioh_2 = 18'b000001111111111_111;
         7'b1011_000 : zioh_2 = 18'b000011111111111_000;
         7'b1011_001 : zioh_2 = 18'b000011111111111_001;
         7'b1011_010 : zioh_2 = 18'b000011111111111_010;
         7'b1011_011 : zioh_2 = 18'b000011111111111_011;
         7'b1011_100 : zioh_2 = 18'b000011111111111_100;
         7'b1011_101 : zioh_2 = 18'b000011111111111_101;
         7'b1011_110 : zioh_2 = 18'b000011111111111_110;
         7'b1011_111 : zioh_2 = 18'b000011111111111_111;
         7'b1100_000 : zioh_2 = 18'b000111111111111_000;
         7'b1100_001 : zioh_2 = 18'b000111111111111_001;
         7'b1100_010 : zioh_2 = 18'b000111111111111_010;
         7'b1100_011 : zioh_2 = 18'b000111111111111_011;
         7'b1100_100 : zioh_2 = 18'b000111111111111_100;
         7'b1100_101 : zioh_2 = 18'b000111111111111_101;
         7'b1100_110 : zioh_2 = 18'b000111111111111_110;
         7'b1100_111 : zioh_2 = 18'b000111111111111_111;
         7'b1101_000 : zioh_2 = 18'b001111111111111_000;
         7'b1101_001 : zioh_2 = 18'b001111111111111_001;
         7'b1101_010 : zioh_2 = 18'b001111111111111_010;
         7'b1101_011 : zioh_2 = 18'b001111111111111_011;
         7'b1101_100 : zioh_2 = 18'b001111111111111_100;
         7'b1101_101 : zioh_2 = 18'b001111111111111_101;
         7'b1101_110 : zioh_2 = 18'b001111111111111_110;
         7'b1101_111 : zioh_2 = 18'b001111111111111_111;
         7'b1110_000 : zioh_2 = 18'b011111111111111_000;
         7'b1110_001 : zioh_2 = 18'b011111111111111_001;
         7'b1110_010 : zioh_2 = 18'b011111111111111_010;
         7'b1110_011 : zioh_2 = 18'b011111111111111_011;
         7'b1110_100 : zioh_2 = 18'b011111111111111_100;
         7'b1110_101 : zioh_2 = 18'b011111111111111_101;
         7'b1110_110 : zioh_2 = 18'b011111111111111_110;
         7'b1110_111 : zioh_2 = 18'b011111111111111_111;
         7'b1111_000 : zioh_2 = 18'b111111111111111_000;
         7'b1111_001 : zioh_2 = 18'b111111111111111_001;
         7'b1111_010 : zioh_2 = 18'b111111111111111_010;
         7'b1111_011 : zioh_2 = 18'b111111111111111_011;
         7'b1111_100 : zioh_2 = 18'b111111111111111_100;
         7'b1111_101 : zioh_2 = 18'b111111111111111_101;
         7'b1111_110 : zioh_2 = 18'b111111111111111_110;
         7'b1111_111 : zioh_2 = 18'b111111111111111_111;
         default     : zioh_2 = 18'b000000000000000_000;
      endcase
  end

  always @(ZCTRL[13:7]) begin
      case (ZCTRL[13:7])
         7'b0000_000 : zioh_1 = 18'b000000000000000_000;
         7'b0000_001 : zioh_1 = 18'b000000000000000_001;
         7'b0000_010 : zioh_1 = 18'b000000000000000_010;
         7'b0000_011 : zioh_1 = 18'b000000000000000_011;
         7'b0000_100 : zioh_1 = 18'b000000000000000_100;
         7'b0000_101 : zioh_1 = 18'b000000000000000_101;
         7'b0000_110 : zioh_1 = 18'b000000000000000_110;
         7'b0000_111 : zioh_1 = 18'b000000000000000_111;
         7'b0001_000 : zioh_1 = 18'b000000000000001_000;
         7'b0001_001 : zioh_1 = 18'b000000000000001_001;
         7'b0001_010 : zioh_1 = 18'b000000000000001_010;
         7'b0001_011 : zioh_1 = 18'b000000000000001_011;
         7'b0001_100 : zioh_1 = 18'b000000000000001_100;
         7'b0001_101 : zioh_1 = 18'b000000000000001_101;
         7'b0001_110 : zioh_1 = 18'b000000000000001_110;
         7'b0001_111 : zioh_1 = 18'b000000000000001_111;
         7'b0010_000 : zioh_1 = 18'b000000000000011_000;
         7'b0010_001 : zioh_1 = 18'b000000000000011_001;
         7'b0010_010 : zioh_1 = 18'b000000000000011_010;
         7'b0010_011 : zioh_1 = 18'b000000000000011_011;
         7'b0010_100 : zioh_1 = 18'b000000000000011_100;
         7'b0010_101 : zioh_1 = 18'b000000000000011_101;
         7'b0010_110 : zioh_1 = 18'b000000000000011_110;
         7'b0010_111 : zioh_1 = 18'b000000000000011_111;
         7'b0011_000 : zioh_1 = 18'b000000000000111_000;
         7'b0011_001 : zioh_1 = 18'b000000000000111_001;
         7'b0011_010 : zioh_1 = 18'b000000000000111_010;
         7'b0011_011 : zioh_1 = 18'b000000000000111_011;
         7'b0011_100 : zioh_1 = 18'b000000000000111_100;
         7'b0011_101 : zioh_1 = 18'b000000000000111_101;
         7'b0011_110 : zioh_1 = 18'b000000000000111_110;
         7'b0011_111 : zioh_1 = 18'b000000000000111_111;
         7'b0100_000 : zioh_1 = 18'b000000000001111_000;
         7'b0100_001 : zioh_1 = 18'b000000000001111_001;
         7'b0100_010 : zioh_1 = 18'b000000000001111_010;
         7'b0100_011 : zioh_1 = 18'b000000000001111_011;
         7'b0100_100 : zioh_1 = 18'b000000000001111_100;
         7'b0100_101 : zioh_1 = 18'b000000000001111_101;
         7'b0100_110 : zioh_1 = 18'b000000000001111_110;
         7'b0100_111 : zioh_1 = 18'b000000000001111_111;
         7'b0101_000 : zioh_1 = 18'b000000000011111_000;
         7'b0101_001 : zioh_1 = 18'b000000000011111_001;
         7'b0101_010 : zioh_1 = 18'b000000000011111_010;
         7'b0101_011 : zioh_1 = 18'b000000000011111_011;
         7'b0101_100 : zioh_1 = 18'b000000000011111_100;
         7'b0101_101 : zioh_1 = 18'b000000000011111_101;
         7'b0101_110 : zioh_1 = 18'b000000000011111_110;
         7'b0101_111 : zioh_1 = 18'b000000000011111_111;
         7'b0110_000 : zioh_1 = 18'b000000000111111_000;
         7'b0110_001 : zioh_1 = 18'b000000000111111_001;
         7'b0110_010 : zioh_1 = 18'b000000000111111_010;
         7'b0110_011 : zioh_1 = 18'b000000000111111_011;
         7'b0110_100 : zioh_1 = 18'b000000000111111_100;
         7'b0110_101 : zioh_1 = 18'b000000000111111_101;
         7'b0110_110 : zioh_1 = 18'b000000000111111_110;
         7'b0110_111 : zioh_1 = 18'b000000000111111_111;
         7'b0111_000 : zioh_1 = 18'b000000001111111_000;
         7'b0111_001 : zioh_1 = 18'b000000001111111_001;
         7'b0111_010 : zioh_1 = 18'b000000001111111_010;
         7'b0111_011 : zioh_1 = 18'b000000001111111_011;
         7'b0111_100 : zioh_1 = 18'b000000001111111_100;
         7'b0111_101 : zioh_1 = 18'b000000001111111_101;
         7'b0111_110 : zioh_1 = 18'b000000001111111_110;
         7'b0111_111 : zioh_1 = 18'b000000001111111_111;
         7'b1000_000 : zioh_1 = 18'b000000011111111_000;
         7'b1000_001 : zioh_1 = 18'b000000011111111_001;
         7'b1000_010 : zioh_1 = 18'b000000011111111_010;
         7'b1000_011 : zioh_1 = 18'b000000011111111_011;
         7'b1000_100 : zioh_1 = 18'b000000011111111_100;
         7'b1000_101 : zioh_1 = 18'b000000011111111_101;
         7'b1000_110 : zioh_1 = 18'b000000011111111_110;
         7'b1000_111 : zioh_1 = 18'b000000011111111_111;
         7'b1001_000 : zioh_1 = 18'b000000111111111_000;
         7'b1001_001 : zioh_1 = 18'b000000111111111_001;
         7'b1001_010 : zioh_1 = 18'b000000111111111_010;
         7'b1001_011 : zioh_1 = 18'b000000111111111_011;
         7'b1001_100 : zioh_1 = 18'b000000111111111_100;
         7'b1001_101 : zioh_1 = 18'b000000111111111_101;
         7'b1001_110 : zioh_1 = 18'b000000111111111_110;
         7'b1001_111 : zioh_1 = 18'b000000111111111_111;
         7'b1010_000 : zioh_1 = 18'b000001111111111_000;
         7'b1010_001 : zioh_1 = 18'b000001111111111_001;
         7'b1010_010 : zioh_1 = 18'b000001111111111_010;
         7'b1010_011 : zioh_1 = 18'b000001111111111_011;
         7'b1010_100 : zioh_1 = 18'b000001111111111_100;
         7'b1010_101 : zioh_1 = 18'b000001111111111_101;
         7'b1010_110 : zioh_1 = 18'b000001111111111_110;
         7'b1010_111 : zioh_1 = 18'b000001111111111_111;
         7'b1011_000 : zioh_1 = 18'b000011111111111_000;
         7'b1011_001 : zioh_1 = 18'b000011111111111_001;
         7'b1011_010 : zioh_1 = 18'b000011111111111_010;
         7'b1011_011 : zioh_1 = 18'b000011111111111_011;
         7'b1011_100 : zioh_1 = 18'b000011111111111_100;
         7'b1011_101 : zioh_1 = 18'b000011111111111_101;
         7'b1011_110 : zioh_1 = 18'b000011111111111_110;
         7'b1011_111 : zioh_1 = 18'b000011111111111_111;
         7'b1100_000 : zioh_1 = 18'b000111111111111_000;
         7'b1100_001 : zioh_1 = 18'b000111111111111_001;
         7'b1100_010 : zioh_1 = 18'b000111111111111_010;
         7'b1100_011 : zioh_1 = 18'b000111111111111_011;
         7'b1100_100 : zioh_1 = 18'b000111111111111_100;
         7'b1100_101 : zioh_1 = 18'b000111111111111_101;
         7'b1100_110 : zioh_1 = 18'b000111111111111_110;
         7'b1100_111 : zioh_1 = 18'b000111111111111_111;
         7'b1101_000 : zioh_1 = 18'b001111111111111_000;
         7'b1101_001 : zioh_1 = 18'b001111111111111_001;
         7'b1101_010 : zioh_1 = 18'b001111111111111_010;
         7'b1101_011 : zioh_1 = 18'b001111111111111_011;
         7'b1101_100 : zioh_1 = 18'b001111111111111_100;
         7'b1101_101 : zioh_1 = 18'b001111111111111_101;
         7'b1101_110 : zioh_1 = 18'b001111111111111_110;
         7'b1101_111 : zioh_1 = 18'b001111111111111_111;
         7'b1110_000 : zioh_1 = 18'b011111111111111_000;
         7'b1110_001 : zioh_1 = 18'b011111111111111_001;
         7'b1110_010 : zioh_1 = 18'b011111111111111_010;
         7'b1110_011 : zioh_1 = 18'b011111111111111_011;
         7'b1110_100 : zioh_1 = 18'b011111111111111_100;
         7'b1110_101 : zioh_1 = 18'b011111111111111_101;
         7'b1110_110 : zioh_1 = 18'b011111111111111_110;
         7'b1110_111 : zioh_1 = 18'b011111111111111_111;
         7'b1111_000 : zioh_1 = 18'b111111111111111_000;
         7'b1111_001 : zioh_1 = 18'b111111111111111_001;
         7'b1111_010 : zioh_1 = 18'b111111111111111_010;
         7'b1111_011 : zioh_1 = 18'b111111111111111_011;
         7'b1111_100 : zioh_1 = 18'b111111111111111_100;
         7'b1111_101 : zioh_1 = 18'b111111111111111_101;
         7'b1111_110 : zioh_1 = 18'b111111111111111_110;
         7'b1111_111 : zioh_1 = 18'b111111111111111_111;
         default     : zioh_1 = 18'b000000000111111_000;
      endcase
  end

  always @(ZCTRL[6:0]) begin
      case (ZCTRL[6:0])
         7'b0000_000 : zioh_0 = 18'b000000000000000_000;
         7'b0000_001 : zioh_0 = 18'b000000000000000_001;
         7'b0000_010 : zioh_0 = 18'b000000000000000_010;
         7'b0000_011 : zioh_0 = 18'b000000000000000_011;
         7'b0000_100 : zioh_0 = 18'b000000000000000_100;
         7'b0000_101 : zioh_0 = 18'b000000000000000_101;
         7'b0000_110 : zioh_0 = 18'b000000000000000_110;
         7'b0000_111 : zioh_0 = 18'b000000000000000_111;
         7'b0001_000 : zioh_0 = 18'b000000000000001_000;
         7'b0001_001 : zioh_0 = 18'b000000000000001_001;
         7'b0001_010 : zioh_0 = 18'b000000000000001_010;
         7'b0001_011 : zioh_0 = 18'b000000000000001_011;
         7'b0001_100 : zioh_0 = 18'b000000000000001_100;
         7'b0001_101 : zioh_0 = 18'b000000000000001_101;
         7'b0001_110 : zioh_0 = 18'b000000000000001_110;
         7'b0001_111 : zioh_0 = 18'b000000000000001_111;
         7'b0010_000 : zioh_0 = 18'b000000000000011_000;
         7'b0010_001 : zioh_0 = 18'b000000000000011_001;
         7'b0010_010 : zioh_0 = 18'b000000000000011_010;
         7'b0010_011 : zioh_0 = 18'b000000000000011_011;
         7'b0010_100 : zioh_0 = 18'b000000000000011_100;
         7'b0010_101 : zioh_0 = 18'b000000000000011_101;
         7'b0010_110 : zioh_0 = 18'b000000000000011_110;
         7'b0010_111 : zioh_0 = 18'b000000000000011_111;
         7'b0011_000 : zioh_0 = 18'b000000000000111_000;
         7'b0011_001 : zioh_0 = 18'b000000000000111_001;
         7'b0011_010 : zioh_0 = 18'b000000000000111_010;
         7'b0011_011 : zioh_0 = 18'b000000000000111_011;
         7'b0011_100 : zioh_0 = 18'b000000000000111_100;
         7'b0011_101 : zioh_0 = 18'b000000000000111_101;
         7'b0011_110 : zioh_0 = 18'b000000000000111_110;
         7'b0011_111 : zioh_0 = 18'b000000000000111_111;
         7'b0100_000 : zioh_0 = 18'b000000000001111_000;
         7'b0100_001 : zioh_0 = 18'b000000000001111_001;
         7'b0100_010 : zioh_0 = 18'b000000000001111_010;
         7'b0100_011 : zioh_0 = 18'b000000000001111_011;
         7'b0100_100 : zioh_0 = 18'b000000000001111_100;
         7'b0100_101 : zioh_0 = 18'b000000000001111_101;
         7'b0100_110 : zioh_0 = 18'b000000000001111_110;
         7'b0100_111 : zioh_0 = 18'b000000000001111_111;
         7'b0101_000 : zioh_0 = 18'b000000000011111_000;
         7'b0101_001 : zioh_0 = 18'b000000000011111_001;
         7'b0101_010 : zioh_0 = 18'b000000000011111_010;
         7'b0101_011 : zioh_0 = 18'b000000000011111_011;
         7'b0101_100 : zioh_0 = 18'b000000000011111_100;
         7'b0101_101 : zioh_0 = 18'b000000000011111_101;
         7'b0101_110 : zioh_0 = 18'b000000000011111_110;
         7'b0101_111 : zioh_0 = 18'b000000000011111_111;
         7'b0110_000 : zioh_0 = 18'b000000000111111_000;
         7'b0110_001 : zioh_0 = 18'b000000000111111_001;
         7'b0110_010 : zioh_0 = 18'b000000000111111_010;
         7'b0110_011 : zioh_0 = 18'b000000000111111_011;
         7'b0110_100 : zioh_0 = 18'b000000000111111_100;
         7'b0110_101 : zioh_0 = 18'b000000000111111_101;
         7'b0110_110 : zioh_0 = 18'b000000000111111_110;
         7'b0110_111 : zioh_0 = 18'b000000000111111_111;
         7'b0111_000 : zioh_0 = 18'b000000001111111_000;
         7'b0111_001 : zioh_0 = 18'b000000001111111_001;
         7'b0111_010 : zioh_0 = 18'b000000001111111_010;
         7'b0111_011 : zioh_0 = 18'b000000001111111_011;
         7'b0111_100 : zioh_0 = 18'b000000001111111_100;
         7'b0111_101 : zioh_0 = 18'b000000001111111_101;
         7'b0111_110 : zioh_0 = 18'b000000001111111_110;
         7'b0111_111 : zioh_0 = 18'b000000001111111_111;
         7'b1000_000 : zioh_0 = 18'b000000011111111_000;
         7'b1000_001 : zioh_0 = 18'b000000011111111_001;
         7'b1000_010 : zioh_0 = 18'b000000011111111_010;
         7'b1000_011 : zioh_0 = 18'b000000011111111_011;
         7'b1000_100 : zioh_0 = 18'b000000011111111_100;
         7'b1000_101 : zioh_0 = 18'b000000011111111_101;
         7'b1000_110 : zioh_0 = 18'b000000011111111_110;
         7'b1000_111 : zioh_0 = 18'b000000011111111_111;
         7'b1001_000 : zioh_0 = 18'b000000111111111_000;
         7'b1001_001 : zioh_0 = 18'b000000111111111_001;
         7'b1001_010 : zioh_0 = 18'b000000111111111_010;
         7'b1001_011 : zioh_0 = 18'b000000111111111_011;
         7'b1001_100 : zioh_0 = 18'b000000111111111_100;
         7'b1001_101 : zioh_0 = 18'b000000111111111_101;
         7'b1001_110 : zioh_0 = 18'b000000111111111_110;
         7'b1001_111 : zioh_0 = 18'b000000111111111_111;
         7'b1010_000 : zioh_0 = 18'b000001111111111_000;
         7'b1010_001 : zioh_0 = 18'b000001111111111_001;
         7'b1010_010 : zioh_0 = 18'b000001111111111_010;
         7'b1010_011 : zioh_0 = 18'b000001111111111_011;
         7'b1010_100 : zioh_0 = 18'b000001111111111_100;
         7'b1010_101 : zioh_0 = 18'b000001111111111_101;
         7'b1010_110 : zioh_0 = 18'b000001111111111_110;
         7'b1010_111 : zioh_0 = 18'b000001111111111_111;
         7'b1011_000 : zioh_0 = 18'b000011111111111_000;
         7'b1011_001 : zioh_0 = 18'b000011111111111_001;
         7'b1011_010 : zioh_0 = 18'b000011111111111_010;
         7'b1011_011 : zioh_0 = 18'b000011111111111_011;
         7'b1011_100 : zioh_0 = 18'b000011111111111_100;
         7'b1011_101 : zioh_0 = 18'b000011111111111_101;
         7'b1011_110 : zioh_0 = 18'b000011111111111_110;
         7'b1011_111 : zioh_0 = 18'b000011111111111_111;
         7'b1100_000 : zioh_0 = 18'b000111111111111_000;
         7'b1100_001 : zioh_0 = 18'b000111111111111_001;
         7'b1100_010 : zioh_0 = 18'b000111111111111_010;
         7'b1100_011 : zioh_0 = 18'b000111111111111_011;
         7'b1100_100 : zioh_0 = 18'b000111111111111_100;
         7'b1100_101 : zioh_0 = 18'b000111111111111_101;
         7'b1100_110 : zioh_0 = 18'b000111111111111_110;
         7'b1100_111 : zioh_0 = 18'b000111111111111_111;
         7'b1101_000 : zioh_0 = 18'b001111111111111_000;
         7'b1101_001 : zioh_0 = 18'b001111111111111_001;
         7'b1101_010 : zioh_0 = 18'b001111111111111_010;
         7'b1101_011 : zioh_0 = 18'b001111111111111_011;
         7'b1101_100 : zioh_0 = 18'b001111111111111_100;
         7'b1101_101 : zioh_0 = 18'b001111111111111_101;
         7'b1101_110 : zioh_0 = 18'b001111111111111_110;
         7'b1101_111 : zioh_0 = 18'b001111111111111_111;
         7'b1110_000 : zioh_0 = 18'b011111111111111_000;
         7'b1110_001 : zioh_0 = 18'b011111111111111_001;
         7'b1110_010 : zioh_0 = 18'b011111111111111_010;
         7'b1110_011 : zioh_0 = 18'b011111111111111_011;
         7'b1110_100 : zioh_0 = 18'b011111111111111_100;
         7'b1110_101 : zioh_0 = 18'b011111111111111_101;
         7'b1110_110 : zioh_0 = 18'b011111111111111_110;
         7'b1110_111 : zioh_0 = 18'b011111111111111_111;
         7'b1111_000 : zioh_0 = 18'b111111111111111_000;
         7'b1111_001 : zioh_0 = 18'b111111111111111_001;
         7'b1111_010 : zioh_0 = 18'b111111111111111_010;
         7'b1111_011 : zioh_0 = 18'b111111111111111_011;
         7'b1111_100 : zioh_0 = 18'b111111111111111_100;
         7'b1111_101 : zioh_0 = 18'b111111111111111_101;
         7'b1111_110 : zioh_0 = 18'b111111111111111_110;
         7'b1111_111 : zioh_0 = 18'b111111111111111_111;
         default     : zioh_0 = 18'b000000000111111_000;
      endcase
  end
`endif

  specify
      (ZCTRL[0] *> ZIOH_ZQ[0]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[1] *> ZIOH_ZQ[1]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[2] *> ZIOH_ZQ[2]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[3] *> ZIOH_ZQ[17], ZIOH_ZQ[15], ZIOH_ZQ[13], ZIOH_ZQ[11], ZIOH_ZQ[9], ZIOH_ZQ[7], ZIOH_ZQ[5], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[4] *> ZIOH_ZQ[17], ZIOH_ZQ[16], ZIOH_ZQ[15], ZIOH_ZQ[13], ZIOH_ZQ[12], ZIOH_ZQ[11], ZIOH_ZQ[9], ZIOH_ZQ[8], ZIOH_ZQ[7], ZIOH_ZQ[5], ZIOH_ZQ[4], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[5] *> ZIOH_ZQ[17], ZIOH_ZQ[16], ZIOH_ZQ[14], ZIOH_ZQ[13], ZIOH_ZQ[12], ZIOH_ZQ[11], ZIOH_ZQ[9], ZIOH_ZQ[8], ZIOH_ZQ[7], ZIOH_ZQ[6], ZIOH_ZQ[5], ZIOH_ZQ[4], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[6] *> ZIOH_ZQ[17], ZIOH_ZQ[16], ZIOH_ZQ[15], ZIOH_ZQ[14], ZIOH_ZQ[13], ZIOH_ZQ[12], ZIOH_ZQ[11], ZIOH_ZQ[10], ZIOH_ZQ[9], ZIOH_ZQ[8], ZIOH_ZQ[7], ZIOH_ZQ[6], ZIOH_ZQ[5], ZIOH_ZQ[4], ZIOH_ZQ[3]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[7] *> ZIOH_ZQ[18]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[8] *> ZIOH_ZQ[19]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[9] *> ZIOH_ZQ[20]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[10] *> ZIOH_ZQ[35], ZIOH_ZQ[33], ZIOH_ZQ[31], ZIOH_ZQ[29], ZIOH_ZQ[27], ZIOH_ZQ[25], ZIOH_ZQ[23], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[11] *> ZIOH_ZQ[35], ZIOH_ZQ[34], ZIOH_ZQ[33], ZIOH_ZQ[31], ZIOH_ZQ[30], ZIOH_ZQ[29], ZIOH_ZQ[27], ZIOH_ZQ[26], ZIOH_ZQ[25], ZIOH_ZQ[23], ZIOH_ZQ[22], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[12] *> ZIOH_ZQ[35], ZIOH_ZQ[34], ZIOH_ZQ[32], ZIOH_ZQ[31], ZIOH_ZQ[30], ZIOH_ZQ[29], ZIOH_ZQ[27], ZIOH_ZQ[26], ZIOH_ZQ[25], ZIOH_ZQ[24], ZIOH_ZQ[23], ZIOH_ZQ[22], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[13] *> ZIOH_ZQ[35], ZIOH_ZQ[34], ZIOH_ZQ[33], ZIOH_ZQ[32], ZIOH_ZQ[31], ZIOH_ZQ[30], ZIOH_ZQ[29], ZIOH_ZQ[28], ZIOH_ZQ[27], ZIOH_ZQ[26], ZIOH_ZQ[25], ZIOH_ZQ[24], ZIOH_ZQ[23], ZIOH_ZQ[22], ZIOH_ZQ[21]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[14] *> ZIOH_ZQ[36]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[15] *> ZIOH_ZQ[37]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[16] *> ZIOH_ZQ[38]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[17] *> ZIOH_ZQ[53], ZIOH_ZQ[51], ZIOH_ZQ[49], ZIOH_ZQ[47], ZIOH_ZQ[45], ZIOH_ZQ[43], ZIOH_ZQ[41], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[18] *> ZIOH_ZQ[53], ZIOH_ZQ[52], ZIOH_ZQ[51], ZIOH_ZQ[49], ZIOH_ZQ[48], ZIOH_ZQ[47], ZIOH_ZQ[45], ZIOH_ZQ[44], ZIOH_ZQ[43], ZIOH_ZQ[41], ZIOH_ZQ[40], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[19] *> ZIOH_ZQ[53], ZIOH_ZQ[52], ZIOH_ZQ[50], ZIOH_ZQ[49], ZIOH_ZQ[48], ZIOH_ZQ[47], ZIOH_ZQ[45], ZIOH_ZQ[44], ZIOH_ZQ[43], ZIOH_ZQ[42], ZIOH_ZQ[41], ZIOH_ZQ[40], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[20] *> ZIOH_ZQ[53], ZIOH_ZQ[52], ZIOH_ZQ[51], ZIOH_ZQ[50], ZIOH_ZQ[49], ZIOH_ZQ[48], ZIOH_ZQ[47], ZIOH_ZQ[46], ZIOH_ZQ[45], ZIOH_ZQ[44], ZIOH_ZQ[43], ZIOH_ZQ[42], ZIOH_ZQ[41], ZIOH_ZQ[40], ZIOH_ZQ[39]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (ZCTRL[21] *> ZIOH_ZQ[54]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[22] *> ZIOH_ZQ[55]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[23] *> ZIOH_ZQ[56]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[24] *> ZIOH_ZQ[71], ZIOH_ZQ[69], ZIOH_ZQ[67], ZIOH_ZQ[65], ZIOH_ZQ[63], ZIOH_ZQ[61], ZIOH_ZQ[59], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[25] *> ZIOH_ZQ[71], ZIOH_ZQ[70], ZIOH_ZQ[69], ZIOH_ZQ[67], ZIOH_ZQ[66], ZIOH_ZQ[65], ZIOH_ZQ[63], ZIOH_ZQ[62], ZIOH_ZQ[61], ZIOH_ZQ[59], ZIOH_ZQ[58], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[26] *> ZIOH_ZQ[71], ZIOH_ZQ[70], ZIOH_ZQ[68], ZIOH_ZQ[67], ZIOH_ZQ[66], ZIOH_ZQ[65], ZIOH_ZQ[63], ZIOH_ZQ[62], ZIOH_ZQ[61], ZIOH_ZQ[60], ZIOH_ZQ[59], ZIOH_ZQ[58], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZCTRL[27] *> ZIOH_ZQ[71], ZIOH_ZQ[70], ZIOH_ZQ[69], ZIOH_ZQ[68], ZIOH_ZQ[67], ZIOH_ZQ[66], ZIOH_ZQ[65], ZIOH_ZQ[64], ZIOH_ZQ[63], ZIOH_ZQ[62], ZIOH_ZQ[61], ZIOH_ZQ[60], ZIOH_ZQ[59], ZIOH_ZQ[58], ZIOH_ZQ[57]) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      (PAD => MVREF_ZQ[0])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF_ZQ[1])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF_ZQ[2])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PAD => MVREF_ZQ[3])    = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine

// ------------------------------
// Output impedance / input termination controller
// ------------------------------
`celldefine
module DWC_D4MV_PZQ_NS (MVREF_ZQ,
`ifdef DWC_DDRPHY_PG_PINS
      MVDD, MVAA_PLL, MVDDQ,  MVSS, MVSSQ,
`endif
      POCH, PAD, ZCAL, ZCOMP, ZIOH_ZQ, LENH, ZPROG, ZQ_OFF, PD, PDRH18, MVREFSE_ZQ);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVDD;
  input             MVAA_PLL;        // bonding pad and supply
  input             MVDDQ;
  input             MVSS;
  input             MVSSQ;
`endif
  input  [3:0]      MVREF_ZQ;
  input             POCH;	          // Power-on clear high voltage
  input             PAD;
  input  [1:0]      ZCAL;
  output            ZCOMP;
  input  [71:0]     ZIOH_ZQ;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input  [7:0]      ZPROG;
  input             ZQ_OFF;
  input             PD;
  input		PDRH18;
  input		MVREFSE_ZQ;
 
  // --------------------
  // "zlevel" is a value between 0 and 31. It is decoded through ZIOH_ZQ,
  // which is encoded in the PVREF cell from ZCOMP and ZLSB
  //
  // zlevel_0 = (ZCOMP[3:0]*2)   + ZLSB[0]
  // zlevel_1 = (ZCOMP[7:4]*2)   + ZLSB[1]
  // zlevel_2 = (ZCOMP[11:8]*2)  + ZLSB[2]
  // zlevel_3 = (ZCOMP[15:12]*2) + ZLSB[3]
  // --------------------
  reg    [4:0]      trippoint_minimum;
  reg    [7:0]      zlevel_0;
  reg    [7:0]      zlevel_1;
  reg    [7:0]      zlevel_2;
  reg    [7:0]      zlevel_3;
  reg    [7:0]      zlevel_cal;
  
  wire	 [1:0]	    ZCAL_ret;
  wire	 [7:0]	    ZPROG_ret;
  wire	 	    ZQ_OFF_PD_ret;
  wire		    ZQ_OFF_PD;	
  wire              POCH_internal;
  wire              LENH_b;

  wire   [3:0]      zprog_i;

	// ZQ_OFF or PD 
	
	or (ZQ_OFF_PD, ZQ_OFF, PD);
	
  DWC_D4MV_LATCH ZCAL_0_lat (ZCAL_ret[0], ZCAL[0], LENH);
  DWC_D4MV_LATCH ZCAL_1_lat (ZCAL_ret[1], ZCAL[1], LENH);

  DWC_D4MV_LATCH ZPROG_0_lat (ZPROG_ret[0], ZPROG[0], LENH);
  DWC_D4MV_LATCH ZPROG_1_lat (ZPROG_ret[1], ZPROG[1], LENH);
  DWC_D4MV_LATCH ZPROG_2_lat (ZPROG_ret[2], ZPROG[2], LENH);
  DWC_D4MV_LATCH ZPROG_3_lat (ZPROG_ret[3], ZPROG[3], LENH);
  DWC_D4MV_LATCH ZPROG_4_lat (ZPROG_ret[4], ZPROG[4], LENH);
  DWC_D4MV_LATCH ZPROG_5_lat (ZPROG_ret[5], ZPROG[5], LENH);
  DWC_D4MV_LATCH ZPROG_6_lat (ZPROG_ret[6], ZPROG[6], LENH);
  DWC_D4MV_LATCH ZPROG_7_lat (ZPROG_ret[7], ZPROG[7], LENH);

  DWC_D4MV_LATCH ZQ_OFF_lat (ZQ_OFF_PD_ret, ZQ_OFF_PD, LENH);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

`ifdef DWC_DDRPHY_ATPG_MODEL
  `ifdef DWC_DDR3PHY_TB
  assign ZCOMP = ((ZQ_OFF_PD === 1'bx || ZQ_OFF_PD === 1'bz)) ? 1'bx : !ZQ_OFF_PD_ret & (zlevel_cal < trippoint_minimum) & !POCH_internal;
  `else
  assign ZCOMP = !ZQ_OFF_PD_ret & !POCH_internal;
  `endif
`else
  assign ZCOMP = ((ZQ_OFF_PD === 1'bx || ZQ_OFF_PD === 1'bz)) ? 1'bx : !ZQ_OFF_PD_ret & (zlevel_cal < trippoint_minimum) & !POCH_internal;
`endif

  //-----------------
  // ZPROG is divided into two 4-bit configuration values
  // ZPROG[7:4] is used to program termination impedance
  // ZPROG[3:0] is used to program output drive impedance
  //-----------------
  assign zprog_i[3] = ZCAL_ret[1] ? ZPROG_ret[7] : ZPROG_ret[3];
  assign zprog_i[2] = ZCAL_ret[1] ? ZPROG_ret[6] : ZPROG_ret[2];
  assign zprog_i[1] = ZCAL_ret[1] ? ZPROG_ret[5] : ZPROG_ret[1];
  assign zprog_i[0] = ZCAL_ret[1] ? ZPROG_ret[4] : ZPROG_ret[0];

  always @(zprog_i) begin
      case (zprog_i)
          4'b0000   : trippoint_minimum = 5'd0;
          4'b0001   : trippoint_minimum = 5'd2;
          4'b0010   : trippoint_minimum = 5'd2;
          4'b0011   : trippoint_minimum = 5'd4;
          4'b0100   : trippoint_minimum = 5'd4;
          4'b0101   : trippoint_minimum = 5'd6;
          4'b0110   : trippoint_minimum = 5'd8;
          4'b0111   : trippoint_minimum = 5'd8;
          4'b1000   : trippoint_minimum = 5'd10;
          4'b1001   : trippoint_minimum = 5'd10;
          4'b1010   : trippoint_minimum = 5'd12;
          4'b1011   : trippoint_minimum = 5'd12;
          4'b1100   : trippoint_minimum = 5'd14;
          4'b1101   : trippoint_minimum = 5'd16;
          4'b1110   : trippoint_minimum = 5'd16;
          default   : trippoint_minimum = 5'd18;
      endcase
  end

  always @(ZIOH_ZQ) begin
      case (ZIOH_ZQ[17:0])
          18'b000000000000000_000 : zlevel_0 = 7'd0;
          18'b000000000000000_001 : zlevel_0 = 7'd1;
          18'b000000000000000_010 : zlevel_0 = 7'd2;
          18'b000000000000000_011 : zlevel_0 = 7'd3;
          18'b000000000000000_100 : zlevel_0 = 7'd4;
          18'b000000000000000_101 : zlevel_0 = 7'd5;
          18'b000000000000000_110 : zlevel_0 = 7'd6;
          18'b000000000000000_111 : zlevel_0 = 7'd7;
          18'b000000000000001_000 : zlevel_0 = 7'd8;
          18'b000000000000001_001 : zlevel_0 = 7'd9;
          18'b000000000000001_010 : zlevel_0 = 7'd10;
          18'b000000000000001_011 : zlevel_0 = 7'd11;
          18'b000000000000001_100 : zlevel_0 = 7'd12;
          18'b000000000000001_101 : zlevel_0 = 7'd13;
          18'b000000000000001_110 : zlevel_0 = 7'd14;
          18'b000000000000001_111 : zlevel_0 = 7'd15;
          18'b000000000000011_000 : zlevel_0 = 7'd16;
          18'b000000000000011_001 : zlevel_0 = 7'd17;
          18'b000000000000011_010 : zlevel_0 = 7'd18;
          18'b000000000000011_011 : zlevel_0 = 7'd19;
          18'b000000000000011_100 : zlevel_0 = 7'd20;
          18'b000000000000011_101 : zlevel_0 = 7'd21;
          18'b000000000000011_110 : zlevel_0 = 7'd22;
          18'b000000000000011_111 : zlevel_0 = 7'd23;
          18'b000000000000111_000 : zlevel_0 = 7'd24;
          18'b000000000000111_001 : zlevel_0 = 7'd25;
          18'b000000000000111_010 : zlevel_0 = 7'd26;
          18'b000000000000111_011 : zlevel_0 = 7'd27;
          18'b000000000000111_100 : zlevel_0 = 7'd28;
          18'b000000000000111_101 : zlevel_0 = 7'd29;
          18'b000000000000111_110 : zlevel_0 = 7'd30;
          18'b000000000000111_111 : zlevel_0 = 7'd31;
          18'b000000000001111_000 : zlevel_0 = 7'd32;
          18'b000000000001111_001 : zlevel_0 = 7'd33;
          18'b000000000001111_010 : zlevel_0 = 7'd34;
          18'b000000000001111_011 : zlevel_0 = 7'd35;
          18'b000000000001111_100 : zlevel_0 = 7'd36;
          18'b000000000001111_101 : zlevel_0 = 7'd37;
          18'b000000000001111_110 : zlevel_0 = 7'd38;
          18'b000000000001111_111 : zlevel_0 = 7'd39;
          18'b000000000011111_000 : zlevel_0 = 7'd40;
          18'b000000000011111_001 : zlevel_0 = 7'd41;
          18'b000000000011111_010 : zlevel_0 = 7'd42;
          18'b000000000011111_011 : zlevel_0 = 7'd43;
          18'b000000000011111_100 : zlevel_0 = 7'd44;
          18'b000000000011111_101 : zlevel_0 = 7'd45;
          18'b000000000011111_110 : zlevel_0 = 7'd46;
          18'b000000000011111_111 : zlevel_0 = 7'd47;
          18'b000000000111111_000 : zlevel_0 = 7'd48;
          18'b000000000111111_001 : zlevel_0 = 7'd49;
          18'b000000000111111_010 : zlevel_0 = 7'd50;
          18'b000000000111111_011 : zlevel_0 = 7'd51;
          18'b000000000111111_100 : zlevel_0 = 7'd52;
          18'b000000000111111_101 : zlevel_0 = 7'd53;
          18'b000000000111111_110 : zlevel_0 = 7'd54;
          18'b000000000111111_111 : zlevel_0 = 7'd55;
          18'b000000001111111_000 : zlevel_0 = 7'd56;
          18'b000000001111111_001 : zlevel_0 = 7'd57;
          18'b000000001111111_010 : zlevel_0 = 7'd58;
          18'b000000001111111_011 : zlevel_0 = 7'd59;
          18'b000000001111111_100 : zlevel_0 = 7'd60;
          18'b000000001111111_101 : zlevel_0 = 7'd61;
          18'b000000001111111_110 : zlevel_0 = 7'd62;
          18'b000000001111111_111 : zlevel_0 = 7'd63;
          18'b000000011111111_000 : zlevel_0 = 7'd64;
          18'b000000011111111_001 : zlevel_0 = 7'd65;
          18'b000000011111111_010 : zlevel_0 = 7'd66;
          18'b000000011111111_011 : zlevel_0 = 7'd67;
          18'b000000011111111_100 : zlevel_0 = 7'd68;
          18'b000000011111111_101 : zlevel_0 = 7'd69;
          18'b000000011111111_110 : zlevel_0 = 7'd70;
          18'b000000011111111_111 : zlevel_0 = 7'd71;
          18'b000000111111111_000 : zlevel_0 = 7'd72;
          18'b000000111111111_001 : zlevel_0 = 7'd73;
          18'b000000111111111_010 : zlevel_0 = 7'd74;
          18'b000000111111111_011 : zlevel_0 = 7'd75;
          18'b000000111111111_100 : zlevel_0 = 7'd76;
          18'b000000111111111_101 : zlevel_0 = 7'd77;
          18'b000000111111111_110 : zlevel_0 = 7'd78;
          18'b000000111111111_111 : zlevel_0 = 7'd79;
          18'b000001111111111_000 : zlevel_0 = 7'd80;
          18'b000001111111111_001 : zlevel_0 = 7'd81;
          18'b000001111111111_010 : zlevel_0 = 7'd82;
          18'b000001111111111_011 : zlevel_0 = 7'd83;
          18'b000001111111111_100 : zlevel_0 = 7'd84;
          18'b000001111111111_101 : zlevel_0 = 7'd85;
          18'b000001111111111_110 : zlevel_0 = 7'd86;
          18'b000001111111111_111 : zlevel_0 = 7'd87;
          18'b000011111111111_000 : zlevel_0 = 7'd88;
          18'b000011111111111_001 : zlevel_0 = 7'd89;
          18'b000011111111111_010 : zlevel_0 = 7'd90;
          18'b000011111111111_011 : zlevel_0 = 7'd91;
          18'b000011111111111_100 : zlevel_0 = 7'd92;
          18'b000011111111111_101 : zlevel_0 = 7'd93;
          18'b000011111111111_110 : zlevel_0 = 7'd94;
          18'b000011111111111_111 : zlevel_0 = 7'd95;
          18'b000111111111111_000 : zlevel_0 = 7'd96;
          18'b000111111111111_001 : zlevel_0 = 7'd97;
          18'b000111111111111_010 : zlevel_0 = 7'd98;
          18'b000111111111111_011 : zlevel_0 = 7'd99;
          18'b000111111111111_100 : zlevel_0 = 7'd100;
          18'b000111111111111_101 : zlevel_0 = 7'd101;
          18'b000111111111111_110 : zlevel_0 = 7'd102;
          18'b000111111111111_111 : zlevel_0 = 7'd103;
          18'b001111111111111_000 : zlevel_0 = 7'd104;
          18'b001111111111111_001 : zlevel_0 = 7'd105;
          18'b001111111111111_010 : zlevel_0 = 7'd106;
          18'b001111111111111_011 : zlevel_0 = 7'd107;
          18'b001111111111111_100 : zlevel_0 = 7'd108;
          18'b001111111111111_101 : zlevel_0 = 7'd109;
          18'b001111111111111_110 : zlevel_0 = 7'd110;
          18'b001111111111111_111 : zlevel_0 = 7'd111;
          18'b011111111111111_000 : zlevel_0 = 7'd112;
          18'b011111111111111_001 : zlevel_0 = 7'd113;
          18'b011111111111111_010 : zlevel_0 = 7'd114;
          18'b011111111111111_011 : zlevel_0 = 7'd115;
          18'b011111111111111_100 : zlevel_0 = 7'd116;
          18'b011111111111111_101 : zlevel_0 = 7'd117;
          18'b011111111111111_110 : zlevel_0 = 7'd118;
          18'b011111111111111_111 : zlevel_0 = 7'd119;
          18'b111111111111111_000 : zlevel_0 = 7'd120;
          18'b111111111111111_001 : zlevel_0 = 7'd121;
          18'b111111111111111_010 : zlevel_0 = 7'd122;
          18'b111111111111111_011 : zlevel_0 = 7'd123;
          18'b111111111111111_100 : zlevel_0 = 7'd124;
          18'b111111111111111_101 : zlevel_0 = 7'd125;
          18'b111111111111111_110 : zlevel_0 = 7'd126;
          18'b111111111111111_111 : zlevel_0 = 7'd127;
          default                 : zlevel_0 = 7'bxxxxxxx;
      endcase

      case (ZIOH_ZQ[35:18])
          18'b000000000000000_000 : zlevel_1 = 7'd0;
          18'b000000000000000_001 : zlevel_1 = 7'd1;
          18'b000000000000000_010 : zlevel_1 = 7'd2;
          18'b000000000000000_011 : zlevel_1 = 7'd3;
          18'b000000000000000_100 : zlevel_1 = 7'd4;
          18'b000000000000000_101 : zlevel_1 = 7'd5;
          18'b000000000000000_110 : zlevel_1 = 7'd6;
          18'b000000000000000_111 : zlevel_1 = 7'd7;
          18'b000000000000001_000 : zlevel_1 = 7'd8;
          18'b000000000000001_001 : zlevel_1 = 7'd9;
          18'b000000000000001_010 : zlevel_1 = 7'd10;
          18'b000000000000001_011 : zlevel_1 = 7'd11;
          18'b000000000000001_100 : zlevel_1 = 7'd12;
          18'b000000000000001_101 : zlevel_1 = 7'd13;
          18'b000000000000001_110 : zlevel_1 = 7'd14;
          18'b000000000000001_111 : zlevel_1 = 7'd15;
          18'b000000000000011_000 : zlevel_1 = 7'd16;
          18'b000000000000011_001 : zlevel_1 = 7'd17;
          18'b000000000000011_010 : zlevel_1 = 7'd18;
          18'b000000000000011_011 : zlevel_1 = 7'd19;
          18'b000000000000011_100 : zlevel_1 = 7'd20;
          18'b000000000000011_101 : zlevel_1 = 7'd21;
          18'b000000000000011_110 : zlevel_1 = 7'd22;
          18'b000000000000011_111 : zlevel_1 = 7'd23;
          18'b000000000000111_000 : zlevel_1 = 7'd24;
          18'b000000000000111_001 : zlevel_1 = 7'd25;
          18'b000000000000111_010 : zlevel_1 = 7'd26;
          18'b000000000000111_011 : zlevel_1 = 7'd27;
          18'b000000000000111_100 : zlevel_1 = 7'd28;
          18'b000000000000111_101 : zlevel_1 = 7'd29;
          18'b000000000000111_110 : zlevel_1 = 7'd30;
          18'b000000000000111_111 : zlevel_1 = 7'd31;
          18'b000000000001111_000 : zlevel_1 = 7'd32;
          18'b000000000001111_001 : zlevel_1 = 7'd33;
          18'b000000000001111_010 : zlevel_1 = 7'd34;
          18'b000000000001111_011 : zlevel_1 = 7'd35;
          18'b000000000001111_100 : zlevel_1 = 7'd36;
          18'b000000000001111_101 : zlevel_1 = 7'd37;
          18'b000000000001111_110 : zlevel_1 = 7'd38;
          18'b000000000001111_111 : zlevel_1 = 7'd39;
          18'b000000000011111_000 : zlevel_1 = 7'd40;
          18'b000000000011111_001 : zlevel_1 = 7'd41;
          18'b000000000011111_010 : zlevel_1 = 7'd42;
          18'b000000000011111_011 : zlevel_1 = 7'd43;
          18'b000000000011111_100 : zlevel_1 = 7'd44;
          18'b000000000011111_101 : zlevel_1 = 7'd45;
          18'b000000000011111_110 : zlevel_1 = 7'd46;
          18'b000000000011111_111 : zlevel_1 = 7'd47;
          18'b000000000111111_000 : zlevel_1 = 7'd48;
          18'b000000000111111_001 : zlevel_1 = 7'd49;
          18'b000000000111111_010 : zlevel_1 = 7'd50;
          18'b000000000111111_011 : zlevel_1 = 7'd51;
          18'b000000000111111_100 : zlevel_1 = 7'd52;
          18'b000000000111111_101 : zlevel_1 = 7'd53;
          18'b000000000111111_110 : zlevel_1 = 7'd54;
          18'b000000000111111_111 : zlevel_1 = 7'd55;
          18'b000000001111111_000 : zlevel_1 = 7'd56;
          18'b000000001111111_001 : zlevel_1 = 7'd57;
          18'b000000001111111_010 : zlevel_1 = 7'd58;
          18'b000000001111111_011 : zlevel_1 = 7'd59;
          18'b000000001111111_100 : zlevel_1 = 7'd60;
          18'b000000001111111_101 : zlevel_1 = 7'd61;
          18'b000000001111111_110 : zlevel_1 = 7'd62;
          18'b000000001111111_111 : zlevel_1 = 7'd63;
          18'b000000011111111_000 : zlevel_1 = 7'd64;
          18'b000000011111111_001 : zlevel_1 = 7'd65;
          18'b000000011111111_010 : zlevel_1 = 7'd66;
          18'b000000011111111_011 : zlevel_1 = 7'd67;
          18'b000000011111111_100 : zlevel_1 = 7'd68;
          18'b000000011111111_101 : zlevel_1 = 7'd69;
          18'b000000011111111_110 : zlevel_1 = 7'd70;
          18'b000000011111111_111 : zlevel_1 = 7'd71;
          18'b000000111111111_000 : zlevel_1 = 7'd72;
          18'b000000111111111_001 : zlevel_1 = 7'd73;
          18'b000000111111111_010 : zlevel_1 = 7'd74;
          18'b000000111111111_011 : zlevel_1 = 7'd75;
          18'b000000111111111_100 : zlevel_1 = 7'd76;
          18'b000000111111111_101 : zlevel_1 = 7'd77;
          18'b000000111111111_110 : zlevel_1 = 7'd78;
          18'b000000111111111_111 : zlevel_1 = 7'd79;
          18'b000001111111111_000 : zlevel_1 = 7'd80;
          18'b000001111111111_001 : zlevel_1 = 7'd81;
          18'b000001111111111_010 : zlevel_1 = 7'd82;
          18'b000001111111111_011 : zlevel_1 = 7'd83;
          18'b000001111111111_100 : zlevel_1 = 7'd84;
          18'b000001111111111_101 : zlevel_1 = 7'd85;
          18'b000001111111111_110 : zlevel_1 = 7'd86;
          18'b000001111111111_111 : zlevel_1 = 7'd87;
          18'b000011111111111_000 : zlevel_1 = 7'd88;
          18'b000011111111111_001 : zlevel_1 = 7'd89;
          18'b000011111111111_010 : zlevel_1 = 7'd90;
          18'b000011111111111_011 : zlevel_1 = 7'd91;
          18'b000011111111111_100 : zlevel_1 = 7'd92;
          18'b000011111111111_101 : zlevel_1 = 7'd93;
          18'b000011111111111_110 : zlevel_1 = 7'd94;
          18'b000011111111111_111 : zlevel_1 = 7'd95;
          18'b000111111111111_000 : zlevel_1 = 7'd96;
          18'b000111111111111_001 : zlevel_1 = 7'd97;
          18'b000111111111111_010 : zlevel_1 = 7'd98;
          18'b000111111111111_011 : zlevel_1 = 7'd99;
          18'b000111111111111_100 : zlevel_1 = 7'd100;
          18'b000111111111111_101 : zlevel_1 = 7'd101;
          18'b000111111111111_110 : zlevel_1 = 7'd102;
          18'b000111111111111_111 : zlevel_1 = 7'd103;
          18'b001111111111111_000 : zlevel_1 = 7'd104;
          18'b001111111111111_001 : zlevel_1 = 7'd105;
          18'b001111111111111_010 : zlevel_1 = 7'd106;
          18'b001111111111111_011 : zlevel_1 = 7'd107;
          18'b001111111111111_100 : zlevel_1 = 7'd108;
          18'b001111111111111_101 : zlevel_1 = 7'd109;
          18'b001111111111111_110 : zlevel_1 = 7'd110;
          18'b001111111111111_111 : zlevel_1 = 7'd111;
          18'b011111111111111_000 : zlevel_1 = 7'd112;
          18'b011111111111111_001 : zlevel_1 = 7'd113;
          18'b011111111111111_010 : zlevel_1 = 7'd114;
          18'b011111111111111_011 : zlevel_1 = 7'd115;
          18'b011111111111111_100 : zlevel_1 = 7'd116;
          18'b011111111111111_101 : zlevel_1 = 7'd117;
          18'b011111111111111_110 : zlevel_1 = 7'd118;
          18'b011111111111111_111 : zlevel_1 = 7'd119;
          18'b111111111111111_000 : zlevel_1 = 7'd120;
          18'b111111111111111_001 : zlevel_1 = 7'd121;
          18'b111111111111111_010 : zlevel_1 = 7'd122;
          18'b111111111111111_011 : zlevel_1 = 7'd123;
          18'b111111111111111_100 : zlevel_1 = 7'd124;
          18'b111111111111111_101 : zlevel_1 = 7'd125;
          18'b111111111111111_110 : zlevel_1 = 7'd126;
          18'b111111111111111_111 : zlevel_1 = 7'd127;
          default                 : zlevel_1 = 7'bxxxxxxx;
      endcase

      case (ZIOH_ZQ[53:36])
          18'b000000000000000_000 : zlevel_2 = 7'd0;
          18'b000000000000000_001 : zlevel_2 = 7'd1;
          18'b000000000000000_010 : zlevel_2 = 7'd2;
          18'b000000000000000_011 : zlevel_2 = 7'd3;
          18'b000000000000000_100 : zlevel_2 = 7'd4;
          18'b000000000000000_101 : zlevel_2 = 7'd5;
          18'b000000000000000_110 : zlevel_2 = 7'd6;
          18'b000000000000000_111 : zlevel_2 = 7'd7;
          18'b000000000000001_000 : zlevel_2 = 7'd8;
          18'b000000000000001_001 : zlevel_2 = 7'd9;
          18'b000000000000001_010 : zlevel_2 = 7'd10;
          18'b000000000000001_011 : zlevel_2 = 7'd11;
          18'b000000000000001_100 : zlevel_2 = 7'd12;
          18'b000000000000001_101 : zlevel_2 = 7'd13;
          18'b000000000000001_110 : zlevel_2 = 7'd14;
          18'b000000000000001_111 : zlevel_2 = 7'd15;
          18'b000000000000011_000 : zlevel_2 = 7'd16;
          18'b000000000000011_001 : zlevel_2 = 7'd17;
          18'b000000000000011_010 : zlevel_2 = 7'd18;
          18'b000000000000011_011 : zlevel_2 = 7'd19;
          18'b000000000000011_100 : zlevel_2 = 7'd20;
          18'b000000000000011_101 : zlevel_2 = 7'd21;
          18'b000000000000011_110 : zlevel_2 = 7'd22;
          18'b000000000000011_111 : zlevel_2 = 7'd23;
          18'b000000000000111_000 : zlevel_2 = 7'd24;
          18'b000000000000111_001 : zlevel_2 = 7'd25;
          18'b000000000000111_010 : zlevel_2 = 7'd26;
          18'b000000000000111_011 : zlevel_2 = 7'd27;
          18'b000000000000111_100 : zlevel_2 = 7'd28;
          18'b000000000000111_101 : zlevel_2 = 7'd29;
          18'b000000000000111_110 : zlevel_2 = 7'd30;
          18'b000000000000111_111 : zlevel_2 = 7'd31;
          18'b000000000001111_000 : zlevel_2 = 7'd32;
          18'b000000000001111_001 : zlevel_2 = 7'd33;
          18'b000000000001111_010 : zlevel_2 = 7'd34;
          18'b000000000001111_011 : zlevel_2 = 7'd35;
          18'b000000000001111_100 : zlevel_2 = 7'd36;
          18'b000000000001111_101 : zlevel_2 = 7'd37;
          18'b000000000001111_110 : zlevel_2 = 7'd38;
          18'b000000000001111_111 : zlevel_2 = 7'd39;
          18'b000000000011111_000 : zlevel_2 = 7'd40;
          18'b000000000011111_001 : zlevel_2 = 7'd41;
          18'b000000000011111_010 : zlevel_2 = 7'd42;
          18'b000000000011111_011 : zlevel_2 = 7'd43;
          18'b000000000011111_100 : zlevel_2 = 7'd44;
          18'b000000000011111_101 : zlevel_2 = 7'd45;
          18'b000000000011111_110 : zlevel_2 = 7'd46;
          18'b000000000011111_111 : zlevel_2 = 7'd47;
          18'b000000000111111_000 : zlevel_2 = 7'd48;
          18'b000000000111111_001 : zlevel_2 = 7'd49;
          18'b000000000111111_010 : zlevel_2 = 7'd50;
          18'b000000000111111_011 : zlevel_2 = 7'd51;
          18'b000000000111111_100 : zlevel_2 = 7'd52;
          18'b000000000111111_101 : zlevel_2 = 7'd53;
          18'b000000000111111_110 : zlevel_2 = 7'd54;
          18'b000000000111111_111 : zlevel_2 = 7'd55;
          18'b000000001111111_000 : zlevel_2 = 7'd56;
          18'b000000001111111_001 : zlevel_2 = 7'd57;
          18'b000000001111111_010 : zlevel_2 = 7'd58;
          18'b000000001111111_011 : zlevel_2 = 7'd59;
          18'b000000001111111_100 : zlevel_2 = 7'd60;
          18'b000000001111111_101 : zlevel_2 = 7'd61;
          18'b000000001111111_110 : zlevel_2 = 7'd62;
          18'b000000001111111_111 : zlevel_2 = 7'd63;
          18'b000000011111111_000 : zlevel_2 = 7'd64;
          18'b000000011111111_001 : zlevel_2 = 7'd65;
          18'b000000011111111_010 : zlevel_2 = 7'd66;
          18'b000000011111111_011 : zlevel_2 = 7'd67;
          18'b000000011111111_100 : zlevel_2 = 7'd68;
          18'b000000011111111_101 : zlevel_2 = 7'd69;
          18'b000000011111111_110 : zlevel_2 = 7'd70;
          18'b000000011111111_111 : zlevel_2 = 7'd71;
          18'b000000111111111_000 : zlevel_2 = 7'd72;
          18'b000000111111111_001 : zlevel_2 = 7'd73;
          18'b000000111111111_010 : zlevel_2 = 7'd74;
          18'b000000111111111_011 : zlevel_2 = 7'd75;
          18'b000000111111111_100 : zlevel_2 = 7'd76;
          18'b000000111111111_101 : zlevel_2 = 7'd77;
          18'b000000111111111_110 : zlevel_2 = 7'd78;
          18'b000000111111111_111 : zlevel_2 = 7'd79;
          18'b000001111111111_000 : zlevel_2 = 7'd80;
          18'b000001111111111_001 : zlevel_2 = 7'd81;
          18'b000001111111111_010 : zlevel_2 = 7'd82;
          18'b000001111111111_011 : zlevel_2 = 7'd83;
          18'b000001111111111_100 : zlevel_2 = 7'd84;
          18'b000001111111111_101 : zlevel_2 = 7'd85;
          18'b000001111111111_110 : zlevel_2 = 7'd86;
          18'b000001111111111_111 : zlevel_2 = 7'd87;
          18'b000011111111111_000 : zlevel_2 = 7'd88;
          18'b000011111111111_001 : zlevel_2 = 7'd89;
          18'b000011111111111_010 : zlevel_2 = 7'd90;
          18'b000011111111111_011 : zlevel_2 = 7'd91;
          18'b000011111111111_100 : zlevel_2 = 7'd92;
          18'b000011111111111_101 : zlevel_2 = 7'd93;
          18'b000011111111111_110 : zlevel_2 = 7'd94;
          18'b000011111111111_111 : zlevel_2 = 7'd95;
          18'b000111111111111_000 : zlevel_2 = 7'd96;
          18'b000111111111111_001 : zlevel_2 = 7'd97;
          18'b000111111111111_010 : zlevel_2 = 7'd98;
          18'b000111111111111_011 : zlevel_2 = 7'd99;
          18'b000111111111111_100 : zlevel_2 = 7'd100;
          18'b000111111111111_101 : zlevel_2 = 7'd101;
          18'b000111111111111_110 : zlevel_2 = 7'd102;
          18'b000111111111111_111 : zlevel_2 = 7'd103;
          18'b001111111111111_000 : zlevel_2 = 7'd104;
          18'b001111111111111_001 : zlevel_2 = 7'd105;
          18'b001111111111111_010 : zlevel_2 = 7'd106;
          18'b001111111111111_011 : zlevel_2 = 7'd107;
          18'b001111111111111_100 : zlevel_2 = 7'd108;
          18'b001111111111111_101 : zlevel_2 = 7'd109;
          18'b001111111111111_110 : zlevel_2 = 7'd110;
          18'b001111111111111_111 : zlevel_2 = 7'd111;
          18'b011111111111111_000 : zlevel_2 = 7'd112;
          18'b011111111111111_001 : zlevel_2 = 7'd113;
          18'b011111111111111_010 : zlevel_2 = 7'd114;
          18'b011111111111111_011 : zlevel_2 = 7'd115;
          18'b011111111111111_100 : zlevel_2 = 7'd116;
          18'b011111111111111_101 : zlevel_2 = 7'd117;
          18'b011111111111111_110 : zlevel_2 = 7'd118;
          18'b011111111111111_111 : zlevel_2 = 7'd119;
          18'b111111111111111_000 : zlevel_2 = 7'd120;
          18'b111111111111111_001 : zlevel_2 = 7'd121;
          18'b111111111111111_010 : zlevel_2 = 7'd122;
          18'b111111111111111_011 : zlevel_2 = 7'd123;
          18'b111111111111111_100 : zlevel_2 = 7'd124;
          18'b111111111111111_101 : zlevel_2 = 7'd125;
          18'b111111111111111_110 : zlevel_2 = 7'd126;
          18'b111111111111111_111 : zlevel_2 = 7'd127;
          default                 : zlevel_2 = 7'bxxxxxxx;
      endcase

      case (ZIOH_ZQ[71:54])
          18'b000000000000000_000 : zlevel_3 = 7'd0;
          18'b000000000000000_001 : zlevel_3 = 7'd1;
          18'b000000000000000_010 : zlevel_3 = 7'd2;
          18'b000000000000000_011 : zlevel_3 = 7'd3;
          18'b000000000000000_100 : zlevel_3 = 7'd4;
          18'b000000000000000_101 : zlevel_3 = 7'd5;
          18'b000000000000000_110 : zlevel_3 = 7'd6;
          18'b000000000000000_111 : zlevel_3 = 7'd7;
          18'b000000000000001_000 : zlevel_3 = 7'd8;
          18'b000000000000001_001 : zlevel_3 = 7'd9;
          18'b000000000000001_010 : zlevel_3 = 7'd10;
          18'b000000000000001_011 : zlevel_3 = 7'd11;
          18'b000000000000001_100 : zlevel_3 = 7'd12;
          18'b000000000000001_101 : zlevel_3 = 7'd13;
          18'b000000000000001_110 : zlevel_3 = 7'd14;
          18'b000000000000001_111 : zlevel_3 = 7'd15;
          18'b000000000000011_000 : zlevel_3 = 7'd16;
          18'b000000000000011_001 : zlevel_3 = 7'd17;
          18'b000000000000011_010 : zlevel_3 = 7'd18;
          18'b000000000000011_011 : zlevel_3 = 7'd19;
          18'b000000000000011_100 : zlevel_3 = 7'd20;
          18'b000000000000011_101 : zlevel_3 = 7'd21;
          18'b000000000000011_110 : zlevel_3 = 7'd22;
          18'b000000000000011_111 : zlevel_3 = 7'd23;
          18'b000000000000111_000 : zlevel_3 = 7'd24;
          18'b000000000000111_001 : zlevel_3 = 7'd25;
          18'b000000000000111_010 : zlevel_3 = 7'd26;
          18'b000000000000111_011 : zlevel_3 = 7'd27;
          18'b000000000000111_100 : zlevel_3 = 7'd28;
          18'b000000000000111_101 : zlevel_3 = 7'd29;
          18'b000000000000111_110 : zlevel_3 = 7'd30;
          18'b000000000000111_111 : zlevel_3 = 7'd31;
          18'b000000000001111_000 : zlevel_3 = 7'd32;
          18'b000000000001111_001 : zlevel_3 = 7'd33;
          18'b000000000001111_010 : zlevel_3 = 7'd34;
          18'b000000000001111_011 : zlevel_3 = 7'd35;
          18'b000000000001111_100 : zlevel_3 = 7'd36;
          18'b000000000001111_101 : zlevel_3 = 7'd37;
          18'b000000000001111_110 : zlevel_3 = 7'd38;
          18'b000000000001111_111 : zlevel_3 = 7'd39;
          18'b000000000011111_000 : zlevel_3 = 7'd40;
          18'b000000000011111_001 : zlevel_3 = 7'd41;
          18'b000000000011111_010 : zlevel_3 = 7'd42;
          18'b000000000011111_011 : zlevel_3 = 7'd43;
          18'b000000000011111_100 : zlevel_3 = 7'd44;
          18'b000000000011111_101 : zlevel_3 = 7'd45;
          18'b000000000011111_110 : zlevel_3 = 7'd46;
          18'b000000000011111_111 : zlevel_3 = 7'd47;
          18'b000000000111111_000 : zlevel_3 = 7'd48;
          18'b000000000111111_001 : zlevel_3 = 7'd49;
          18'b000000000111111_010 : zlevel_3 = 7'd50;
          18'b000000000111111_011 : zlevel_3 = 7'd51;
          18'b000000000111111_100 : zlevel_3 = 7'd52;
          18'b000000000111111_101 : zlevel_3 = 7'd53;
          18'b000000000111111_110 : zlevel_3 = 7'd54;
          18'b000000000111111_111 : zlevel_3 = 7'd55;
          18'b000000001111111_000 : zlevel_3 = 7'd56;
          18'b000000001111111_001 : zlevel_3 = 7'd57;
          18'b000000001111111_010 : zlevel_3 = 7'd58;
          18'b000000001111111_011 : zlevel_3 = 7'd59;
          18'b000000001111111_100 : zlevel_3 = 7'd60;
          18'b000000001111111_101 : zlevel_3 = 7'd61;
          18'b000000001111111_110 : zlevel_3 = 7'd62;
          18'b000000001111111_111 : zlevel_3 = 7'd63;
          18'b000000011111111_000 : zlevel_3 = 7'd64;
          18'b000000011111111_001 : zlevel_3 = 7'd65;
          18'b000000011111111_010 : zlevel_3 = 7'd66;
          18'b000000011111111_011 : zlevel_3 = 7'd67;
          18'b000000011111111_100 : zlevel_3 = 7'd68;
          18'b000000011111111_101 : zlevel_3 = 7'd69;
          18'b000000011111111_110 : zlevel_3 = 7'd70;
          18'b000000011111111_111 : zlevel_3 = 7'd71;
          18'b000000111111111_000 : zlevel_3 = 7'd72;
          18'b000000111111111_001 : zlevel_3 = 7'd73;
          18'b000000111111111_010 : zlevel_3 = 7'd74;
          18'b000000111111111_011 : zlevel_3 = 7'd75;
          18'b000000111111111_100 : zlevel_3 = 7'd76;
          18'b000000111111111_101 : zlevel_3 = 7'd77;
          18'b000000111111111_110 : zlevel_3 = 7'd78;
          18'b000000111111111_111 : zlevel_3 = 7'd79;
          18'b000001111111111_000 : zlevel_3 = 7'd80;
          18'b000001111111111_001 : zlevel_3 = 7'd81;
          18'b000001111111111_010 : zlevel_3 = 7'd82;
          18'b000001111111111_011 : zlevel_3 = 7'd83;
          18'b000001111111111_100 : zlevel_3 = 7'd84;
          18'b000001111111111_101 : zlevel_3 = 7'd85;
          18'b000001111111111_110 : zlevel_3 = 7'd86;
          18'b000001111111111_111 : zlevel_3 = 7'd87;
          18'b000011111111111_000 : zlevel_3 = 7'd88;
          18'b000011111111111_001 : zlevel_3 = 7'd89;
          18'b000011111111111_010 : zlevel_3 = 7'd90;
          18'b000011111111111_011 : zlevel_3 = 7'd91;
          18'b000011111111111_100 : zlevel_3 = 7'd92;
          18'b000011111111111_101 : zlevel_3 = 7'd93;
          18'b000011111111111_110 : zlevel_3 = 7'd94;
          18'b000011111111111_111 : zlevel_3 = 7'd95;
          18'b000111111111111_000 : zlevel_3 = 7'd96;
          18'b000111111111111_001 : zlevel_3 = 7'd97;
          18'b000111111111111_010 : zlevel_3 = 7'd98;
          18'b000111111111111_011 : zlevel_3 = 7'd99;
          18'b000111111111111_100 : zlevel_3 = 7'd100;
          18'b000111111111111_101 : zlevel_3 = 7'd101;
          18'b000111111111111_110 : zlevel_3 = 7'd102;
          18'b000111111111111_111 : zlevel_3 = 7'd103;
          18'b001111111111111_000 : zlevel_3 = 7'd104;
          18'b001111111111111_001 : zlevel_3 = 7'd105;
          18'b001111111111111_010 : zlevel_3 = 7'd106;
          18'b001111111111111_011 : zlevel_3 = 7'd107;
          18'b001111111111111_100 : zlevel_3 = 7'd108;
          18'b001111111111111_101 : zlevel_3 = 7'd109;
          18'b001111111111111_110 : zlevel_3 = 7'd110;
          18'b001111111111111_111 : zlevel_3 = 7'd111;
          18'b011111111111111_000 : zlevel_3 = 7'd112;
          18'b011111111111111_001 : zlevel_3 = 7'd113;
          18'b011111111111111_010 : zlevel_3 = 7'd114;
          18'b011111111111111_011 : zlevel_3 = 7'd115;
          18'b011111111111111_100 : zlevel_3 = 7'd116;
          18'b011111111111111_101 : zlevel_3 = 7'd117;
          18'b011111111111111_110 : zlevel_3 = 7'd118;
          18'b011111111111111_111 : zlevel_3 = 7'd119;
          18'b111111111111111_000 : zlevel_3 = 7'd120;
          18'b111111111111111_001 : zlevel_3 = 7'd121;
          18'b111111111111111_010 : zlevel_3 = 7'd122;
          18'b111111111111111_011 : zlevel_3 = 7'd123;
          18'b111111111111111_100 : zlevel_3 = 7'd124;
          18'b111111111111111_101 : zlevel_3 = 7'd125;
          18'b111111111111111_110 : zlevel_3 = 7'd126;
          18'b111111111111111_111 : zlevel_3 = 7'd127;
          default                 : zlevel_3 = 7'bxxxxxxx;
      endcase
  end

  always @(ZCAL_ret or zlevel_0 or zlevel_1 or zlevel_2 or zlevel_3) begin
      case (ZCAL_ret)
          2'b00    : zlevel_cal = zlevel_0;
          2'b01    : zlevel_cal = zlevel_1;
          2'b10    : zlevel_cal = zlevel_2;
          default  : zlevel_cal = zlevel_3;
      endcase
  end

  specify
      (ZCAL *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZIOH_ZQ *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZQ_OFF => ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PD => ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule

`endcelldefine


// ------------------------------
// Output impedance / input termination controller
// ------------------------------
`celldefine
module DWC_D4MV_PZQ_EW (MVREF_ZQ,
`ifdef DWC_DDRPHY_PG_PINS
      MVDD, MVAA_PLL, MVDDQ,  MVSS, MVSSQ,
`endif
      POCH, PAD, ZCAL, ZCOMP, ZIOH_ZQ, LENH, ZPROG, ZQ_OFF, PD, PDRH18, MVREFSE_ZQ);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVDD;
  input             MVAA_PLL;        // bonding pad and supply
  input             MVDDQ;
  input             MVSS;
  input             MVSSQ;
`endif
  input  [3:0]      MVREF_ZQ;
  input             POCH;	          // Power-on clear high voltage
  input             PAD;
  input  [1:0]      ZCAL;
  output            ZCOMP;
  input  [71:0]     ZIOH_ZQ;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input  [7:0]      ZPROG;
  input             ZQ_OFF;
  input             PD;
  input		PDRH18;
  input		MVREFSE_ZQ;
 
  // --------------------
  // "zlevel" is a value between 0 and 31. It is decoded through ZIOH_ZQ,
  // which is encoded in the PVREF cell from ZCOMP and ZLSB
  //
  // zlevel_0 = (ZCOMP[3:0]*2)   + ZLSB[0]
  // zlevel_1 = (ZCOMP[7:4]*2)   + ZLSB[1]
  // zlevel_2 = (ZCOMP[11:8]*2)  + ZLSB[2]
  // zlevel_3 = (ZCOMP[15:12]*2) + ZLSB[3]
  // --------------------
  reg    [4:0]      trippoint_minimum;
  reg    [7:0]      zlevel_0;
  reg    [7:0]      zlevel_1;
  reg    [7:0]      zlevel_2;
  reg    [7:0]      zlevel_3;
  reg    [7:0]      zlevel_cal;
  
  wire	 [1:0]	    ZCAL_ret;
  wire	 [7:0]	    ZPROG_ret;
  wire	 	    ZQ_OFF_PD_ret;
  wire		    ZQ_OFF_PD;	
  wire              POCH_internal;
  wire              LENH_b;

  wire   [3:0]      zprog_i;

	// ZQ_OFF or PD 
	
	or (ZQ_OFF_PD, ZQ_OFF, PD);
	
  DWC_D4MV_LATCH ZCAL_0_lat (ZCAL_ret[0], ZCAL[0], LENH);
  DWC_D4MV_LATCH ZCAL_1_lat (ZCAL_ret[1], ZCAL[1], LENH);

  DWC_D4MV_LATCH ZPROG_0_lat (ZPROG_ret[0], ZPROG[0], LENH);
  DWC_D4MV_LATCH ZPROG_1_lat (ZPROG_ret[1], ZPROG[1], LENH);
  DWC_D4MV_LATCH ZPROG_2_lat (ZPROG_ret[2], ZPROG[2], LENH);
  DWC_D4MV_LATCH ZPROG_3_lat (ZPROG_ret[3], ZPROG[3], LENH);
  DWC_D4MV_LATCH ZPROG_4_lat (ZPROG_ret[4], ZPROG[4], LENH);
  DWC_D4MV_LATCH ZPROG_5_lat (ZPROG_ret[5], ZPROG[5], LENH);
  DWC_D4MV_LATCH ZPROG_6_lat (ZPROG_ret[6], ZPROG[6], LENH);
  DWC_D4MV_LATCH ZPROG_7_lat (ZPROG_ret[7], ZPROG[7], LENH);

  DWC_D4MV_LATCH ZQ_OFF_lat (ZQ_OFF_PD_ret, ZQ_OFF_PD, LENH);

  not (LENH_b, LENH);
  and (POCH_internal, POCH, LENH_b);

`ifdef DWC_DDRPHY_ATPG_MODEL
  `ifdef DWC_DDR3PHY_TB
  assign ZCOMP = ((ZQ_OFF_PD === 1'bx || ZQ_OFF_PD === 1'bz)) ? 1'bx : !ZQ_OFF_PD_ret & (zlevel_cal < trippoint_minimum) & !POCH_internal;
  `else
  assign ZCOMP = !ZQ_OFF_PD_ret & !POCH_internal;
  `endif
`else
  assign ZCOMP = ((ZQ_OFF_PD === 1'bx || ZQ_OFF_PD === 1'bz)) ? 1'bx : !ZQ_OFF_PD_ret & (zlevel_cal < trippoint_minimum) & !POCH_internal;
`endif

  //-----------------
  // ZPROG is divided into two 4-bit configuration values
  // ZPROG[7:4] is used to program termination impedance
  // ZPROG[3:0] is used to program output drive impedance
  //-----------------
  assign zprog_i[3] = ZCAL_ret[1] ? ZPROG_ret[7] : ZPROG_ret[3];
  assign zprog_i[2] = ZCAL_ret[1] ? ZPROG_ret[6] : ZPROG_ret[2];
  assign zprog_i[1] = ZCAL_ret[1] ? ZPROG_ret[5] : ZPROG_ret[1];
  assign zprog_i[0] = ZCAL_ret[1] ? ZPROG_ret[4] : ZPROG_ret[0];

  always @(zprog_i) begin
      case (zprog_i)
          4'b0000   : trippoint_minimum = 5'd0;
          4'b0001   : trippoint_minimum = 5'd2;
          4'b0010   : trippoint_minimum = 5'd2;
          4'b0011   : trippoint_minimum = 5'd4;
          4'b0100   : trippoint_minimum = 5'd4;
          4'b0101   : trippoint_minimum = 5'd6;
          4'b0110   : trippoint_minimum = 5'd8;
          4'b0111   : trippoint_minimum = 5'd8;
          4'b1000   : trippoint_minimum = 5'd10;
          4'b1001   : trippoint_minimum = 5'd10;
          4'b1010   : trippoint_minimum = 5'd12;
          4'b1011   : trippoint_minimum = 5'd12;
          4'b1100   : trippoint_minimum = 5'd14;
          4'b1101   : trippoint_minimum = 5'd16;
          4'b1110   : trippoint_minimum = 5'd16;
          default   : trippoint_minimum = 5'd18;
      endcase
  end

  always @(ZIOH_ZQ) begin
      case (ZIOH_ZQ[17:0])
          18'b000000000000000_000 : zlevel_0 = 7'd0;
          18'b000000000000000_001 : zlevel_0 = 7'd1;
          18'b000000000000000_010 : zlevel_0 = 7'd2;
          18'b000000000000000_011 : zlevel_0 = 7'd3;
          18'b000000000000000_100 : zlevel_0 = 7'd4;
          18'b000000000000000_101 : zlevel_0 = 7'd5;
          18'b000000000000000_110 : zlevel_0 = 7'd6;
          18'b000000000000000_111 : zlevel_0 = 7'd7;
          18'b000000000000001_000 : zlevel_0 = 7'd8;
          18'b000000000000001_001 : zlevel_0 = 7'd9;
          18'b000000000000001_010 : zlevel_0 = 7'd10;
          18'b000000000000001_011 : zlevel_0 = 7'd11;
          18'b000000000000001_100 : zlevel_0 = 7'd12;
          18'b000000000000001_101 : zlevel_0 = 7'd13;
          18'b000000000000001_110 : zlevel_0 = 7'd14;
          18'b000000000000001_111 : zlevel_0 = 7'd15;
          18'b000000000000011_000 : zlevel_0 = 7'd16;
          18'b000000000000011_001 : zlevel_0 = 7'd17;
          18'b000000000000011_010 : zlevel_0 = 7'd18;
          18'b000000000000011_011 : zlevel_0 = 7'd19;
          18'b000000000000011_100 : zlevel_0 = 7'd20;
          18'b000000000000011_101 : zlevel_0 = 7'd21;
          18'b000000000000011_110 : zlevel_0 = 7'd22;
          18'b000000000000011_111 : zlevel_0 = 7'd23;
          18'b000000000000111_000 : zlevel_0 = 7'd24;
          18'b000000000000111_001 : zlevel_0 = 7'd25;
          18'b000000000000111_010 : zlevel_0 = 7'd26;
          18'b000000000000111_011 : zlevel_0 = 7'd27;
          18'b000000000000111_100 : zlevel_0 = 7'd28;
          18'b000000000000111_101 : zlevel_0 = 7'd29;
          18'b000000000000111_110 : zlevel_0 = 7'd30;
          18'b000000000000111_111 : zlevel_0 = 7'd31;
          18'b000000000001111_000 : zlevel_0 = 7'd32;
          18'b000000000001111_001 : zlevel_0 = 7'd33;
          18'b000000000001111_010 : zlevel_0 = 7'd34;
          18'b000000000001111_011 : zlevel_0 = 7'd35;
          18'b000000000001111_100 : zlevel_0 = 7'd36;
          18'b000000000001111_101 : zlevel_0 = 7'd37;
          18'b000000000001111_110 : zlevel_0 = 7'd38;
          18'b000000000001111_111 : zlevel_0 = 7'd39;
          18'b000000000011111_000 : zlevel_0 = 7'd40;
          18'b000000000011111_001 : zlevel_0 = 7'd41;
          18'b000000000011111_010 : zlevel_0 = 7'd42;
          18'b000000000011111_011 : zlevel_0 = 7'd43;
          18'b000000000011111_100 : zlevel_0 = 7'd44;
          18'b000000000011111_101 : zlevel_0 = 7'd45;
          18'b000000000011111_110 : zlevel_0 = 7'd46;
          18'b000000000011111_111 : zlevel_0 = 7'd47;
          18'b000000000111111_000 : zlevel_0 = 7'd48;
          18'b000000000111111_001 : zlevel_0 = 7'd49;
          18'b000000000111111_010 : zlevel_0 = 7'd50;
          18'b000000000111111_011 : zlevel_0 = 7'd51;
          18'b000000000111111_100 : zlevel_0 = 7'd52;
          18'b000000000111111_101 : zlevel_0 = 7'd53;
          18'b000000000111111_110 : zlevel_0 = 7'd54;
          18'b000000000111111_111 : zlevel_0 = 7'd55;
          18'b000000001111111_000 : zlevel_0 = 7'd56;
          18'b000000001111111_001 : zlevel_0 = 7'd57;
          18'b000000001111111_010 : zlevel_0 = 7'd58;
          18'b000000001111111_011 : zlevel_0 = 7'd59;
          18'b000000001111111_100 : zlevel_0 = 7'd60;
          18'b000000001111111_101 : zlevel_0 = 7'd61;
          18'b000000001111111_110 : zlevel_0 = 7'd62;
          18'b000000001111111_111 : zlevel_0 = 7'd63;
          18'b000000011111111_000 : zlevel_0 = 7'd64;
          18'b000000011111111_001 : zlevel_0 = 7'd65;
          18'b000000011111111_010 : zlevel_0 = 7'd66;
          18'b000000011111111_011 : zlevel_0 = 7'd67;
          18'b000000011111111_100 : zlevel_0 = 7'd68;
          18'b000000011111111_101 : zlevel_0 = 7'd69;
          18'b000000011111111_110 : zlevel_0 = 7'd70;
          18'b000000011111111_111 : zlevel_0 = 7'd71;
          18'b000000111111111_000 : zlevel_0 = 7'd72;
          18'b000000111111111_001 : zlevel_0 = 7'd73;
          18'b000000111111111_010 : zlevel_0 = 7'd74;
          18'b000000111111111_011 : zlevel_0 = 7'd75;
          18'b000000111111111_100 : zlevel_0 = 7'd76;
          18'b000000111111111_101 : zlevel_0 = 7'd77;
          18'b000000111111111_110 : zlevel_0 = 7'd78;
          18'b000000111111111_111 : zlevel_0 = 7'd79;
          18'b000001111111111_000 : zlevel_0 = 7'd80;
          18'b000001111111111_001 : zlevel_0 = 7'd81;
          18'b000001111111111_010 : zlevel_0 = 7'd82;
          18'b000001111111111_011 : zlevel_0 = 7'd83;
          18'b000001111111111_100 : zlevel_0 = 7'd84;
          18'b000001111111111_101 : zlevel_0 = 7'd85;
          18'b000001111111111_110 : zlevel_0 = 7'd86;
          18'b000001111111111_111 : zlevel_0 = 7'd87;
          18'b000011111111111_000 : zlevel_0 = 7'd88;
          18'b000011111111111_001 : zlevel_0 = 7'd89;
          18'b000011111111111_010 : zlevel_0 = 7'd90;
          18'b000011111111111_011 : zlevel_0 = 7'd91;
          18'b000011111111111_100 : zlevel_0 = 7'd92;
          18'b000011111111111_101 : zlevel_0 = 7'd93;
          18'b000011111111111_110 : zlevel_0 = 7'd94;
          18'b000011111111111_111 : zlevel_0 = 7'd95;
          18'b000111111111111_000 : zlevel_0 = 7'd96;
          18'b000111111111111_001 : zlevel_0 = 7'd97;
          18'b000111111111111_010 : zlevel_0 = 7'd98;
          18'b000111111111111_011 : zlevel_0 = 7'd99;
          18'b000111111111111_100 : zlevel_0 = 7'd100;
          18'b000111111111111_101 : zlevel_0 = 7'd101;
          18'b000111111111111_110 : zlevel_0 = 7'd102;
          18'b000111111111111_111 : zlevel_0 = 7'd103;
          18'b001111111111111_000 : zlevel_0 = 7'd104;
          18'b001111111111111_001 : zlevel_0 = 7'd105;
          18'b001111111111111_010 : zlevel_0 = 7'd106;
          18'b001111111111111_011 : zlevel_0 = 7'd107;
          18'b001111111111111_100 : zlevel_0 = 7'd108;
          18'b001111111111111_101 : zlevel_0 = 7'd109;
          18'b001111111111111_110 : zlevel_0 = 7'd110;
          18'b001111111111111_111 : zlevel_0 = 7'd111;
          18'b011111111111111_000 : zlevel_0 = 7'd112;
          18'b011111111111111_001 : zlevel_0 = 7'd113;
          18'b011111111111111_010 : zlevel_0 = 7'd114;
          18'b011111111111111_011 : zlevel_0 = 7'd115;
          18'b011111111111111_100 : zlevel_0 = 7'd116;
          18'b011111111111111_101 : zlevel_0 = 7'd117;
          18'b011111111111111_110 : zlevel_0 = 7'd118;
          18'b011111111111111_111 : zlevel_0 = 7'd119;
          18'b111111111111111_000 : zlevel_0 = 7'd120;
          18'b111111111111111_001 : zlevel_0 = 7'd121;
          18'b111111111111111_010 : zlevel_0 = 7'd122;
          18'b111111111111111_011 : zlevel_0 = 7'd123;
          18'b111111111111111_100 : zlevel_0 = 7'd124;
          18'b111111111111111_101 : zlevel_0 = 7'd125;
          18'b111111111111111_110 : zlevel_0 = 7'd126;
          18'b111111111111111_111 : zlevel_0 = 7'd127;
          default                 : zlevel_0 = 7'bxxxxxxx;
      endcase

      case (ZIOH_ZQ[35:18])
          18'b000000000000000_000 : zlevel_1 = 7'd0;
          18'b000000000000000_001 : zlevel_1 = 7'd1;
          18'b000000000000000_010 : zlevel_1 = 7'd2;
          18'b000000000000000_011 : zlevel_1 = 7'd3;
          18'b000000000000000_100 : zlevel_1 = 7'd4;
          18'b000000000000000_101 : zlevel_1 = 7'd5;
          18'b000000000000000_110 : zlevel_1 = 7'd6;
          18'b000000000000000_111 : zlevel_1 = 7'd7;
          18'b000000000000001_000 : zlevel_1 = 7'd8;
          18'b000000000000001_001 : zlevel_1 = 7'd9;
          18'b000000000000001_010 : zlevel_1 = 7'd10;
          18'b000000000000001_011 : zlevel_1 = 7'd11;
          18'b000000000000001_100 : zlevel_1 = 7'd12;
          18'b000000000000001_101 : zlevel_1 = 7'd13;
          18'b000000000000001_110 : zlevel_1 = 7'd14;
          18'b000000000000001_111 : zlevel_1 = 7'd15;
          18'b000000000000011_000 : zlevel_1 = 7'd16;
          18'b000000000000011_001 : zlevel_1 = 7'd17;
          18'b000000000000011_010 : zlevel_1 = 7'd18;
          18'b000000000000011_011 : zlevel_1 = 7'd19;
          18'b000000000000011_100 : zlevel_1 = 7'd20;
          18'b000000000000011_101 : zlevel_1 = 7'd21;
          18'b000000000000011_110 : zlevel_1 = 7'd22;
          18'b000000000000011_111 : zlevel_1 = 7'd23;
          18'b000000000000111_000 : zlevel_1 = 7'd24;
          18'b000000000000111_001 : zlevel_1 = 7'd25;
          18'b000000000000111_010 : zlevel_1 = 7'd26;
          18'b000000000000111_011 : zlevel_1 = 7'd27;
          18'b000000000000111_100 : zlevel_1 = 7'd28;
          18'b000000000000111_101 : zlevel_1 = 7'd29;
          18'b000000000000111_110 : zlevel_1 = 7'd30;
          18'b000000000000111_111 : zlevel_1 = 7'd31;
          18'b000000000001111_000 : zlevel_1 = 7'd32;
          18'b000000000001111_001 : zlevel_1 = 7'd33;
          18'b000000000001111_010 : zlevel_1 = 7'd34;
          18'b000000000001111_011 : zlevel_1 = 7'd35;
          18'b000000000001111_100 : zlevel_1 = 7'd36;
          18'b000000000001111_101 : zlevel_1 = 7'd37;
          18'b000000000001111_110 : zlevel_1 = 7'd38;
          18'b000000000001111_111 : zlevel_1 = 7'd39;
          18'b000000000011111_000 : zlevel_1 = 7'd40;
          18'b000000000011111_001 : zlevel_1 = 7'd41;
          18'b000000000011111_010 : zlevel_1 = 7'd42;
          18'b000000000011111_011 : zlevel_1 = 7'd43;
          18'b000000000011111_100 : zlevel_1 = 7'd44;
          18'b000000000011111_101 : zlevel_1 = 7'd45;
          18'b000000000011111_110 : zlevel_1 = 7'd46;
          18'b000000000011111_111 : zlevel_1 = 7'd47;
          18'b000000000111111_000 : zlevel_1 = 7'd48;
          18'b000000000111111_001 : zlevel_1 = 7'd49;
          18'b000000000111111_010 : zlevel_1 = 7'd50;
          18'b000000000111111_011 : zlevel_1 = 7'd51;
          18'b000000000111111_100 : zlevel_1 = 7'd52;
          18'b000000000111111_101 : zlevel_1 = 7'd53;
          18'b000000000111111_110 : zlevel_1 = 7'd54;
          18'b000000000111111_111 : zlevel_1 = 7'd55;
          18'b000000001111111_000 : zlevel_1 = 7'd56;
          18'b000000001111111_001 : zlevel_1 = 7'd57;
          18'b000000001111111_010 : zlevel_1 = 7'd58;
          18'b000000001111111_011 : zlevel_1 = 7'd59;
          18'b000000001111111_100 : zlevel_1 = 7'd60;
          18'b000000001111111_101 : zlevel_1 = 7'd61;
          18'b000000001111111_110 : zlevel_1 = 7'd62;
          18'b000000001111111_111 : zlevel_1 = 7'd63;
          18'b000000011111111_000 : zlevel_1 = 7'd64;
          18'b000000011111111_001 : zlevel_1 = 7'd65;
          18'b000000011111111_010 : zlevel_1 = 7'd66;
          18'b000000011111111_011 : zlevel_1 = 7'd67;
          18'b000000011111111_100 : zlevel_1 = 7'd68;
          18'b000000011111111_101 : zlevel_1 = 7'd69;
          18'b000000011111111_110 : zlevel_1 = 7'd70;
          18'b000000011111111_111 : zlevel_1 = 7'd71;
          18'b000000111111111_000 : zlevel_1 = 7'd72;
          18'b000000111111111_001 : zlevel_1 = 7'd73;
          18'b000000111111111_010 : zlevel_1 = 7'd74;
          18'b000000111111111_011 : zlevel_1 = 7'd75;
          18'b000000111111111_100 : zlevel_1 = 7'd76;
          18'b000000111111111_101 : zlevel_1 = 7'd77;
          18'b000000111111111_110 : zlevel_1 = 7'd78;
          18'b000000111111111_111 : zlevel_1 = 7'd79;
          18'b000001111111111_000 : zlevel_1 = 7'd80;
          18'b000001111111111_001 : zlevel_1 = 7'd81;
          18'b000001111111111_010 : zlevel_1 = 7'd82;
          18'b000001111111111_011 : zlevel_1 = 7'd83;
          18'b000001111111111_100 : zlevel_1 = 7'd84;
          18'b000001111111111_101 : zlevel_1 = 7'd85;
          18'b000001111111111_110 : zlevel_1 = 7'd86;
          18'b000001111111111_111 : zlevel_1 = 7'd87;
          18'b000011111111111_000 : zlevel_1 = 7'd88;
          18'b000011111111111_001 : zlevel_1 = 7'd89;
          18'b000011111111111_010 : zlevel_1 = 7'd90;
          18'b000011111111111_011 : zlevel_1 = 7'd91;
          18'b000011111111111_100 : zlevel_1 = 7'd92;
          18'b000011111111111_101 : zlevel_1 = 7'd93;
          18'b000011111111111_110 : zlevel_1 = 7'd94;
          18'b000011111111111_111 : zlevel_1 = 7'd95;
          18'b000111111111111_000 : zlevel_1 = 7'd96;
          18'b000111111111111_001 : zlevel_1 = 7'd97;
          18'b000111111111111_010 : zlevel_1 = 7'd98;
          18'b000111111111111_011 : zlevel_1 = 7'd99;
          18'b000111111111111_100 : zlevel_1 = 7'd100;
          18'b000111111111111_101 : zlevel_1 = 7'd101;
          18'b000111111111111_110 : zlevel_1 = 7'd102;
          18'b000111111111111_111 : zlevel_1 = 7'd103;
          18'b001111111111111_000 : zlevel_1 = 7'd104;
          18'b001111111111111_001 : zlevel_1 = 7'd105;
          18'b001111111111111_010 : zlevel_1 = 7'd106;
          18'b001111111111111_011 : zlevel_1 = 7'd107;
          18'b001111111111111_100 : zlevel_1 = 7'd108;
          18'b001111111111111_101 : zlevel_1 = 7'd109;
          18'b001111111111111_110 : zlevel_1 = 7'd110;
          18'b001111111111111_111 : zlevel_1 = 7'd111;
          18'b011111111111111_000 : zlevel_1 = 7'd112;
          18'b011111111111111_001 : zlevel_1 = 7'd113;
          18'b011111111111111_010 : zlevel_1 = 7'd114;
          18'b011111111111111_011 : zlevel_1 = 7'd115;
          18'b011111111111111_100 : zlevel_1 = 7'd116;
          18'b011111111111111_101 : zlevel_1 = 7'd117;
          18'b011111111111111_110 : zlevel_1 = 7'd118;
          18'b011111111111111_111 : zlevel_1 = 7'd119;
          18'b111111111111111_000 : zlevel_1 = 7'd120;
          18'b111111111111111_001 : zlevel_1 = 7'd121;
          18'b111111111111111_010 : zlevel_1 = 7'd122;
          18'b111111111111111_011 : zlevel_1 = 7'd123;
          18'b111111111111111_100 : zlevel_1 = 7'd124;
          18'b111111111111111_101 : zlevel_1 = 7'd125;
          18'b111111111111111_110 : zlevel_1 = 7'd126;
          18'b111111111111111_111 : zlevel_1 = 7'd127;
          default                 : zlevel_1 = 7'bxxxxxxx;
      endcase

      case (ZIOH_ZQ[53:36])
          18'b000000000000000_000 : zlevel_2 = 7'd0;
          18'b000000000000000_001 : zlevel_2 = 7'd1;
          18'b000000000000000_010 : zlevel_2 = 7'd2;
          18'b000000000000000_011 : zlevel_2 = 7'd3;
          18'b000000000000000_100 : zlevel_2 = 7'd4;
          18'b000000000000000_101 : zlevel_2 = 7'd5;
          18'b000000000000000_110 : zlevel_2 = 7'd6;
          18'b000000000000000_111 : zlevel_2 = 7'd7;
          18'b000000000000001_000 : zlevel_2 = 7'd8;
          18'b000000000000001_001 : zlevel_2 = 7'd9;
          18'b000000000000001_010 : zlevel_2 = 7'd10;
          18'b000000000000001_011 : zlevel_2 = 7'd11;
          18'b000000000000001_100 : zlevel_2 = 7'd12;
          18'b000000000000001_101 : zlevel_2 = 7'd13;
          18'b000000000000001_110 : zlevel_2 = 7'd14;
          18'b000000000000001_111 : zlevel_2 = 7'd15;
          18'b000000000000011_000 : zlevel_2 = 7'd16;
          18'b000000000000011_001 : zlevel_2 = 7'd17;
          18'b000000000000011_010 : zlevel_2 = 7'd18;
          18'b000000000000011_011 : zlevel_2 = 7'd19;
          18'b000000000000011_100 : zlevel_2 = 7'd20;
          18'b000000000000011_101 : zlevel_2 = 7'd21;
          18'b000000000000011_110 : zlevel_2 = 7'd22;
          18'b000000000000011_111 : zlevel_2 = 7'd23;
          18'b000000000000111_000 : zlevel_2 = 7'd24;
          18'b000000000000111_001 : zlevel_2 = 7'd25;
          18'b000000000000111_010 : zlevel_2 = 7'd26;
          18'b000000000000111_011 : zlevel_2 = 7'd27;
          18'b000000000000111_100 : zlevel_2 = 7'd28;
          18'b000000000000111_101 : zlevel_2 = 7'd29;
          18'b000000000000111_110 : zlevel_2 = 7'd30;
          18'b000000000000111_111 : zlevel_2 = 7'd31;
          18'b000000000001111_000 : zlevel_2 = 7'd32;
          18'b000000000001111_001 : zlevel_2 = 7'd33;
          18'b000000000001111_010 : zlevel_2 = 7'd34;
          18'b000000000001111_011 : zlevel_2 = 7'd35;
          18'b000000000001111_100 : zlevel_2 = 7'd36;
          18'b000000000001111_101 : zlevel_2 = 7'd37;
          18'b000000000001111_110 : zlevel_2 = 7'd38;
          18'b000000000001111_111 : zlevel_2 = 7'd39;
          18'b000000000011111_000 : zlevel_2 = 7'd40;
          18'b000000000011111_001 : zlevel_2 = 7'd41;
          18'b000000000011111_010 : zlevel_2 = 7'd42;
          18'b000000000011111_011 : zlevel_2 = 7'd43;
          18'b000000000011111_100 : zlevel_2 = 7'd44;
          18'b000000000011111_101 : zlevel_2 = 7'd45;
          18'b000000000011111_110 : zlevel_2 = 7'd46;
          18'b000000000011111_111 : zlevel_2 = 7'd47;
          18'b000000000111111_000 : zlevel_2 = 7'd48;
          18'b000000000111111_001 : zlevel_2 = 7'd49;
          18'b000000000111111_010 : zlevel_2 = 7'd50;
          18'b000000000111111_011 : zlevel_2 = 7'd51;
          18'b000000000111111_100 : zlevel_2 = 7'd52;
          18'b000000000111111_101 : zlevel_2 = 7'd53;
          18'b000000000111111_110 : zlevel_2 = 7'd54;
          18'b000000000111111_111 : zlevel_2 = 7'd55;
          18'b000000001111111_000 : zlevel_2 = 7'd56;
          18'b000000001111111_001 : zlevel_2 = 7'd57;
          18'b000000001111111_010 : zlevel_2 = 7'd58;
          18'b000000001111111_011 : zlevel_2 = 7'd59;
          18'b000000001111111_100 : zlevel_2 = 7'd60;
          18'b000000001111111_101 : zlevel_2 = 7'd61;
          18'b000000001111111_110 : zlevel_2 = 7'd62;
          18'b000000001111111_111 : zlevel_2 = 7'd63;
          18'b000000011111111_000 : zlevel_2 = 7'd64;
          18'b000000011111111_001 : zlevel_2 = 7'd65;
          18'b000000011111111_010 : zlevel_2 = 7'd66;
          18'b000000011111111_011 : zlevel_2 = 7'd67;
          18'b000000011111111_100 : zlevel_2 = 7'd68;
          18'b000000011111111_101 : zlevel_2 = 7'd69;
          18'b000000011111111_110 : zlevel_2 = 7'd70;
          18'b000000011111111_111 : zlevel_2 = 7'd71;
          18'b000000111111111_000 : zlevel_2 = 7'd72;
          18'b000000111111111_001 : zlevel_2 = 7'd73;
          18'b000000111111111_010 : zlevel_2 = 7'd74;
          18'b000000111111111_011 : zlevel_2 = 7'd75;
          18'b000000111111111_100 : zlevel_2 = 7'd76;
          18'b000000111111111_101 : zlevel_2 = 7'd77;
          18'b000000111111111_110 : zlevel_2 = 7'd78;
          18'b000000111111111_111 : zlevel_2 = 7'd79;
          18'b000001111111111_000 : zlevel_2 = 7'd80;
          18'b000001111111111_001 : zlevel_2 = 7'd81;
          18'b000001111111111_010 : zlevel_2 = 7'd82;
          18'b000001111111111_011 : zlevel_2 = 7'd83;
          18'b000001111111111_100 : zlevel_2 = 7'd84;
          18'b000001111111111_101 : zlevel_2 = 7'd85;
          18'b000001111111111_110 : zlevel_2 = 7'd86;
          18'b000001111111111_111 : zlevel_2 = 7'd87;
          18'b000011111111111_000 : zlevel_2 = 7'd88;
          18'b000011111111111_001 : zlevel_2 = 7'd89;
          18'b000011111111111_010 : zlevel_2 = 7'd90;
          18'b000011111111111_011 : zlevel_2 = 7'd91;
          18'b000011111111111_100 : zlevel_2 = 7'd92;
          18'b000011111111111_101 : zlevel_2 = 7'd93;
          18'b000011111111111_110 : zlevel_2 = 7'd94;
          18'b000011111111111_111 : zlevel_2 = 7'd95;
          18'b000111111111111_000 : zlevel_2 = 7'd96;
          18'b000111111111111_001 : zlevel_2 = 7'd97;
          18'b000111111111111_010 : zlevel_2 = 7'd98;
          18'b000111111111111_011 : zlevel_2 = 7'd99;
          18'b000111111111111_100 : zlevel_2 = 7'd100;
          18'b000111111111111_101 : zlevel_2 = 7'd101;
          18'b000111111111111_110 : zlevel_2 = 7'd102;
          18'b000111111111111_111 : zlevel_2 = 7'd103;
          18'b001111111111111_000 : zlevel_2 = 7'd104;
          18'b001111111111111_001 : zlevel_2 = 7'd105;
          18'b001111111111111_010 : zlevel_2 = 7'd106;
          18'b001111111111111_011 : zlevel_2 = 7'd107;
          18'b001111111111111_100 : zlevel_2 = 7'd108;
          18'b001111111111111_101 : zlevel_2 = 7'd109;
          18'b001111111111111_110 : zlevel_2 = 7'd110;
          18'b001111111111111_111 : zlevel_2 = 7'd111;
          18'b011111111111111_000 : zlevel_2 = 7'd112;
          18'b011111111111111_001 : zlevel_2 = 7'd113;
          18'b011111111111111_010 : zlevel_2 = 7'd114;
          18'b011111111111111_011 : zlevel_2 = 7'd115;
          18'b011111111111111_100 : zlevel_2 = 7'd116;
          18'b011111111111111_101 : zlevel_2 = 7'd117;
          18'b011111111111111_110 : zlevel_2 = 7'd118;
          18'b011111111111111_111 : zlevel_2 = 7'd119;
          18'b111111111111111_000 : zlevel_2 = 7'd120;
          18'b111111111111111_001 : zlevel_2 = 7'd121;
          18'b111111111111111_010 : zlevel_2 = 7'd122;
          18'b111111111111111_011 : zlevel_2 = 7'd123;
          18'b111111111111111_100 : zlevel_2 = 7'd124;
          18'b111111111111111_101 : zlevel_2 = 7'd125;
          18'b111111111111111_110 : zlevel_2 = 7'd126;
          18'b111111111111111_111 : zlevel_2 = 7'd127;
          default                 : zlevel_2 = 7'bxxxxxxx;
      endcase

      case (ZIOH_ZQ[71:54])
          18'b000000000000000_000 : zlevel_3 = 7'd0;
          18'b000000000000000_001 : zlevel_3 = 7'd1;
          18'b000000000000000_010 : zlevel_3 = 7'd2;
          18'b000000000000000_011 : zlevel_3 = 7'd3;
          18'b000000000000000_100 : zlevel_3 = 7'd4;
          18'b000000000000000_101 : zlevel_3 = 7'd5;
          18'b000000000000000_110 : zlevel_3 = 7'd6;
          18'b000000000000000_111 : zlevel_3 = 7'd7;
          18'b000000000000001_000 : zlevel_3 = 7'd8;
          18'b000000000000001_001 : zlevel_3 = 7'd9;
          18'b000000000000001_010 : zlevel_3 = 7'd10;
          18'b000000000000001_011 : zlevel_3 = 7'd11;
          18'b000000000000001_100 : zlevel_3 = 7'd12;
          18'b000000000000001_101 : zlevel_3 = 7'd13;
          18'b000000000000001_110 : zlevel_3 = 7'd14;
          18'b000000000000001_111 : zlevel_3 = 7'd15;
          18'b000000000000011_000 : zlevel_3 = 7'd16;
          18'b000000000000011_001 : zlevel_3 = 7'd17;
          18'b000000000000011_010 : zlevel_3 = 7'd18;
          18'b000000000000011_011 : zlevel_3 = 7'd19;
          18'b000000000000011_100 : zlevel_3 = 7'd20;
          18'b000000000000011_101 : zlevel_3 = 7'd21;
          18'b000000000000011_110 : zlevel_3 = 7'd22;
          18'b000000000000011_111 : zlevel_3 = 7'd23;
          18'b000000000000111_000 : zlevel_3 = 7'd24;
          18'b000000000000111_001 : zlevel_3 = 7'd25;
          18'b000000000000111_010 : zlevel_3 = 7'd26;
          18'b000000000000111_011 : zlevel_3 = 7'd27;
          18'b000000000000111_100 : zlevel_3 = 7'd28;
          18'b000000000000111_101 : zlevel_3 = 7'd29;
          18'b000000000000111_110 : zlevel_3 = 7'd30;
          18'b000000000000111_111 : zlevel_3 = 7'd31;
          18'b000000000001111_000 : zlevel_3 = 7'd32;
          18'b000000000001111_001 : zlevel_3 = 7'd33;
          18'b000000000001111_010 : zlevel_3 = 7'd34;
          18'b000000000001111_011 : zlevel_3 = 7'd35;
          18'b000000000001111_100 : zlevel_3 = 7'd36;
          18'b000000000001111_101 : zlevel_3 = 7'd37;
          18'b000000000001111_110 : zlevel_3 = 7'd38;
          18'b000000000001111_111 : zlevel_3 = 7'd39;
          18'b000000000011111_000 : zlevel_3 = 7'd40;
          18'b000000000011111_001 : zlevel_3 = 7'd41;
          18'b000000000011111_010 : zlevel_3 = 7'd42;
          18'b000000000011111_011 : zlevel_3 = 7'd43;
          18'b000000000011111_100 : zlevel_3 = 7'd44;
          18'b000000000011111_101 : zlevel_3 = 7'd45;
          18'b000000000011111_110 : zlevel_3 = 7'd46;
          18'b000000000011111_111 : zlevel_3 = 7'd47;
          18'b000000000111111_000 : zlevel_3 = 7'd48;
          18'b000000000111111_001 : zlevel_3 = 7'd49;
          18'b000000000111111_010 : zlevel_3 = 7'd50;
          18'b000000000111111_011 : zlevel_3 = 7'd51;
          18'b000000000111111_100 : zlevel_3 = 7'd52;
          18'b000000000111111_101 : zlevel_3 = 7'd53;
          18'b000000000111111_110 : zlevel_3 = 7'd54;
          18'b000000000111111_111 : zlevel_3 = 7'd55;
          18'b000000001111111_000 : zlevel_3 = 7'd56;
          18'b000000001111111_001 : zlevel_3 = 7'd57;
          18'b000000001111111_010 : zlevel_3 = 7'd58;
          18'b000000001111111_011 : zlevel_3 = 7'd59;
          18'b000000001111111_100 : zlevel_3 = 7'd60;
          18'b000000001111111_101 : zlevel_3 = 7'd61;
          18'b000000001111111_110 : zlevel_3 = 7'd62;
          18'b000000001111111_111 : zlevel_3 = 7'd63;
          18'b000000011111111_000 : zlevel_3 = 7'd64;
          18'b000000011111111_001 : zlevel_3 = 7'd65;
          18'b000000011111111_010 : zlevel_3 = 7'd66;
          18'b000000011111111_011 : zlevel_3 = 7'd67;
          18'b000000011111111_100 : zlevel_3 = 7'd68;
          18'b000000011111111_101 : zlevel_3 = 7'd69;
          18'b000000011111111_110 : zlevel_3 = 7'd70;
          18'b000000011111111_111 : zlevel_3 = 7'd71;
          18'b000000111111111_000 : zlevel_3 = 7'd72;
          18'b000000111111111_001 : zlevel_3 = 7'd73;
          18'b000000111111111_010 : zlevel_3 = 7'd74;
          18'b000000111111111_011 : zlevel_3 = 7'd75;
          18'b000000111111111_100 : zlevel_3 = 7'd76;
          18'b000000111111111_101 : zlevel_3 = 7'd77;
          18'b000000111111111_110 : zlevel_3 = 7'd78;
          18'b000000111111111_111 : zlevel_3 = 7'd79;
          18'b000001111111111_000 : zlevel_3 = 7'd80;
          18'b000001111111111_001 : zlevel_3 = 7'd81;
          18'b000001111111111_010 : zlevel_3 = 7'd82;
          18'b000001111111111_011 : zlevel_3 = 7'd83;
          18'b000001111111111_100 : zlevel_3 = 7'd84;
          18'b000001111111111_101 : zlevel_3 = 7'd85;
          18'b000001111111111_110 : zlevel_3 = 7'd86;
          18'b000001111111111_111 : zlevel_3 = 7'd87;
          18'b000011111111111_000 : zlevel_3 = 7'd88;
          18'b000011111111111_001 : zlevel_3 = 7'd89;
          18'b000011111111111_010 : zlevel_3 = 7'd90;
          18'b000011111111111_011 : zlevel_3 = 7'd91;
          18'b000011111111111_100 : zlevel_3 = 7'd92;
          18'b000011111111111_101 : zlevel_3 = 7'd93;
          18'b000011111111111_110 : zlevel_3 = 7'd94;
          18'b000011111111111_111 : zlevel_3 = 7'd95;
          18'b000111111111111_000 : zlevel_3 = 7'd96;
          18'b000111111111111_001 : zlevel_3 = 7'd97;
          18'b000111111111111_010 : zlevel_3 = 7'd98;
          18'b000111111111111_011 : zlevel_3 = 7'd99;
          18'b000111111111111_100 : zlevel_3 = 7'd100;
          18'b000111111111111_101 : zlevel_3 = 7'd101;
          18'b000111111111111_110 : zlevel_3 = 7'd102;
          18'b000111111111111_111 : zlevel_3 = 7'd103;
          18'b001111111111111_000 : zlevel_3 = 7'd104;
          18'b001111111111111_001 : zlevel_3 = 7'd105;
          18'b001111111111111_010 : zlevel_3 = 7'd106;
          18'b001111111111111_011 : zlevel_3 = 7'd107;
          18'b001111111111111_100 : zlevel_3 = 7'd108;
          18'b001111111111111_101 : zlevel_3 = 7'd109;
          18'b001111111111111_110 : zlevel_3 = 7'd110;
          18'b001111111111111_111 : zlevel_3 = 7'd111;
          18'b011111111111111_000 : zlevel_3 = 7'd112;
          18'b011111111111111_001 : zlevel_3 = 7'd113;
          18'b011111111111111_010 : zlevel_3 = 7'd114;
          18'b011111111111111_011 : zlevel_3 = 7'd115;
          18'b011111111111111_100 : zlevel_3 = 7'd116;
          18'b011111111111111_101 : zlevel_3 = 7'd117;
          18'b011111111111111_110 : zlevel_3 = 7'd118;
          18'b011111111111111_111 : zlevel_3 = 7'd119;
          18'b111111111111111_000 : zlevel_3 = 7'd120;
          18'b111111111111111_001 : zlevel_3 = 7'd121;
          18'b111111111111111_010 : zlevel_3 = 7'd122;
          18'b111111111111111_011 : zlevel_3 = 7'd123;
          18'b111111111111111_100 : zlevel_3 = 7'd124;
          18'b111111111111111_101 : zlevel_3 = 7'd125;
          18'b111111111111111_110 : zlevel_3 = 7'd126;
          18'b111111111111111_111 : zlevel_3 = 7'd127;
          default                 : zlevel_3 = 7'bxxxxxxx;
      endcase
  end

  always @(ZCAL_ret or zlevel_0 or zlevel_1 or zlevel_2 or zlevel_3) begin
      case (ZCAL_ret)
          2'b00    : zlevel_cal = zlevel_0;
          2'b01    : zlevel_cal = zlevel_1;
          2'b10    : zlevel_cal = zlevel_2;
          default  : zlevel_cal = zlevel_3;
      endcase
  end

  specify
      (ZCAL *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZIOH_ZQ *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (ZQ_OFF => ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      (PD => ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZPROG[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[71] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[70] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[69] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[68] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[67] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[66] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[65] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[64] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[63] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[62] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[61] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[60] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[59] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[58] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[57] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[56] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[55] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[54] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[53] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[52] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[51] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[50] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[49] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[48] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[47] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[46] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[45] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[44] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[43] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[42] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[41] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[40] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[39] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[38] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[37] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[36] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[35] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[34] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[33] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[32] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[31] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[30] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[29] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[28] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[27] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[26] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[25] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[24] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[23] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[22] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[21] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[20] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[19] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[18] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[17] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[16] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[15] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[14] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[13] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[12] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[11] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[10] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[9] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[8] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[7] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[6] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[5] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[4] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[3] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[2] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[1] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b0)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b1) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      if ( (ZCAL[1]==1'b0) && (ZCAL[0]==1'b1)) (ZIOH_ZQ[0] *> ZCOMP) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule

`endcelldefine


// ------------------------------
// Retention Latch Enable Input
// ------------------------------
`celldefine
module DWC_D4MV_PRETPOCX_NS (PAD, MVREF, 
`ifdef DWC_DDRPHY_PG_PINS      
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
   input         PAD;      // bonding pad (data_retention_N input)
`ifdef DWC_DDRPHY_PG_PINS
   input         MVAA_PLL; // bonding pad and supply
   input         MVDDQ;	   // IO Ring Supply
   input         MVSSQ;	   // IO Ring Supply
   input         MVDD;	   // Core Supply
   input         MVSS;	   // Core Supply
`endif
   input  [3:0]  MVREF;	    // IO Reference Voltage (treat as supply) //Jing: add [3:0]
//   input         DIS_POC;  // Disable power-on-clean
   output        POCH;	   // Power-on clear high voltage
   input  [71:0] ZIOH;     // Impedance control input
   output        LENH;     // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver

  // width of POCH signal
  parameter POCH_WIDTH = 5;

  reg power_on_clear;
  
  initial
    begin
      power_on_clear = 1'b1;
      #(POCH_WIDTH);
      power_on_clear = 1'b0;
    end

`ifdef DWC_DDRPHY_ATPG_MODEL
   buf (POCH, 1'b0);
`else
  buf (POCH, power_on_clear);
`endif

  // Use simple primitive gates model
  not (LENH, PAD);

  specify
     (PAD => LENH) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PRETPOCX_EW (PAD, MVREF, 
`ifdef DWC_DDRPHY_PG_PINS      
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
   input         PAD;      // bonding pad (data_retention_N input)
`ifdef DWC_DDRPHY_PG_PINS
   input         MVAA_PLL; // bonding pad and supply
   input         MVDDQ;	   // IO Ring Supply
   input         MVSSQ;	   // IO Ring Supply
   input         MVDD;	   // Core Supply
   input         MVSS;	   // Core Supply
`endif
   input  [3:0]  MVREF;	    // IO Reference Voltage (treat as supply) //Jing: add [3:0]
//   input         DIS_POC;  // Disable power-on-clean
   output        POCH;	   // Power-on clear high voltage
   input  [71:0] ZIOH;     // Impedance control input
   output        LENH;     // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver

  // width of POCH signal
  parameter POCH_WIDTH = 5;

  reg power_on_clear;
  
  initial
    begin
      power_on_clear = 1'b1;
      #(POCH_WIDTH);
      power_on_clear = 1'b0;
    end

`ifdef DWC_DDRPHY_ATPG_MODEL
   buf (POCH, 1'b0);
`else
  buf (POCH, power_on_clear);
`endif

  // Use simple primitive gates model
  not (LENH, PAD);

  specify
     (PAD => LENH) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine

 
// ------------------------------
// Retention Latch Enable Input - Variant
// ------------------------------
`celldefine
module DWC_D4MV_PRETPOCC_NS (RET, RET_B, MVREF,
`ifdef DWC_DDRPHY_PG_PINS      
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
   input         RET;     // Core-side differential input to drive LENH
   input         RET_B;   // Core-side differential input to drive LENH
//   input         DIS_POC; // Disable power-on-clean
`ifdef DWC_DDRPHY_PG_PINS
   input         MVAA_PLL; // bonding pad and supply
   input         MVDDQ;	  // IO Ring Supply
   inout         MVSSQ;	  // IO Ring Supply
   input         MVDD;	  // Core Supply
   input         MVSS;	  // Core Supply
`endif
   input  [3:0]  MVREF;	    // IO Reference Voltage (treat as supply) //Jing: add [3:0]
   output        POCH;	  // Power-on clear high voltage
   input  [71:0] ZIOH;    // Impedance control input
   output        LENH;    // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver

  // width of POCH signal
  parameter POCH_WIDTH = 5;

  reg power_on_clear;
  wire DATA_RETN;
  wire ret_valid;
  
  initial
    begin
      power_on_clear = 1'b1;
      #(POCH_WIDTH);
      power_on_clear = 1'b0;
    end

`ifdef DWC_DDRPHY_ATPG_MODEL
   buf (POCH, 1'b0);
`else
   buf (POCH, power_on_clear);
`endif

  // RET/RETN must have opposite polarity, otherwise constantly drive 0 (should be
  // enough to produce an erroenous condition because it will always drive
  // the I/O in retention)
  xor (ret_valid, RET_B, RET);
  and (DATA_RETN, RET_B, ret_valid);

  // Use simple primitive gates model
  not (LENH, DATA_RETN);

  specify
     (RET   => LENH) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
     (RET_B => LENH) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine


`celldefine
module DWC_D4MV_PRETPOCC_EW (RET, RET_B, MVREF,
`ifdef DWC_DDRPHY_PG_PINS      
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
   input         RET;     // Core-side differential input to drive LENH
   input         RET_B;   // Core-side differential input to drive LENH
//   input         DIS_POC; // Disable power-on-clean
`ifdef DWC_DDRPHY_PG_PINS
   input         MVAA_PLL; // bonding pad and supply
   input         MVDDQ;	  // IO Ring Supply
   inout         MVSSQ;	  // IO Ring Supply
   input         MVDD;	  // Core Supply
   input         MVSS;	  // Core Supply
`endif
   input  [3:0]  MVREF;	    // IO Reference Voltage (treat as supply) //Jing: add [3:0]
   output        POCH;	  // Power-on clear high voltage
   input  [71:0] ZIOH;    // Impedance control input
   output        LENH;    // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver

  // width of POCH signal
  parameter POCH_WIDTH = 5;

  reg power_on_clear;
  wire DATA_RETN;
  wire ret_valid;
  
  initial
    begin
      power_on_clear = 1'b1;
      #(POCH_WIDTH);
      power_on_clear = 1'b0;
    end

`ifdef DWC_DDRPHY_ATPG_MODEL
   buf (POCH, 1'b0);
`else
   buf (POCH, power_on_clear);
`endif

  // RET/RETN must have opposite polarity, otherwise constantly drive 0 (should be
  // enough to produce an erroenous condition because it will always drive
  // the I/O in retention)
  xor (ret_valid, RET_B, RET);
  and (DATA_RETN, RET_B, ret_valid);

  // Use simple primitive gates model
  not (LENH, DATA_RETN);

  specify
     (RET   => LENH) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
     (RET_B => LENH) = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  endspecify

endmodule
`endcelldefine


// ------------------------------
// End / break cell
// ------------------------------

`celldefine
module DWC_D4MV_PEND_P_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ
`endif
);
 `ifdef DWC_DDRPHY_PG_PINS 
  input             MVDDQ;
`endif    
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PEND_P_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ
`endif
);
 `ifdef DWC_DDRPHY_PG_PINS 
  input             MVDDQ;
`endif    
endmodule
`endcelldefine

  // end cell
`celldefine
module DWC_D4MV_PEND_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ
`endif
);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVDDQ;
`endif
endmodule
`endcelldefine
 
`celldefine
module DWC_D4MV_PEND_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ
`endif
);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVDDQ;
`endif
endmodule
`endcelldefine

// -------------------------------------------
// Feed (spacer/filler), end, and corner cells
// -------------------------------------------

`celldefine
module DWC_D4MV_PFILL_1_NS (MVREF,
`ifdef DWC_DDRPHY_PG_PINS 
         MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif         
         POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL_1_EW (MVREF,
`ifdef DWC_DDRPHY_PG_PINS 
         MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif         
         POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS 
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL_5_NS (MVREF,
`ifdef DWC_DDRPHY_PG_PINS
   MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif   
   POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL_5_EW (MVREF,
`ifdef DWC_DDRPHY_PG_PINS
   MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif   
   POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL1_NS ( MVREF,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL1_EW ( MVREF,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL5_NS (MVREF,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine
  

`celldefine
module DWC_D4MV_PFILL5_EW (MVREF,
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine
    
// Feed (spacer) cells cutting VDDQ bus
`celldefine
module DWC_D4MV_PFILL5_ISO_NS ( MVREF,
`ifdef DWC_DDRPHY_PG_PINS     
      MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS      
  input             MVAA_PLL;       // bonding pad and supply
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  output            LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  
    assign LENH = 1'b0;

endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL5_ISO_EW ( MVREF,
`ifdef DWC_DDRPHY_PG_PINS     
      MVSSQ, MVAA_PLL, MVDD, MVSS,
`endif      
      POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS      
  input             MVAA_PLL;       // bonding pad and supply
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  output            LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  
    assign LENH = 1'b0;

endmodule
`endcelldefine

// Feed (spacer) cells cutting VDDQ VSSQ buses
`celldefine
module DWC_D4MV_PFILL5_ISO_VDDQVSSQ_NS (
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDD, MVSS,
`endif
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PFILL5_ISO_VDDQVSSQ_EW (
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDD, MVSS,
`endif
      MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);
`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input  [3:0]      MVREF;	     //Jing: add [3:0]
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
  
endmodule
`endcelldefine


 
// Corner cells
`celldefine
module DWC_D4MV_PCORNER (
`ifdef DWC_DDRPHY_PG_PINS
      MVAA_PLL, MVDDQ, MVSSQ, MVDD, MVSS,
`endif      
       MVREF, POCH, ZIOH, LENH, PDRH18, MVREFSE);

`ifdef DWC_DDRPHY_PG_PINS
  input             MVAA_PLL;       // bonding pad and supply
  input             MVDDQ;
  input             MVSSQ;
  input             MVDD;           // Core Supply
  input             MVSS;           // Core Supply
`endif
  input   [3:0]     MVREF;	    //Jing: add [3:0]     MVREF;
  input             POCH;	          // Power-on clear high voltage
  input  [71:0]     ZIOH;           // Impedance control input
  input             LENH;           // Latch enable high voltage
  input		PDRH18;
  input		MVREFSE; // Special Vref for single ended receiver
endmodule
`endcelldefine

  
// ------------------------------
// PSCAPs
// ------------------------------
`celldefine
module DWC_D4MV_PSCAP_NS (
`ifdef DWC_DDRPHY_PG_PINS     
      MVSSQ, MVDDQ, MVSS
`endif      
      );
`ifdef DWC_DDRPHY_PG_PINS      
  input             MVSSQ;
  input             MVDDQ;           
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_EW (
`ifdef DWC_DDRPHY_PG_PINS     
      MVSSQ, MVDDQ, MVSS
`endif      
      );
`ifdef DWC_DDRPHY_PG_PINS      
  input             MVSSQ;
  input             MVDDQ;           
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL_1_NS (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVDDQ, MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS  
  input		    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL_1_EW (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVDDQ, MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS  
  input		    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL_5_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVSSQ, MVDDQ, MVSS
`endif
);
`ifdef DWC_DDRPHY_PG_PINS
  input		    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL_5_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVSSQ, MVDDQ, MVSS
`endif
);
`ifdef DWC_DDRPHY_PG_PINS
  input		    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL1_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVSSQ, MVDDQ, MVSS
`endif
);
`ifdef DWC_DDRPHY_PG_PINS
  input 	    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL1_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVSSQ, MVDDQ, MVSS
`endif
);
`ifdef DWC_DDRPHY_PG_PINS
  input 	    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL5_NS (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVDDQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS   
  input             MVSSQ;
  input             MVDDQ;           
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL5_EW (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVDDQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS   
  input             MVSSQ;
  input             MVDDQ;           
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL5_ISO_NS (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS   
  input             MVSSQ;
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL5_ISO_EW (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS   
  input             MVSSQ;
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL5_ISO_VDDQVSSQ_NS (
 `ifdef DWC_DDRPHY_PG_PINS  
   MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS  
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_FILL5_ISO_VDDQVSSQ_EW (
 `ifdef DWC_DDRPHY_PG_PINS  
   MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS  
  input             MVSS;           
`endif  
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_END_NS (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVDDQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS
  input 	    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PSCAP_END_EW (
`ifdef DWC_DDRPHY_PG_PINS   
   MVSSQ, MVDDQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS
  input 	    MVSS;
  input             MVSSQ;
  input             MVDDQ;           
`endif
endmodule
`endcelldefine

// ------------------------------
// Bondpads
// ------------------------------
`celldefine
module DWC_D4MV_PPADCWI_NS (
`ifdef DWC_DDRPHY_PG_PINS   
   MVDDQ, MVSSQ, MVSS,
`endif   
   PAD );
   input     PAD;
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCWI_EW (
`ifdef DWC_DDRPHY_PG_PINS   
   MVDDQ, MVSSQ, MVSS,
`endif   
   PAD );
   input     PAD;
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCWO_NS (
`ifdef DWC_DDRPHY_PG_PINS   
   MVDDQ, MVSSQ, MVSS,
`endif
   PAD);
   input     PAD;
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVDDQ;
   input   MVSSQ; 
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCWO_EW (
`ifdef DWC_DDRPHY_PG_PINS   
   MVDDQ, MVSSQ, MVSS,
`endif
   PAD);
   input     PAD;
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVDDQ;
   input   MVSSQ; 
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL5_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL5_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL5_ISO_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVSSQ, MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVSSQ;
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL5_ISO_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVSSQ, MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVSSQ;
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL5_ISO_VDDQVSSQ_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS   
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL5_ISO_VDDQVSSQ_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVSS
`endif   
   );
`ifdef DWC_DDRPHY_PG_PINS   
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL1_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL1_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS   
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif   
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL_5_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif
    );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL_5_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif
    );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL_1_NS (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_FILL_1_EW (
`ifdef DWC_DDRPHY_PG_PINS
   MVDDQ, MVSSQ, MVSS
`endif
   );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_END_NS (
`ifdef DWC_DDRPHY_PG_PINS
    MVDDQ, MVSSQ, MVSS
`endif
    );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine

`celldefine
module DWC_D4MV_PPADCW_END_EW (
`ifdef DWC_DDRPHY_PG_PINS
    MVDDQ, MVSSQ, MVSS
`endif
    );
`ifdef DWC_DDRPHY_PG_PINS
   input   MVDDQ;
   input   MVSSQ;
   input    MVSS;
`endif
endmodule
`endcelldefine


// ------------------------------
// Primitives 
// ------------------------------

module DWC_D4MV_LATCH (Q, D, GN);
  input D;
  input GN;
  output Q;
   reg  NOTIFIER;
   wire ENABLE;
   not (ENABLE, GN);
   udp_rlat_io (int_Q, D, ENABLE, 1'B0, 1'B0, NOTIFIER);
   buf (Q, int_Q);
endmodule 

primitive udp_rlat_io (out, in, enable, clr, set, NOTIFIER);

   output out;
   input  in, enable, clr, set, NOTIFIER;
   reg    out;

   table

// in  enable  clr   set  NOT  : Qt : Qt+1
//
   1  1   0   ?   ?   : ?  :  1  ; //
   0  1   ?   0   ?   : ?  :  0  ; //
   1  *   0   ?   ?   : 1  :  1  ; // reduce pessimism
   0  *   ?   0   ?   : 0  :  0  ; // reduce pessimism
   *  0   ?   ?   ?   : ?  :  -  ; // no changes when in switches
   ?  ?   ?   1   ?   : ?  :  1  ; // set output
   ?  0   0   *   ?   : 1  :  1  ; // cover all transistions on set
   1  ?   0   *   ?   : 1  :  1  ; // cover all transistions on set
   ?  ?   1   0   ?   : ?  :  0  ; // reset output
   ?  0   *   0   ?   : 0  :  0  ; // cover all transistions on clr
   0  ?   *   0   ?   : 0  :  0  ; // cover all transistions on clr
   ?  ?   ?   ?   *   : ?  :  x  ; // any notifier changed

   endtable
endprimitive // udp_rlat_io

